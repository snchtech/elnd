1. Create a table to store users:

sql
CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL
);


2. Create a table to store user settings:

sql
CREATE TABLE user_settings (
    user_id INT,
    attribute_name VARCHAR(50),
    attribute_value VARCHAR(255),
    PRIMARY KEY (user_id, attribute_name),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);


In this model, the `user_settings` table has a composite primary key consisting of `user_id` and `attribute_name`. This allows you to store multiple attributes for each user. You can insert rows into this table to store user settings dynamically:

sql
INSERT INTO user_settings (user_id, attribute_name, attribute_value) VALUES
(1, 'view_panel', 'grid'),
(1, 'show_element', 'true'),
(2, 'view_panel', 'list'),
(2, 'show_element', 'false');


This way, you can store different settings for each user without knowing the exact number of parameters in advance. When retrieving user settings, you can query the `user_settings` table based on the `user_id` and attribute names.

While the EAV model provides flexibility, it also has some drawbacks such as potential performance issues with querying and maintaining the data. Consider the trade-offs and whether this model is suitable for your specific use case.