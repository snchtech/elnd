-- Table ALBUM
CREATE TABLE ALBUM (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255),
    depart_id NUMBER,
    unit_id NUMBER,
    description VARCHAR2(255),
    date_create DATE DEFAULT SYSDATE,
    date_update DATE,
    version NUMBER,
    stable NUMBER(1),
    creator_id NUMBER,
    last_editor_id NUMBER
);

----STATUS album

-- Table ALBUM_DOCUMENTS
CREATE TABLE ALBUM_DOCUMENTS (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    album_id NUMBER,
    document_id NUMBER,
    date_confirm DATE,
    document_type VARCHAR2(100),
    is_latest NUMBER(1) DEFAULT 0,
    file_id BLOB,
    CONSTRAINT fk_album_documents_album FOREIGN KEY (album_id) REFERENCES ALBUM(id)
);

-- Table SCHEME
CREATE TABLE SCHEME (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    album_id NUMBER,
    name VARCHAR2(255),
    depart_id NUMBER, -- Уточнити
    unit_id NUMBER, -- Уточнити
    description VARCHAR2(1000),
    date_create DATE DEFAULT SYSDATE,
    date_update DATE,
    stable NUMBER(1),
    format VARCHAR2(50),
    page_number NUMBER,
    system VARCHAR2(255),
    shifr VARCHAR2(255),
    last_editor_id NUMBER, -- Табельний
    --stable_reason VARCHAR2(1000),
    CONSTRAINT fk_scheme_album FOREIGN KEY (album_id) REFERENCES ALBUM(id)
);

-- Table SCHEME_DOCUMENTS (якщо будуть документи окремо до кожної схеми)
CREATE TABLE SCHEME_DOCUMENTS (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scheme_id NUMBER,
    file_name VARCHAR2(255),
    file_id BLOB,
    date_update DATE,
    editor_number NUMBER,
    document_type VARCHAR2(100),
    is_latest NUMBER(1) DEFAULT 0,
    CONSTRAINT fk_scheme_documents_scheme FOREIGN KEY (scheme_id) REFERENCES SCHEME(id)
);

-- Table SCHEME_VERSION
CREATE TABLE SCHEME_VERSION (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scheme_id NUMBER,
    scheme_data CLOB, --(json код схеми)
    date_update DATE DEFAULT SYSDATE,
    stable NUMBER(1),
    editor_id NUMBER,
    version_comment VARCHAR2(1000),
    CONSTRAINT fk_scheme_version_scheme FOREIGN KEY (scheme_id) REFERENCES SCHEME(id)
);

-- Table SCHEME_NOTE
CREATE TABLE SCHEME_NOTE (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    note_text VARCHAR2(1000)
);

-- Table NOTE_SCHEME
CREATE TABLE NOTE_SCHEME (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scheme_id NUMBER,
    note_id NUMBER,
    CONSTRAINT fk_note_scheme_scheme FOREIGN KEY (scheme_id) REFERENCES SCHEME(id),
    CONSTRAINT fk_note_scheme_note FOREIGN KEY (note_id) REFERENCES SCHEME_NOTE(id)
);

-- Table SCHEME_TABLE_INFO
CREATE TABLE SCHEME_TABLE_INFO (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    position NUMBER,
    label VARCHAR2(255),
    name VARCHAR2(255),
    count NUMBER,
    info VARCHAR2(1000)
);

-- Table TABLE_SCHEME
CREATE TABLE TABLE_SCHEME (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_scheme NUMBER,
    id_table_info NUMBER,
    CONSTRAINT fk_table_scheme_scheme FOREIGN KEY (id_scheme) REFERENCES SCHEME(id),
    CONSTRAINT fk_table_scheme_table_info FOREIGN KEY (id_table_info) REFERENCES SCHEME_TABLE_INFO(id)
);

-- Table ELEMENT
CREATE TABLE ELEMENT (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scheme_id NUMBER,
    album_id NUMBER, -- Уточнити
    name VARCHAR2(255),
    status_id NUMBER,
    department_id NUMBER, -- Уточнити
    unit_id NUMBER, -- Уточнити
    date_update DATE DEFAULT SYSDATE,
    group_id NUMBER,
    element_type NUMBER,
    created_at DATE DEFAULT SYSDATE,
    element_blob BLOB, -- Уточнити
    path_to_blob VARCHAR2(1000), -- Уточнити
    show_status NUMBER(1),
    last_editor_id NUMBER,
    x_position NUMBER,
    y_position NUMBER,
    width NUMBER,
    height NUMBER,
    radius NUMBER,
    fill_color VARCHAR2(255),
    rotation_angle NUMBER,
    z_index NUMBER,
    CONSTRAINT fk_element_scheme FOREIGN KEY (scheme_id) REFERENCES SCHEME(id),
    CONSTRAINT fk_element_album FOREIGN KEY (album_id) REFERENCES ALBUM(id)
);

-- Constraints for ELEMENT_STATUS
ALTER TABLE ELEMENT ADD CONSTRAINT fk_element_status FOREIGN KEY (status_id) REFERENCES ELEMENT_STATUS(id);
-- Constraints for ELEMENT_TYPE
ALTER TABLE ELEMENT ADD CONSTRAINT fk_element_type FOREIGN KEY (element_type) REFERENCES ELEMENT_TYPE(id);

-- Table ELEMENT_STATUS
CREATE TABLE ELEMENT_STATUS (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255),
    color_id NUMBER,
    description VARCHAR2(255)
);

-- Table ELEMENT_TYPE
CREATE TABLE ELEMENT_TYPE (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255)
);

-- Table ELEMENT_TEXT
CREATE TABLE ELEMENT_TEXT (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    text_element_id NUMBER,
    element_id NUMBER,
    text_content VARCHAR2(255), 
    font_family VARCHAR2(255),
    font_size NUMBER,
    font_color VARCHAR2(255),
    CONSTRAINT fk_element_text_element FOREIGN KEY (element_id) REFERENCES ELEMENT(id)
);

-- Table UBDN_ELEMENT
CREATE TABLE UBDN_ELEMENT (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    elem_id NUMBER,
    ubdn_id NUMBER,
    CONSTRAINT fk_ubdn_element_elem FOREIGN KEY (elem_id) REFERENCES ELEMENT(id)
);


-----------------Тема окремого обговорення------------------

-- Table UBDN_STATUS_LOG
CREATE TABLE UBDN_STATUS_LOG (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ubdn_id NUMBER,
    status VARCHAR2(255),
    date_update DATE DEFAULT SYSDATE,
    system_id NUMBER,
    source_id NUMBER,
    CONSTRAINT fk_ubdn_status_system FOREIGN KEY (system_id) REFERENCES SYSTEMS(id)
);

-- Table SYSTEMS
CREATE TABLE SYSTEMS (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255),
    description VARCHAR2(1000),
    type VARCHAR2(255),
    status NUMBER(1)
);

-- Table SYSTEM_SOURCE
CREATE TABLE SYSTEM_SOURCE (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    system_id NUMBER,
    source VARCHAR2(255),
    CONSTRAINT fk_system_source_system FOREIGN KEY (system_id) REFERENCES SYSTEMS(id)
);

-- Table PLACE_ELEMENT (Якщо використовувати прив'язку до приміщень)
CREATE TABLE PLACE_ELEMENT (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    elem_id NUMBER,
    place_id NUMBER,
    placement_description VARCHAR2(1000),
    CONSTRAINT fk_place_element_elem FOREIGN KEY (elem_id) REFERENCES ELEMENT(id)
);

-- Table GROUP_ELEMENT
CREATE TABLE GROUP_ELEMENT (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255),
    type_id NUMBER,
    CONSTRAINT fk_group_element_type FOREIGN KEY (type_id) REFERENCES GROUP_TYPE(id)
);

-- Table GROUP_TYPE
CREATE TABLE GROUP_TYPE (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255),
    description VARCHAR2(1000)
);

-- Table ELEMENT_OPTION
CREATE TABLE ELEMENT_OPTION (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    element_id NUMBER,
    option_id NUMBER,
    option_value VARCHAR2(255),
    CONSTRAINT fk_element_option_element FOREIGN KEY (element_id) REFERENCES ELEMENT(id),
    CONSTRAINT fk_element_option_library FOREIGN KEY (option_id) REFERENCES ELEMENT_OPTION_LIBRARY(id)
);

CREATE TABLE ELEMENT_OPTION_LIBRARY (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255),
    description VARCHAR2(255),
    unit_mesurement VARCHAR2(255)
);

-- Table ELEMENT_MARK
CREATE TABLE ELEMENT_MARK (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    element_id NUMBER,
    mark_id NUMBER,
    mark_position_x NUMBER,
    mark_position_y NUMBER,
    CONSTRAINT fk_element_mark_element FOREIGN KEY (element_id) REFERENCES ELEMENT(id),
    CONSTRAINT fk_element_mark_mark FOREIGN KEY (mark_id) REFERENCES MARK(id)
);

-- Table MARK
CREATE TABLE MARK (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255),
    type VARCHAR2(255),
    mark_blob BLOB
);

-- Table ZVT
CREATE TABLE ZVT (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    param_type_id NUMBER,
    location_id NUMBER,
    indicator_id NUMBER,
    ios_status NUMBER(1),
    CONSTRAINT fk_zvt_param_type FOREIGN KEY (param_type_id) REFERENCES ZVT_PARAMETR(id),
    CONSTRAINT fk_zvt_location FOREIGN KEY (location_id) REFERENCES ZVT_LOCATION(id),
    CONSTRAINT fk_zvt_indicator FOREIGN KEY (indicator_id) REFERENCES ZVT_INDICATOR(id)
);

-- Table ZVT_PARAMETR
CREATE TABLE ZVT_PARAMETR (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    type VARCHAR2(255),
    name VARCHAR2(255),
    mark VARCHAR2(255),
    icon_file BLOB -- Можливо буде clob
);

-- Table ZVT_LOCATION
CREATE TABLE ZVT_LOCATION (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mark VARCHAR2(255),
    info VARCHAR2(1000),
    place_id NUMBER
);

-- Table ZVT_INDICATOR
CREATE TABLE ZVT_INDICATOR (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mark VARCHAR2(255),
    info VARCHAR2(1000)
);

-- Table ZVT_IOS
CREATE TABLE ZVT_IOS (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    zvt_id NUMBER,
    ios_signal_id NUMBER,
    CONSTRAINT fk_zvt_ios_zvt FOREIGN KEY (zvt_id) REFERENCES ZVT(id),
    CONSTRAINT fk_zvt_ios_signal FOREIGN KEY (ios_signal_id) REFERENCES IOS_SIGNAL(id)
);

-- Table IOS_SIGNAL_TYPE
CREATE TABLE IOS_SIGNAL_TYPE (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mark VARCHAR2(255),
    info VARCHAR2(1000)
);

-- Table IOS_SIGNAL
CREATE TABLE IOS_SIGNAL (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255),
    description VARCHAR2(1000),
    ios_signal_type_id NUMBER,
    CONSTRAINT fk_ios_signal_type FOREIGN KEY (ios_signal_type_id) REFERENCES IOS_SIGNAL_TYPE(id)
);

----------Прив'язка до IOS?

-- Table ZVT_UBDN
CREATE TABLE ZVT_UBDN (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    zvt_id NUMBER,
    ubdn_id NUMBER,
    place_id NUMBER, -- Уточнити
    CONSTRAINT fk_zvt_ubdn_zvt FOREIGN KEY (zvt_id) REFERENCES ZVT(id),
    CONSTRAINT fk_zvt_ubdn_ubdn FOREIGN KEY (ubdn_id) REFERENCES UBDN_ELEMENT(id)
);

-- Table ZVT_KV
CREATE TABLE ZVT_KV (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    zvt_id NUMBER,
    element_id NUMBER,
    CONSTRAINT fk_zvt_kv_zvt FOREIGN KEY (zvt_id) REFERENCES ZVT(id),
    CONSTRAINT fk_zvt_kv_element FOREIGN KEY (element_id) REFERENCES ELEMENT(id)
);

-- Table REFERENCE_TYPE
CREATE TABLE REFERENCE_TYPE (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    type VARCHAR2(255)
);

-- Table REF_ELEMENT (можливо робити на основі єдиної таблиці елементів)
CREATE TABLE REF_ELEMENT (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    reference_type NUMBER,
    element_id NUMBER,
    name VARCHAR2(255),
    point_from NUMBER,
    point_to NUMBER,
    coordinate_x NUMBER,
    coordinate_y NUMBER,
    image_src VARCHAR2(255),
    file_blob BLOB,
    date_update DATE DEFAULT SYSDATE,
    scheme_id NUMBER,
    album_id NUMBER,
    color_id NUMBER,
    CONSTRAINT fk_ref_element_reference_type FOREIGN KEY (reference_type) REFERENCES REFERENCE_TYPE(id),
    CONSTRAINT fk_ref_element_element FOREIGN KEY (element_id) REFERENCES ELEMENT(id),
    CONSTRAINT fk_ref_element_scheme FOREIGN KEY (scheme_id) REFERENCES SCHEME(id),
    CONSTRAINT fk_ref_element_album FOREIGN KEY (album_id) REFERENCES ALBUM(id),
    CONSTRAINT fk_ref_element_color FOREIGN KEY (color_id) REFERENCES SCHEME_COLORS(id)
);

-- Table SWITCHING_FORM
CREATE TABLE SWITCHING_FORM (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date_create DATE DEFAULT SYSDATE
);

-- Table SWITCHING_ELEMENTS
CREATE TABLE SWITCHING_ELEMENTS (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    switching_id NUMBER,
    element_id NUMBER,
    status NUMBER(1),
    color_id NUMBER,
    CONSTRAINT fk_switching_elements_switching FOREIGN KEY (switching_id) REFERENCES SWITCHING_FORM(id),
    CONSTRAINT fk_switching_elements_element FOREIGN KEY (element_id) REFERENCES ELEMENT(id),
    CONSTRAINT fk_switching_elements_color FOREIGN KEY (color_id) REFERENCES SCHEME_COLORS(id)
);

-- Table WORK_ORDER
CREATE TABLE WORK_ORDER (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date_create DATE DEFAULT SYSDATE,
    status NUMBER(1),
    work_order_type_id NUMBER,
    work_order_actions_id NUMBER,
    CONSTRAINT fk_work_order_type FOREIGN KEY (work_order_type_id) REFERENCES WORK_ORDER_TYPE(id),
    CONSTRAINT fk_work_order_actions FOREIGN KEY (work_order_actions_id) REFERENCES WORK_ORDER_ACTIONS(id)
);

-- Table WORK_ORDER_TYPE
CREATE TABLE WORK_ORDER_TYPE (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    type VARCHAR2(255),
    color_id NUMBER,
    CONSTRAINT fk_work_order_type_color FOREIGN KEY (color_id) REFERENCES SCHEME_COLORS(id)
);

-- Table WORK_ORDER_ACTIONS
CREATE TABLE WORK_ORDER_ACTIONS (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(255),
    description VARCHAR2(1000),
    element_color NUMBER,
    text_element_color NUMBER,
    CONSTRAINT fk_work_order_actions_element_color FOREIGN KEY (element_color) REFERENCES SCHEME_COLORS(id),
    CONSTRAINT fk_work_order_actions_text_color FOREIGN KEY (text_element_color) REFERENCES SCHEME_COLORS(id)
);

-- Table SCHEME_COLORS
CREATE TABLE SCHEME_COLORS (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    color_code VARCHAR2(255),
    color_text VARCHAR2(255)
);