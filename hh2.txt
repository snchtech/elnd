First, install the `express-session` and `session-file-store` modules:

bash
npm install express-session session-file-store


In your Node.js code, configure the session middleware for your site and API:

javascript
const express = require('express');
const session = require('express-session');
const FileStore = require('session-file-store')(session);

const app = express();

// Configure session middleware for site
app.use(session({
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: true,
  store: new FileStore({
    path: './sessions/site', // Specify the path to store session files for the site
  }),
}));

// Configure session middleware for API
app.use('/api', session({
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: true,
  store: new FileStore({
    path: './sessions/api', // Specify the path to store session files for the API
  }),
}));

// Define routes for your site and API
// ...

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});


In your route handlers, you can access and manipulate session data using `req.session`. Here's an example of a route handler that retrieves a user's name from the session:

javascript
app.get('/api/user', (req, res) => {
  const userName = req.session.userName; // Access session data

  if (userName) {
    res.json({ userName });
  } else {
    res.status(401).json({ error: 'User not authenticated' });
  }
});


In this example, the session data for the site and API will be stored in separate directories (`./sessions/site` and `./sessions/api`). You can adjust the paths as per your requirements.

Remember to handle session creation, authentication, and session data updates appropriately in your site and API routes.

Note: This is a simplified example, and you may need to customize it further based on your specific application requirements and security considerations.