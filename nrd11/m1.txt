–¢–∞–∫, —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ **–≤–∏–≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –∑ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è–º –ø–æ `department` —ñ –≤–∫–ª–∞–¥–µ–Ω–∏–º–∏ —Ä—è–¥–∫–∞–º–∏ –ø–æ `performer_department_id`** –≤ Oracle APEX —Ü—ñ–ª–∫–æ–º **–º–æ–∂–ª–∏–≤–æ**, —ñ –æ—Å—å —è–∫ —Ü–µ –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–æ–µ—Ç–∞–ø–Ω–æ:

---

### ‚úÖ **–¶—ñ–ª—å**

–û—Ç—Ä–∏–º–∞—Ç–∏:

```
department: –í—ñ–¥–¥—ñ–ª 1
  ‚Ü≥ performer_department_id: –í—ñ–¥–¥—ñ–ª 3 ‚Äî –ø—ñ–¥–ø–æ—Ä—è–¥–∫–æ–≤–∞–Ω—ñ –∑–∞–ø–∏—Å–∏
department: –í—ñ–¥–¥—ñ–ª 2
  ‚Ü≥ performer_department_id: –í—ñ–¥–¥—ñ–ª 4
```

---

## üîß –ö–†–û–ö 1: –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è `base_data` –≤ `view`

–î–æ–¥–∞–π –¥–æ `base_data` –Ω–∞—Å—Ç—É–ø–Ω—ñ `LEFT JOIN`:

```sql
-- JOIN –∑ USERS
LEFT JOIN USERS u ON u.id = t.performer_id
-- JOIN –∑ DEPARTMENTS
LEFT JOIN DEPARTMENTS d ON d.id = u.performer_department_id
```

–ü—ñ—Å–ª—è —á–æ–≥–æ –¥–æ–¥–∞—î—à –¥–æ `SELECT`:

```sql
u.performer_department_id,
d.depart_short_name AS performer_department_name
```

–û—Ç–∂–µ, `base_data` –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ —Ç–∞–∫:

```sql
WITH base_data AS (
  SELECT 
    t.id_outfit,
    t.org,
    t.org_txt,
    t.department,
    t.unit,
    t.team_count,
    t.data_start,
    t.status_start_date,
    t.status_end_date,
    t.performer_id,
    u.performer_department_id,
    d.depart_short_name AS performer_department_name
  FROM TEST_OUTFIT_DATA t
  LEFT JOIN USERS u ON t.performer_id = u.id
  LEFT JOIN DEPARTMENTS d ON u.performer_department_id = d.id
  WHERE t.outfit_open = 6
)
```

---

## üîß –ö–†–û–ö 2: –ü–æ–±—É–¥–æ–≤–∞ –∞–≥—Ä–µ–≥–∞—Ü—ñ—ó (agg\_data)

–ü–æ—Ç—Ä—ñ–±–Ω–æ –æ–±‚Äô—î–¥–Ω–∞—Ç–∏ `department` (–æ—Å–Ω–æ–≤–Ω—ñ –∑–∞–ø–∏—Å–∏) —ñ `performer_department_id` (–≤–∏–∫–æ–Ω–∞–≤—á—ñ):

```sql
agg_data AS (
  SELECT
    'MAIN' AS record_type,
    CASE WHEN org = 0 THEN department ELSE org_txt END AS group_name,
    org,
    department,
    NULL AS performer_department_id,
    unit,
    data_start,
    status_start_date,
    status_end_date,
    COUNT(DISTINCT id_outfit) AS brigades,
    SUM(team_count) AS people
  FROM base_data
  GROUP BY
    CASE WHEN org = 0 THEN department ELSE org_txt END,
    org,
    department,
    unit,
    data_start,
    status_start_date,
    status_end_date

  UNION ALL

  SELECT
    'SUB' AS record_type,
    CASE WHEN org = 0 THEN performer_department_name ELSE org_txt END AS group_name,
    org,
    department,
    performer_department_id,
    unit,
    data_start,
    status_start_date,
    status_end_date,
    COUNT(DISTINCT id_outfit) AS brigades,
    SUM(team_count) AS people
  FROM base_data
  WHERE performer_department_id IS NOT NULL
  GROUP BY
    CASE WHEN org = 0 THEN performer_department_name ELSE org_txt END,
    org,
    department,
    performer_department_id,
    unit,
    data_start,
    status_start_date,
    status_end_date
)
```

---

## üîß –ö–†–û–ö 3: –í–∏–≤—ñ–¥ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ SELECT

–¢–µ–ø–µ—Ä –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞—î–º–æ `record_type` —É —Ñ—ñ–Ω–∞–ª—å–Ω—É –≤–∏–±—ñ—Ä–∫—É:

```sql
SELECT
  record_type,
  group_name,
  org,
  department,
  performer_department_id,
  data_start,
  status_start_date,
  status_end_date,
  NVL(SUM(CASE WHEN unit = 0 THEN people END), 0) AS u1_people,
  NVL(SUM(CASE WHEN unit = 0 THEN brigades END), 0) AS u1_brigades,
  NVL(SUM(CASE WHEN unit = 1 THEN people END), 0) AS u2_people,
  NVL(SUM(CASE WHEN unit = 1 THEN brigades END), 0) AS u2_brigades,
  NVL(SUM(CASE WHEN unit = 2 THEN people END), 0) AS u3_people,
  NVL(SUM(CASE WHEN unit = 2 THEN brigades END), 0) AS u3_brigades,
  SUM(people) AS total_people,
  SUM(brigades) AS total_brigades
FROM agg_data
GROUP BY
  record_type,
  group_name,
  org,
  department,
  performer_department_id,
  data_start,
  status_start_date,
  status_end_date
ORDER BY
  department, record_type, group_name
```

---

## ‚úÖ APEX —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è

1. **–ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü—ñ—î—ó view —Å—Ç–≤–æ—Ä—é—î—à IR.**
2. **–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `record_type` –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:**

   * `MAIN` ‚Äî –∂–∏—Ä–Ω–∏–π –∞–±–æ –±—ñ–ª—å—à–∏–π —à—Ä–∏—Ñ—Ç (–æ—Å–Ω–æ–≤–Ω–∏–π –∑–∞–ø–∏—Å).
   * `SUB` ‚Äî –∑–≤–∏—á–∞–π–Ω–∏–π –∞–±–æ –∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º (—á–µ—Ä–µ–∑ CSS –∫–ª–∞—Å).

–ù–∞–ø—Ä–∏–∫–ª–∞–¥:

```css
.sub-record td {
  padding-left: 30px;
  color: #666;
  font-style: italic;
}
```

–Ü —á–µ—Ä–µ–∑ HTML Expression:

```sql
CASE WHEN record_type = 'SUB' THEN 'sub-record' END AS css_class
```

---

## ‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏

* –ú–æ–∂–Ω–∞ —Ä–æ–∑–±–∏—Ç–∏ –Ω–∞ 2 –æ–∫—Ä–µ–º—ñ –∑–≤—ñ—Ç–∏: –æ—Å–Ω–æ–≤–Ω—ñ —Ç–∞ –¥–æ—á—ñ—Ä–Ω—ñ.
* –ê–±–æ –∑—Ä–æ–±–∏—Ç–∏ **master-detail –∑–≤—ñ—Ç**: –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ `department`, –≤–Ω–∏–∑—É –∑‚Äô—è–≤–ª—è—î—Ç—å—Å—è –¥–µ—Ç–∞–ª—å –ø–æ `performer_department_id`.

---

–•–æ—á–µ—à ‚Äî –º–æ–∂—É –ø–æ–≤–Ω—ñ—Å—Ç—é —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ `CREATE VIEW v_outfit_pivot_base` –∑ —Ü–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏.
