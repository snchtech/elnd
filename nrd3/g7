Окей! Ось **оптимізований варіант твого SQL** — без дублювання обчислень `pivoted`, із єдиним доступом до нього, та з чистим і ефективним підходом:

---

```sql
WITH base_data AS (
  SELECT 
    id_outfit,
    org,
    org_txt,
    department,
    unit,
    team_count,
    data_start
  FROM your_view
  WHERE outfit_open = 6
    AND (
      (:P_MODAL_TIMEMODE = 'NOW' AND data_start <= SYSDATE)
      OR (:P_MODAL_TIMEMODE = 'DAY' AND data_start BETWEEN TRUNC(SYSDATE) AND SYSDATE)
      OR (:P_MODAL_TIMEMODE = 'SHIFT' AND data_start BETWEEN :P_SHIFT_START AND SYSDATE)
    )
    AND (:P_MODAL_ORG IS NULL OR org = TO_NUMBER(:P_MODAL_ORG))
    AND (:P_MODAL_UNIT IS NULL OR unit = TO_NUMBER(:P_MODAL_UNIT))
    AND (
      :P_MODAL_DEPARTMENTS IS NULL 
      OR department IN (
        SELECT column_value FROM TABLE(split_string(:P_MODAL_DEPARTMENTS, ':'))
      )
    )
),
agg_data AS (
  SELECT
    CASE WHEN org = 0 THEN department ELSE org_txt END AS group_name,
    org,
    unit,
    COUNT(id_outfit) AS brigades,
    SUM(team_count) AS people
  FROM base_data
  GROUP BY
    CASE WHEN org = 0 THEN department ELSE org_txt END,
    org,
    unit
),
pivoted AS (
  SELECT
    group_name,
    org,
    NVL(SUM(CASE WHEN unit = 0 THEN people END), 0) AS u1_people,
    NVL(SUM(CASE WHEN unit = 0 THEN brigades END), 0) AS u1_brigades,
    NVL(SUM(CASE WHEN unit = 1 THEN people END), 0) AS u2_people,
    NVL(SUM(CASE WHEN unit = 1 THEN brigades END), 0) AS u2_brigades,
    NVL(SUM(CASE WHEN unit = 2 THEN people END), 0) AS u3_people,
    NVL(SUM(CASE WHEN unit = 2 THEN brigades END), 0) AS u3_brigades,
    SUM(people) AS total_people,
    SUM(brigades) AS total_brigades
  FROM agg_data
  GROUP BY group_name, org
)
-- Основний SELECT — об'єднує pivoted + "Усього", використовуючи pivoted тільки один раз
SELECT * FROM (
  SELECT * FROM pivoted
  UNION ALL
  SELECT 
    'Усього' AS group_name,
    NULL AS org,
    SUM(u1_people),
    SUM(u1_brigades),
    SUM(u2_people),
    SUM(u2_brigades),
    SUM(u3_people),
    SUM(u3_brigades),
    SUM(total_people),
    SUM(total_brigades)
  FROM pivoted
)
ORDER BY
  CASE 
    WHEN group_name = 'Усього' THEN 9999
    WHEN org = 0 THEN 1  -- фірми
    WHEN org = 1 THEN 2  -- підрядники
    ELSE 3               -- fallback
  END,
  group_name;
```

---

### Що змінилось:

- `final_union` як CTE прибрано — його роль виконує `SELECT * FROM (...)`.
- Ми **використовуємо `pivoted` лише один раз**, і виводимо агреговані підсумки окремим рядком у `UNION ALL`.
- Oracle тепер **не буде виконувати `pivoted` двічі**, що значно покращить швидкодію на великих даних.

Якщо ти хочеш додатково кешувати `pivoted` у тимчасову таблицю — теж можу показати. Але цей варіант має працювати ефективно в більшості випадків.