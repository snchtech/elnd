–û—Å—å –ø–æ–∫—Ä–æ–∫–æ–≤–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è **Next.js** –¥–æ–¥–∞—Ç–∫—É –∑ **Konva.js** —Ç–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–æ–º.

---

### **1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É**

#### **1.1. –°—Ç–≤–æ—Ä—ñ—Ç—å Next.js –ø—Ä–æ–µ–∫—Ç**
```bash
npx create-next-app@latest konva-next-app
cd konva-next-app
```

#### **1.2. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ**
```bash
npm install react-konva konva express
```

---

### **2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Next.js**

#### **2.1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫**

–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É `pages/index.js`:
```javascript
import React, { useRef, useState } from 'react';
import { Stage, Layer, Rect, Circle } from 'react-konva';

const Home = () => {
  const stageRef = useRef();
  const [shapes, setShapes] = useState([
    { id: 1, type: 'rect', x: 50, y: 50, width: 100, height: 100, fill: 'blue' },
    { id: 2, type: 'circle', x: 200, y: 200, radius: 50, fill: 'red' },
  ]);

  const handleDragEnd = (id, e) => {
    const updatedShapes = shapes.map((shape) =>
      shape.id === id ? { ...shape, x: e.target.x(), y: e.target.y() } : shape
    );
    setShapes(updatedShapes);
  };

  return (
    <div>
      <h1 style={{ textAlign: 'center' }}>Next.js + Konva.js</h1>
      <Stage
        ref={stageRef}
        width={window.innerWidth}
        height={window.innerHeight - 50}
        style={{ background: '#f4f4f4' }}
      >
        <Layer>
          {shapes.map((shape) =>
            shape.type === 'rect' ? (
              <Rect
                key={shape.id}
                x={shape.x}
                y={shape.y}
                width={shape.width}
                height={shape.height}
                fill={shape.fill}
                draggable
                onDragEnd={(e) => handleDragEnd(shape.id, e)}
              />
            ) : (
              <Circle
                key={shape.id}
                x={shape.x}
                y={shape.y}
                radius={shape.radius}
                fill={shape.fill}
                draggable
                onDragEnd={(e) => handleDragEnd(shape.id, e)}
              />
            )
          )}
        </Layer>
      </Stage>
    </div>
  );
};

export default Home;
```

#### **2.2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å Next.js**
```bash
npm run dev
```
–í—ñ–¥–∫—Ä–∏–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –Ω–∞ `http://localhost:3000` ‚Äî –≤–∏ –ø–æ–±–∞—á–∏—Ç–µ —Å—Ü–µ–Ω—É Konva.js —ñ–∑ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–æ–º —ñ –∫–æ–ª–æ–º, —è–∫—ñ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞—Ç–∏.

---

### **3. –î–æ–¥–∞–≤–∞–Ω–Ω—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –∑ Express**

#### **3.1. –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä —É —Ñ–∞–π–ª—ñ `server.js`**
```javascript
const express = require('express');
const next = require('next');

const app = next({ dev: process.env.NODE_ENV !== 'production' });
const handle = app.getRequestHandler();

const PORT = 4000;

app.prepare().then(() => {
  const server = express();

  server.use(express.json());

  // –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è –¥–∞–Ω–∏—Ö
  let shapes = [
    { id: 1, type: 'rect', x: 50, y: 50, width: 100, height: 100, fill: 'blue' },
    { id: 2, type: 'circle', x: 200, y: 200, radius: 50, fill: 'red' },
  ];

  // API: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–≥—É—Ä
  server.get('/api/shapes', (req, res) => {
    res.json(shapes);
  });

  // API: –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ñ—ñ–≥—É—Ä
  server.post('/api/shapes', (req, res) => {
    const { id, type, x, y, width, height, radius, fill } = req.body;
    shapes.push({ id, type, x, y, width, height, radius, fill });
    res.status(201).json({ message: 'Shape added successfully!' });
  });

  // –Ü–Ω—à—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è Next.js
  server.all('*', (req, res) => {
    return handle(req, res);
  });

  server.listen(PORT, (err) => {
    if (err) throw err;
    console.log(`Server is running on http://localhost:${PORT}`);
  });
});
```

#### **3.2. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞**
–î–æ–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç —É `package.json` –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:
```json
"scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "server": "node server.js"
}
```

–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä:
```bash
npm run server
```

---

### **4. –ó–≤‚Äô—è–∑–æ–∫ –º—ñ–∂ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º —ñ —Å–µ—Ä–≤–µ—Ä–æ–º**

#### **4.1. API-–∑–∞–ø–∏—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö**

–û–Ω–æ–≤—ñ—Ç—å `pages/index.js`:
```javascript
import React, { useEffect, useRef, useState } from 'react';
import { Stage, Layer, Rect, Circle } from 'react-konva';

const Home = () => {
  const stageRef = useRef();
  const [shapes, setShapes] = useState([]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–≥—É—Ä —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    const fetchShapes = async () => {
      const response = await fetch('/api/shapes');
      const data = await response.json();
      setShapes(data);
    };

    fetchShapes();
  }, []);

  const handleDragEnd = async (id, e) => {
    const updatedShapes = shapes.map((shape) =>
      shape.id === id ? { ...shape, x: e.target.x(), y: e.target.y() } : shape
    );
    setShapes(updatedShapes);

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
    await fetch('/api/shapes', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        id,
        type: updatedShapes.find((shape) => shape.id === id).type,
        x: e.target.x(),
        y: e.target.y(),
        width: updatedShapes.find((shape) => shape.id === id).width || null,
        height: updatedShapes.find((shape) => shape.id === id).height || null,
        radius: updatedShapes.find((shape) => shape.id === id).radius || null,
        fill: updatedShapes.find((shape) => shape.id === id).fill,
      }),
    });
  };

  return (
    <div>
      <h1 style={{ textAlign: 'center' }}>Next.js + Konva.js + Server</h1>
      <Stage
        ref={stageRef}
        width={window.innerWidth}
        height={window.innerHeight - 50}
        style={{ background: '#f4f4f4' }}
      >
        <Layer>
          {shapes.map((shape) =>
            shape.type === 'rect' ? (
              <Rect
                key={shape.id}
                x={shape.x}
                y={shape.y}
                width={shape.width}
                height={shape.height}
                fill={shape.fill}
                draggable
                onDragEnd={(e) => handleDragEnd(shape.id, e)}
              />
            ) : (
              <Circle
                key={shape.id}
                x={shape.x}
                y={shape.y}
                radius={shape.radius}
                fill={shape.fill}
                draggable
                onDragEnd={(e) => handleDragEnd(shape.id, e)}
              />
            )
          )}
        </Layer>
      </Stage>
    </div>
  );
};

export default Home;
```

---

### **5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏**

1. **–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä:**
   ```bash
   npm run server
   ```

2. **–í—ñ–¥–∫—Ä–∏–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ:**
   - –§—Ä–æ–Ω—Ç–µ–Ω–¥: `http://localhost:4000`
   - API: `http://localhost:4000/api/shapes`

---

### **–†–µ–∑—É–ª—å—Ç–∞—Ç**
- –í–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ Next.js –¥–æ–¥–∞—Ç–æ–∫ —ñ–∑ Konva.js.
- –°—Ü–µ–Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è —ñ–∑ —Å–µ—Ä–≤–µ—Ä–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
- –î–∞–Ω—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –ø—Ä–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.

---

### **–©–æ –¥–∞–ª—ñ?**
1. –î–æ–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—ó –µ–∫—Å–ø–æ—Ä—Ç—É —Ç–∞ —ñ–º–ø–æ—Ä—Ç—É —Å—Ö–µ–º.
2. –†–µ–∞–ª—ñ–∑—É–π—Ç–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, OracleDB –∞–±–æ MongoDB).
3. –î–æ–¥–∞–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—É –ø–∞–Ω–µ–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∞–±–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç–∏! üòä