Yes, using a button to save and load the stage is a good approach for managing the `Stage` in `react-konva`. The following code ensures that **all elements on the stage, including layers and shapes**, will be saved and restored properly using the `Stage`'s `toJSON` and `Konva.Node.create` methods.

Here's how you can structure your component:

---

### Complete Example Code

```javascript
import React, { useEffect, useRef, useState } from 'react';
import { Stage, Layer, Rect, Circle } from 'react-konva';

const Home = () => {
  const stageRef = useRef();
  const [shapes, setShapes] = useState([]);

  // Load shapes when the component mounts
  useEffect(() => {
    const fetchShapes = async () => {
      const response = await fetch('/api/shapes');
      const data = await response.json();

      if (data.stageData) {
        // Recreate the stage with Konva's method
        const stage = Konva.Node.create(data.stageData, stageRef.current.container());
        stageRef.current = stage;
      } else {
        setShapes(data); // Use if your API returns shapes instead of full stage
      }
    };

    fetchShapes();
  }, []);

  // Save the stage to the server
  const saveStageToServer = async () => {
    if (!stageRef.current) return;

    // Serialize the stage into JSON
    const stageJSON = stageRef.current.toJSON();

    // Send JSON to the server
    await fetch('/api/shapes', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ stageData: stageJSON }),
    });

    alert('Stage saved successfully!');
  };

  return (
    <div>
      <h1 style={{ textAlign: 'center' }}>Next.js + Konva.js + Save/Load Stage</h1>
      <div style={{ marginBottom: '10px', textAlign: 'center' }}>
        <button onClick={saveStageToServer}>Save Stage</button>
      </div>
      <Stage
        ref={stageRef}
        width={window.innerWidth}
        height={window.innerHeight - 100}
        style={{ background: '#f4f4f4' }}
      >
        <Layer>
          {shapes.map((shape) =>
            shape.type === 'rect' ? (
              <Rect
                key={shape.id}
                x={shape.x}
                y={shape.y}
                width={shape.width}
                height={shape.height}
                fill={shape.fill}
                draggable
              />
            ) : (
              <Circle
                key={shape.id}
                x={shape.x}
                y={shape.y}
                radius={shape.radius}
                fill={shape.fill}
                draggable
              />
            )
          )}
        </Layer>
      </Stage>
    </div>
  );
};

export default Home;
```

---

### Explanation of Code
1. **`saveStageToServer` Function:**
   - Converts the `Stage` (including all child `Layer` and `Shape` elements) into JSON using `toJSON`.
   - Sends the JSON to your server's `/api/shapes` endpoint via a POST request.

2. **`useEffect` for Loading Stage:**
   - Fetches the saved stage data from the server on component mount.
   - Uses `Konva.Node.create` to recreate the `Stage` with all its children from the serialized JSON.

3. **`ref` for `Stage`:**
   - `stageRef` ensures we can directly interact with the `Stage` instance for saving and restoring.

4. **API Integration:**
   - `/api/shapes` is used to save and load the serialized stage JSON. 
   - You must implement this endpoint on your server to handle the requests.

---

### Backend Example Code (Node.js)
#### Saving and Loading Serialized Stage

```javascript
let savedStageJSON = null; // Use a database in production

// API: Get saved stage data
server.get('/api/shapes', (req, res) => {
  res.json({ stageData: savedStageJSON });
});

// API: Save stage data
server.post('/api/shapes', (req, res) => {
  const { stageData } = req.body;
  savedStageJSON = stageData; // Save the JSON to memory (or database)
  res.status(201).json({ message: 'Stage saved successfully!' });
});
```

---

### Benefits of This Approach
1. **Save All Elements:**
   - `Stage.toJSON` serializes all child elements (layers, shapes, properties).
   - No need to handle individual shapes manually.

2. **Easily Extendable:**
   - You can add new shape types or properties without modifying the saving/loading logic.

3. **Minimizes State Management:**
   - Instead of managing shape states individually, you serialize and restore the entire canvas.

4. **Reusable Components:**
   - This approach works well for dynamic projects with complex shapes and interactions.

---

### Limitations & Suggestions
1. **Performance:**
   - For large canvases with many shapes, saving/loading JSON may take time. Optimize server-side storage if necessary.

2. **Shape Customization:**
   - If you have custom shapes or attributes, ensure these are correctly serialized and restored.

3. **Error Handling:**
   - Add error handling to handle API failures (e.g., failed fetch, invalid JSON).

---

This code will work efficiently for saving and restoring the entire stage in `react-konva`. Let me know if you encounter any issues or need further clarification!