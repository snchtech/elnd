–û—Å—å —è–∫ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –∑ –ø–∞–Ω–µ–ª–ª—é —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É **Next.js** –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º **Konva.js**.

---

### **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É**
- –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: –º—ñ—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (–ª—ñ–Ω—ñ—è, —Ç–µ–∫—Å—Ç, –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫, –∫–æ–ª–æ, —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫).
- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è: –º—ñ—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É Konva.js, –¥–µ –º–æ–∂–Ω–∞ –º–∞–ª—é–≤–∞—Ç–∏, –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞—Ç–∏ —Ç–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.

---

### **1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –ø–∞–Ω–µ–ª–ª—é —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º**

#### **–§–∞–π–ª `pages/index.js`**
```javascript
import React, { useRef, useState } from 'react';
import { Stage, Layer, Rect, Circle, Text, Line } from 'react-konva';
import ToolPanel from '../components/ToolPanel';

const Home = () => {
  const stageRef = useRef();
  const [elements, setElements] = useState([]);

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
  const addElement = (type) => {
    const newElement = {
      id: elements.length + 1,
      type,
      x: 100,
      y: 100,
      width: 100,
      height: 100,
      radius: 50,
      text: '–¢–µ–∫—Å—Ç',
      points: [0, 0, 100, 100],
      fill: 'gray',
      draggable: true,
    };
    setElements([...elements, newElement]);
  };

  // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  const handleDragEnd = (id, e) => {
    const updatedElements = elements.map((el) =>
      el.id === id ? { ...el, x: e.target.x(), y: e.target.y() } : el
    );
    setElements(updatedElements);
  };

  return (
    <div style={{ display: 'flex' }}>
      {/* –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ */}
      <ToolPanel addElement={addElement} />

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è */}
      <div style={{ flex: 1, background: '#f0f0f0' }}>
        <Stage
          ref={stageRef}
          width={window.innerWidth - 200}
          height={window.innerHeight}
          style={{ background: '#fff' }}
        >
          <Layer>
            {elements.map((el) => {
              if (el.type === 'rect') {
                return (
                  <Rect
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    width={el.width}
                    height={el.height}
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'circle') {
                return (
                  <Circle
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    radius={el.radius}
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'text') {
                return (
                  <Text
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    text={el.text}
                    fontSize={20}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'line') {
                return (
                  <Line
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    points={el.points}
                    stroke="black"
                    strokeWidth={2}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'triangle') {
                return (
                  <Line
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    points={[0, 0, 100, 0, 50, 100]}
                    closed
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              }
              return null;
            })}
          </Layer>
        </Stage>
      </div>
    </div>
  );
};

export default Home;
```

---

### **2. –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞–Ω–µ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤**

#### **–§–∞–π–ª `components/ToolPanel.js`**
```javascript
import React from 'react';

const ToolPanel = ({ addElement }) => {
  return (
    <div style={{ width: '200px', padding: '10px', background: '#f4f4f4' }}>
      <h3>–ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤</h3>
      <button onClick={() => addElement('rect')}>–ü—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫</button>
      <button onClick={() => addElement('circle')}>–ö–æ–ª–æ</button>
      <button onClick={() => addElement('line')}>–õ—ñ–Ω—ñ—è</button>
      <button onClick={() => addElement('text')}>–¢–µ–∫—Å—Ç</button>
      <button onClick={() => addElement('triangle')}>–¢—Ä–∏–∫—É—Ç–Ω–∏–∫</button>
    </div>
  );
};

export default ToolPanel;
```

---

### **3. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è**

–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π —É `Stage` –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `draggable` —ñ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤.

---

### **4. –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª: –ó–º—ñ–Ω–∞ —Ä–æ–∑–º—ñ—Ä—ñ–≤**

#### **–î–æ–¥–∞–π—Ç–µ –æ–±—Ä–æ–±–∫—É –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—ñ–≤ –¥–ª—è –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫—ñ–≤**
```javascript
onTransformEnd={(e) => {
  const node = e.target;
  const updatedElements = elements.map((el) =>
    el.id === id
      ? {
          ...el,
          width: node.width() * node.scaleX(),
          height: node.height() * node.scaleY(),
        }
      : el
  );
  setElements(updatedElements);
}}
```

#### **–ó–∞—Å—Ç–æ—Å—É–π—Ç–µ –¥–æ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫—ñ–≤**
```javascript
<Rect
  key={el.id}
  x={el.x}
  y={el.y}
  width={el.width}
  height={el.height}
  fill={el.fill}
  draggable
  onDragEnd={(e) => handleDragEnd(el.id, e)}
  onTransformEnd={(e) => handleResize(el.id, e)}
  ref={(node) => {
    if (node) {
      node.setAttrs({
        draggable: true,
        resizable: true,
      });
    }
  }}
/>
```

---

### **5. –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è**

- –î–æ–¥–∞–π—Ç–µ CSS –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∏–≥–ª—è–¥—É –ø–∞–Ω–µ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —ñ —Å—Ü–µ–Ω–∏.
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `React.memo` –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.

---

### **6. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç**

1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä Next.js:
   ```bash
   npm run dev
   ```
2. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ: `http://localhost:3000`.

---

### **–†–µ–∑—É–ª—å—Ç–∞—Ç**
- –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —ñ–∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —ó—Ö –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è.
- –ë–∞–∑–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—ñ–≤ (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –¥–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤).

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –∞–±–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç–∏! üòä