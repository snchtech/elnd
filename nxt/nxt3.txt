–û—Å—å —è–∫ –¥–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª **–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —É JSON** —É –≤–∞—à –¥–æ–¥–∞—Ç–æ–∫, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ —Å—Ü–µ–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON.

---

### **–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ `pages/index.js`**

```javascript
import React, { useRef, useState } from 'react';
import { Stage, Layer, Rect, Circle, Text, Line } from 'react-konva';
import ToolPanel from '../components/ToolPanel';

const Home = () => {
  const stageRef = useRef();
  const [elements, setElements] = useState([]);

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
  const addElement = (type) => {
    const newElement = {
      id: elements.length + 1,
      type,
      x: 100,
      y: 100,
      width: 100,
      height: 100,
      radius: 50,
      text: '–¢–µ–∫—Å—Ç',
      points: [0, 0, 100, 100],
      fill: 'gray',
      draggable: true,
    };
    setElements([...elements, newElement]);
  };

  // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  const handleDragEnd = (id, e) => {
    const updatedElements = elements.map((el) =>
      el.id === id ? { ...el, x: e.target.x(), y: e.target.y() } : el
    );
    setElements(updatedElements);
  };

  // –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —É JSON
  const saveToJson = () => {
    const json = JSON.stringify(elements, null, 2); // –§–æ—Ä–º–∞—Ç—É—î–º–æ JSON –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ —á–∏—Ç–∞–Ω–Ω—è
    console.log('–°—Ö–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞:', json);

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON —É –≤–∏–≥–ª—è–¥—ñ —Ñ–∞–π–ª—É
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'canvas-state.json'; // –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É
    a.click();
    URL.revokeObjectURL(url); // –û—á–∏—â–µ–Ω–Ω—è URL
  };

  return (
    <div style={{ display: 'flex' }}>
      {/* –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ */}
      <ToolPanel addElement={addElement} />

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è */}
      <div style={{ flex: 1, background: '#f0f0f0' }}>
        <div style={{ margin: '10px' }}>
          <button onClick={saveToJson}>–ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω</button>
        </div>
        <Stage
          ref={stageRef}
          width={window.innerWidth - 200}
          height={window.innerHeight}
          style={{ background: '#fff' }}
        >
          <Layer>
            {elements.map((el) => {
              if (el.type === 'rect') {
                return (
                  <Rect
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    width={el.width}
                    height={el.height}
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'circle') {
                return (
                  <Circle
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    radius={el.radius}
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'text') {
                return (
                  <Text
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    text={el.text}
                    fontSize={20}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'line') {
                return (
                  <Line
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    points={el.points}
                    stroke="black"
                    strokeWidth={2}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'triangle') {
                return (
                  <Line
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    points={[0, 0, 100, 0, 50, 100]}
                    closed
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              }
              return null;
            })}
          </Layer>
        </Stage>
      </div>
    </div>
  );
};

export default Home;
```

---

### **–©–æ —Ä–æ–±–∏—Ç—å –∫–æ–¥?**

1. **–§—É–Ω–∫—Ü—ñ—è `saveToJson`:**
   - –ì–µ–Ω–µ—Ä—É—î JSON –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ü–µ–Ω—ñ.
   - –ö–æ–Ω–≤–µ—Ä—Ç—É—î JSON —É —Ñ–∞–π–ª —ñ –ø—Ä–æ–ø–æ–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –π–æ–≥–æ.

2. **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
   - –§–∞–π–ª `canvas-state.json` –≤–∏–≥–ª—è–¥–∞—Ç–∏–º–µ —Ç–∞–∫:
     ```json
     [
       {
         "id": 1,
         "type": "rect",
         "x": 100,
         "y": 100,
         "width": 100,
         "height": 100,
         "fill": "gray",
         "draggable": true
       },
       {
         "id": 2,
         "type": "circle",
         "x": 200,
         "y": 200,
         "radius": 50,
         "fill": "gray",
         "draggable": true
       }
     ]
     ```

---

### **–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è**

1. **–î–æ–¥–∞—Ç–∏ –Ü–º–ø–æ—Ä—Ç JSON:**
   - –†–µ–∞–ª—ñ–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON-—Ñ–∞–π–ª—É –Ω–∞–∑–∞–¥ —É –ø—Ä–æ–≥—Ä–∞–º—É.

2. **–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è:**
   - –î–æ–¥–∞–π—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å—Ç–∞–Ω —É `localStorage` –∞–±–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.

3. **–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏:**
   - –î–æ–¥–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏.

---

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —ñ–º–ø–æ—Ä—Ç—É JSON —á–∏ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç–∏! üòä