–û—Å—å —Ñ—É–Ω–∫—Ü—ñ—è **–µ–∫—Å–ø–æ—Ä—Ç—É JSON —É —Ñ–∞–π–ª** –¥–ª—è –≤–∞—à–æ–≥–æ Next.js –ø—Ä–æ—î–∫—Ç—É. –í–æ–Ω–∞ –¥–æ–∑–≤–æ–ª–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞–Ω —Å—Ü–µ–Ω–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON —è–∫ —Ñ–∞–π–ª.

---

### **–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ –∑ –µ–∫—Å–ø–æ—Ä—Ç–æ–º JSON —É —Ñ–∞–π–ª**

–û–Ω–æ–≤–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —É `pages/index.js`, –¥–æ–¥–∞–≤—à–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É JSON.

#### **–ö–æ–¥:**

```javascript
import React, { useRef, useState } from 'react';
import { Stage, Layer, Rect, Circle, Text, Line } from 'react-konva';
import ToolPanel from '../components/ToolPanel';

const Home = () => {
  const stageRef = useRef();
  const [elements, setElements] = useState([]);

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
  const addElement = (type) => {
    const newElement = {
      id: elements.length + 1,
      type,
      x: 100,
      y: 100,
      width: 100,
      height: 100,
      radius: 50,
      text: '–¢–µ–∫—Å—Ç',
      points: [0, 0, 100, 100],
      fill: 'gray',
      draggable: true,
    };
    setElements([...elements, newElement]);
  };

  // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  const handleDragEnd = (id, e) => {
    const updatedElements = elements.map((el) =>
      el.id === id ? { ...el, x: e.target.x(), y: e.target.y() } : el
    );
    setElements(updatedElements);
  };

  // –ï–∫—Å–ø–æ—Ä—Ç JSON —É —Ñ–∞–π–ª
  const exportToJsonFile = () => {
    const json = JSON.stringify(elements, null, 2); // –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π JSON
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    const a = document.createElement('a');
    a.href = url;
    a.download = 'canvas-state.json'; // –Ü–º'—è —Ñ–∞–π–ª—É
    a.click();

    // –û—á–∏—â–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ URL
    URL.revokeObjectURL(url);
  };

  return (
    <div style={{ display: 'flex' }}>
      {/* –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ */}
      <ToolPanel addElement={addElement} />

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è */}
      <div style={{ flex: 1, background: '#f0f0f0' }}>
        <div style={{ margin: '10px' }}>
          <button onClick={exportToJsonFile}>–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —É —Ñ–∞–π–ª</button>
        </div>
        <Stage
          ref={stageRef}
          width={window.innerWidth - 200}
          height={window.innerHeight}
          style={{ background: '#fff' }}
        >
          <Layer>
            {elements.map((el) => {
              if (el.type === 'rect') {
                return (
                  <Rect
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    width={el.width}
                    height={el.height}
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'circle') {
                return (
                  <Circle
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    radius={el.radius}
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'text') {
                return (
                  <Text
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    text={el.text}
                    fontSize={20}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'line') {
                return (
                  <Line
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    points={el.points}
                    stroke="black"
                    strokeWidth={2}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'triangle') {
                return (
                  <Line
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    points={[0, 0, 100, 0, 50, 100]}
                    closed
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              }
              return null;
            })}
          </Layer>
        </Stage>
      </div>
    </div>
  );
};

export default Home;
```

---

### **–©–æ —Ä–æ–±–∏—Ç—å –∫–æ–¥?**

1. **–§—É–Ω–∫—Ü—ñ—è `exportToJsonFile`:**
   - –ö–æ–Ω–≤–µ—Ä—Ç—É—î —Å—Ç–∞–Ω –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É JSON.
   - –°—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª JSON —ñ –ø—Ä–æ–ø–æ–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –π–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏.

2. **–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É:**
   –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ —Ç–∞–∫:
   ```json
   [
     {
       "id": 1,
       "type": "rect",
       "x": 100,
       "y": 100,
       "width": 100,
       "height": 100,
       "fill": "gray",
       "draggable": true
     },
     {
       "id": 2,
       "type": "circle",
       "x": 200,
       "y": 200,
       "radius": 50,
       "fill": "gray",
       "draggable": true
     }
   ]
   ```

3. **–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª:**
   –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º—É—î –Ω–∞–∑–≤—É `canvas-state.json`, –∞–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü–µ —É —Ñ—É–Ω–∫—Ü—ñ—ó `download`.

---

### **–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É**

1. **–Ü–º–ø–æ—Ä—Ç JSON –∑ —Ñ–∞–π–ª—É:**
   –î–æ–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON —É —Å—Ü–µ–Ω—É.

2. **–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É `localStorage`:**
   –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —É –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ –±—Ä–∞—É–∑–µ—Ä–∞.

---

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç–∏! üòä