–û—Å—å —è–∫ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ **—ñ–º–ø–æ—Ä—Ç JSON —ñ–∑ —Ñ–∞–π–ª—É** –≤ Next.js –¥–ª—è –≤–∞—à–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É. –ú–∏ –¥–æ–¥–∞–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –¥–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Ñ–∞–π–ª —ñ–∑ JSON-–¥–∞–Ω–∏–º–∏ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ —ó—Ö –Ω–∞ —Å—Ü–µ–Ω—ñ.

---

### **–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ –∑ —ñ–º–ø–æ—Ä—Ç–æ–º JSON**

#### **–ö–æ–¥:**
–û–Ω–æ–≤–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —É `pages/index.js`, –¥–æ–¥–∞–≤—à–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É JSON.

```javascript
import React, { useRef, useState } from 'react';
import { Stage, Layer, Rect, Circle, Text, Line } from 'react-konva';
import ToolPanel from '../components/ToolPanel';

const Home = () => {
  const stageRef = useRef();
  const [elements, setElements] = useState([]);

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
  const addElement = (type) => {
    const newElement = {
      id: elements.length + 1,
      type,
      x: 100,
      y: 100,
      width: 100,
      height: 100,
      radius: 50,
      text: '–¢–µ–∫—Å—Ç',
      points: [0, 0, 100, 100],
      fill: 'gray',
      draggable: true,
    };
    setElements([...elements, newElement]);
  };

  // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  const handleDragEnd = (id, e) => {
    const updatedElements = elements.map((el) =>
      el.id === id ? { ...el, x: e.target.x(), y: e.target.y() } : el
    );
    setElements(updatedElements);
  };

  // –ï–∫—Å–ø–æ—Ä—Ç JSON —É —Ñ–∞–π–ª
  const exportToJsonFile = () => {
    const json = JSON.stringify(elements, null, 2);
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = 'canvas-state.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  // –Ü–º–ø–æ—Ä—Ç JSON —ñ–∑ —Ñ–∞–π–ª—É
  const importFromJsonFile = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const importedElements = JSON.parse(e.target.result);
          setElements(importedElements); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
          alert('–°—Ü–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞!');
        } catch (error) {
          alert('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON.');
        }
      };
      reader.readAsText(file);
    }
  };

  return (
    <div style={{ display: 'flex' }}>
      {/* –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ */}
      <ToolPanel addElement={addElement} />

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è */}
      <div style={{ flex: 1, background: '#f0f0f0' }}>
        <div style={{ margin: '10px' }}>
          <button onClick={exportToJsonFile}>–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —É —Ñ–∞–π–ª</button>
          <input
            type="file"
            accept="application/json"
            onChange={importFromJsonFile}
            style={{ marginLeft: '10px' }}
          />
        </div>
        <Stage
          ref={stageRef}
          width={window.innerWidth - 200}
          height={window.innerHeight}
          style={{ background: '#fff' }}
        >
          <Layer>
            {elements.map((el) => {
              if (el.type === 'rect') {
                return (
                  <Rect
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    width={el.width}
                    height={el.height}
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'circle') {
                return (
                  <Circle
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    radius={el.radius}
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'text') {
                return (
                  <Text
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    text={el.text}
                    fontSize={20}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'line') {
                return (
                  <Line
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    points={el.points}
                    stroke="black"
                    strokeWidth={2}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'triangle') {
                return (
                  <Line
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    points={[0, 0, 100, 0, 50, 100]}
                    closed
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              }
              return null;
            })}
          </Layer>
        </Stage>
      </div>
    </div>
  );
};

export default Home;
```

---

### **–©–æ —Ä–æ–±–∏—Ç—å —Ñ—É–Ω–∫—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç—É?**

1. **–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:**
   - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±–∏—Ä–∞—î —Ñ–∞–π–ª `.json` —á–µ—Ä–µ–∑ –µ–ª–µ–º–µ–Ω—Ç `<input type="file" />`.

2. **–ß–∏—Ç–∞–Ω–Ω—è JSON:**
   - `FileReader` –∑—á–∏—Ç—É—î –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É.
   - JSON –ø–∞—Ä—Å–∏—Ç—å—Å—è —É –º–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.

3. **–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏:**
   - –°—Ç–∞–Ω –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (`elements`) –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –æ—Ç—Ä–∏–º–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏.
   - –ï–ª–µ–º–µ–Ω—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –Ω–∞ —Å—Ü–µ–Ω—ñ.

---

### **–Ø–∫ –≤–∏–≥–ª—è–¥–∞—î —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∏–π JSON?**
–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∏–π JSON –ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É:
```json
[
  {
    "id": 1,
    "type": "rect",
    "x": 100,
    "y": 100,
    "width": 100,
    "height": 100,
    "fill": "gray",
    "draggable": true
  },
  {
    "id": 2,
    "type": "circle",
    "x": 200,
    "y": 200,
    "radius": 50,
    "fill": "blue",
    "draggable": true
  }
]
```

---

### **–©–æ —â–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏?**

1. **–í–∞–ª—ñ–¥–∞—Ü—ñ—è JSON:**
   - –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ, —á–∏ –≤—Å—ñ –æ–±‚Äô—î–∫—Ç–∏ —É —Ñ–∞–π–ª—ñ –º–∞—é—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è (`id`, `type`, `x`, `y` —Ç–æ—â–æ).
   - –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
     ```javascript
     if (!Array.isArray(importedElements)) {
       throw new Error('JSON –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.');
     }
     ```

2. **–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫:**
   - –í–∏–≤–æ–¥—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π.

---

### **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è?**

1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É **"–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —É —Ñ–∞–π–ª"**, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ JSON –∑—ñ —Å—Ü–µ–Ω–æ—é.
2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ–ª–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É, —â–æ–± –≤–∏–±—Ä–∞—Ç–∏ JSON —ñ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –π–æ–≥–æ –Ω–∞ —Å—Ü–µ–Ω—É.

---

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º –∞–±–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é JSON, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç–∏! üòä