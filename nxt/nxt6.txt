–©–æ–± –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å—Ç–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ, –º–∏ —ñ–Ω—Ç–µ–≥—Ä—É—î–º–æ API-–∑–∞–ø–∏—Ç–∏ –º—ñ–∂ –∫–ª—ñ—î–Ω—Ç–æ–º (**Next.js**) —ñ —Å–µ—Ä–≤–µ—Ä–æ–º (**Express**). –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Å—Ç–∞–Ω —Å—Ü–µ–Ω–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON –Ω–∞ —Å–µ—Ä–≤–µ—Ä —ñ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –π–æ–≥–æ —Ç–∞–º.

---

### **1. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞ (Express)**

#### **1.1. –î–æ–¥–∞–π—Ç–µ API –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É**

–£ —Ñ–∞–π–ª—ñ `server.js` —Å—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É:
```javascript
const express = require('express');
const next = require('next');

const app = next({ dev: process.env.NODE_ENV !== 'production' });
const handle = app.getRequestHandler();

const PORT = 4000;

app.prepare().then(() => {
  const server = express();

  server.use(express.json());

  // –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è —Å—Ç–∞–Ω—ñ–≤
  let sceneState = [];

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å—Ü–µ–Ω–∏
  server.get('/api/state', (req, res) => {
    res.json(sceneState);
  });

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å—Ü–µ–Ω–∏
  server.post('/api/state', (req, res) => {
    sceneState = req.body; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —É –ø–∞–º'—è—Ç—ñ
    res.status(200).json({ message: '–°—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!' });
  });

  // –Ü–Ω—à—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è Next.js
  server.all('*', (req, res) => {
    return handle(req, res);
  });

  server.listen(PORT, (err) => {
    if (err) throw err;
    console.log(`Server running on http://localhost:${PORT}`);
  });
});
```

- **GET `/api/state`:** –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞–Ω —Å—Ü–µ–Ω–∏.
- **POST `/api/state`:** –ü—Ä–∏–π–º–∞—î JSON —ñ –∑–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω —Å—Ü–µ–Ω–∏.

–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä:
```bash
npm run server
```

---

### **2. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ (Next.js)**

#### **2.1. –î–æ–¥–∞–π—Ç–µ API-–∑–∞–ø–∏—Ç–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É**

–û–Ω–æ–≤—ñ—Ç—å `pages/index.js`:
```javascript
import React, { useRef, useState, useEffect } from 'react';
import { Stage, Layer, Rect, Circle, Text, Line } from 'react-konva';
import ToolPanel from '../components/ToolPanel';

const Home = () => {
  const stageRef = useRef();
  const [elements, setElements] = useState([]);

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
  const addElement = (type) => {
    const newElement = {
      id: elements.length + 1,
      type,
      x: 100,
      y: 100,
      width: 100,
      height: 100,
      radius: 50,
      text: '–¢–µ–∫—Å—Ç',
      points: [0, 0, 100, 100],
      fill: 'gray',
      draggable: true,
    };
    setElements([...elements, newElement]);
  };

  // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  const handleDragEnd = (id, e) => {
    const updatedElements = elements.map((el) =>
      el.id === id ? { ...el, x: e.target.x(), y: e.target.y() } : el
    );
    setElements(updatedElements);
  };

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
  const saveStateToServer = async () => {
    try {
      const response = await fetch('/api/state', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(elements),
      });
      const result = await response.json();
      alert(result.message);
    } catch (error) {
      alert('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.');
      console.error(error);
    }
  };

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞
  const loadStateFromServer = async () => {
    try {
      const response = await fetch('/api/state');
      const data = await response.json();
      setElements(data);
      alert('–°—Ç–∞–Ω —Å—Ü–µ–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    } catch (error) {
      alert('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞.');
      console.error(error);
    }
  };

  return (
    <div style={{ display: 'flex' }}>
      {/* –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ */}
      <ToolPanel addElement={addElement} />

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è */}
      <div style={{ flex: 1, background: '#f0f0f0' }}>
        <div style={{ margin: '10px' }}>
          <button onClick={saveStateToServer}>–ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ</button>
          <button onClick={loadStateFromServer}>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞–Ω —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞</button>
        </div>
        <Stage
          ref={stageRef}
          width={window.innerWidth - 200}
          height={window.innerHeight}
          style={{ background: '#fff' }}
        >
          <Layer>
            {elements.map((el) => {
              if (el.type === 'rect') {
                return (
                  <Rect
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    width={el.width}
                    height={el.height}
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'circle') {
                return (
                  <Circle
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    radius={el.radius}
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'text') {
                return (
                  <Text
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    text={el.text}
                    fontSize={20}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'line') {
                return (
                  <Line
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    points={el.points}
                    stroke="black"
                    strokeWidth={2}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'triangle') {
                return (
                  <Line
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    points={[0, 0, 100, 0, 50, 100]}
                    closed
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              }
              return null;
            })}
          </Layer>
        </Stage>
      </div>
    </div>
  );
};

export default Home;
```

---

### **–†–æ–±–æ—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π**

1. **–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É (`saveStateToServer`):**
   - –ù–∞–¥—Å–∏–ª–∞—î `POST` –∑–∞–ø–∏—Ç —ñ–∑ JSON –¥–∞–Ω–∏–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
   - –°–µ—Ä–≤–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω —É –ø–∞–º'—è—Ç—ñ (–∞–±–æ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö).

2. **–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É (`loadStateFromServer`):**
   - –í–∏–∫–æ–Ω—É—î `GET` –∑–∞–ø–∏—Ç, –æ—Ç—Ä–∏–º—É—é—á–∏ —Å—Ç–∞–Ω –∑—ñ —Å—Ö–æ–≤–∏—â–∞ —Å–µ—Ä–≤–µ—Ä–∞.
   - –í—ñ–¥–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω —Å—Ü–µ–Ω–∏ –≤ –∫–ª—ñ—î–Ω—Ç—ñ.

---

### **–©–æ –¥–∞–ª—ñ?**

1. **–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:**
   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ MongoDB, PostgreSQL –∞–±–æ OracleDB –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É.

2. **–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:**
   - –ü—Ä–∏–≤'—è–∂—ñ—Ç—å —Å—Ç–∞–Ω —Å—Ü–µ–Ω–∏ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

3. **–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è API:**
   - –î–æ–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö —Å—Ç–∞–Ω—ñ–≤ (–ø—Ä–æ–µ–∫—Ç—ñ–≤).

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö —á–∏ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ API, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç–∏! üòä