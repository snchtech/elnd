–£ Next.js —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —à–ª—è—Ö–æ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–æ –ø–∞–ø–∫–∏ `pages`. –ù–∏–∂—á–µ –Ω–∞–≤–µ–¥–µ–Ω–æ, —è–∫ –¥–æ–¥–∞—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è **—Å–ø–∏—Å–∫—É —Å—Ö–µ–º** —Ç–∞ **—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ö–µ–º–∏**.

---

### **–ö—Ä–æ–∫ 1: –°—Ç–≤–æ—Ä—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É "–°–ø–∏—Å–æ–∫ —Å—Ö–µ–º"**

#### **1.1. –î–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª `pages/schemes/index.js`**
–¶—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏–º–µ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Å—Ö–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.

```javascript
import Link from 'next/link';
import { useEffect, useState } from 'react';

const SchemesList = () => {
  const [schemes, setSchemes] = useState([]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ö–µ–º —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    const fetchSchemes = async () => {
      try {
        const response = await fetch('/api/schemes');
        const data = await response.json();
        setSchemes(data);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ö–µ–º:', error);
      }
    };

    fetchSchemes();
  }, []);

  return (
    <div>
      <h1>–°–ø–∏—Å–æ–∫ —Å—Ö–µ–º</h1>
      <ul>
        {schemes.map((scheme) => (
          <li key={scheme.id}>
            <Link href={`/schemes/${scheme.id}`}>
              <a>{scheme.name}</a>
            </Link>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default SchemesList;
```

#### **1.2. –î–æ–¥–∞–π—Ç–µ API-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Å–ø–∏—Å–∫—É —Å—Ö–µ–º**

–£ –≤–∞—à–æ–º—É `server.js` –¥–æ–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–ø–∏—Å–∫—É —Å—Ö–µ–º:

```javascript
let schemes = [
  { id: 1, name: '–°—Ö–µ–º–∞ 1', data: [] },
  { id: 2, name: '–°—Ö–µ–º–∞ 2', data: [] },
];

server.get('/api/schemes', (req, res) => {
  res.json(schemes);
});
```

---

### **–ö—Ä–æ–∫ 2: –°—Ç–≤–æ—Ä—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ö–µ–º–∏"**

#### **2.1. –î–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª `pages/schemes/[id].js`**
–¶—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–æ–∑–≤–æ–ª–∏—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—É —Å—Ö–µ–º—É –∑–∞ —ó—ó `id`.

```javascript
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { Stage, Layer, Rect, Circle, Text, Line } from 'react-konva';

const EditScheme = () => {
  const router = useRouter();
  const { id } = router.query; // –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑—ñ —à–ª—è—Ö—É
  const [scheme, setScheme] = useState(null);

  useEffect(() => {
    if (id) {
      const fetchScheme = async () => {
        try {
          const response = await fetch(`/api/schemes/${id}`);
          const data = await response.json();
          setScheme(data);
        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ö–µ–º–∏:', error);
        }
      };

      fetchScheme();
    }
  }, [id]);

  const handleSave = async () => {
    try {
      await fetch(`/api/schemes/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(scheme),
      });
      alert('–°—Ö–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ö–µ–º–∏:', error);
    }
  };

  if (!scheme) {
    return <div>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;
  }

  return (
    <div>
      <h1>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ö–µ–º–∏: {scheme.name}</h1>
      <button onClick={handleSave}>–ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ö–µ–º—É</button>
      <Stage
        width={window.innerWidth}
        height={window.innerHeight - 100}
        style={{ background: '#f0f0f0' }}
      >
        <Layer>
          {scheme.data.map((el, index) => {
            if (el.type === 'rect') {
              return (
                <Rect
                  key={index}
                  x={el.x}
                  y={el.y}
                  width={el.width}
                  height={el.height}
                  fill={el.fill}
                  draggable
                />
              );
            } else if (el.type === 'circle') {
              return (
                <Circle
                  key={index}
                  x={el.x}
                  y={el.y}
                  radius={el.radius}
                  fill={el.fill}
                  draggable
                />
              );
            }
            return null;
          })}
        </Layer>
      </Stage>
    </div>
  );
};

export default EditScheme;
```

---

#### **2.2. –î–æ–¥–∞–π—Ç–µ API-–µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –¥–ª—è —Å—Ö–µ–º–∏ –∑–∞ ID**

–£ –≤–∞—à–æ–º—É `server.js` –¥–æ–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ö–µ–º–∏ –∑–∞ —ó—ó `id`:

```javascript
// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ö–µ–º–∏ –∑–∞ ID
server.get('/api/schemes/:id', (req, res) => {
  const scheme = schemes.find((s) => s.id === parseInt(req.params.id));
  if (scheme) {
    res.json(scheme);
  } else {
    res.status(404).json({ message: '–°—Ö–µ–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
  }
});

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ö–µ–º–∏ –∑–∞ ID
server.put('/api/schemes/:id', (req, res) => {
  const index = schemes.findIndex((s) => s.id === parseInt(req.params.id));
  if (index !== -1) {
    schemes[index] = { ...schemes[index], data: req.body };
    res.json({ message: '–°—Ö–µ–º–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!' });
  } else {
    res.status(404).json({ message: '–°—Ö–µ–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
  }
});
```

---

### **–†–µ–∑—É–ª—å—Ç–∞—Ç**

1. **–°–ø–∏—Å–æ–∫ —Å—Ö–µ–º:**
   - –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞ URL: `http://localhost:3000/schemes`.
   - –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ö–µ–º–∏, –∫–æ–∂–Ω–∞ –∑ —è–∫–∏—Ö –º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.

2. **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ö–µ–º–∏:**
   - –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞ URL: `http://localhost:3000/schemes/[id]`.
   - –î–æ–∑–≤–æ–ª—è—î —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ —Å—Ö–µ–º–∏ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —ó—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.

---

### **–©–æ –¥–∞–ª—ñ?**

1. **–î–æ–¥–∞—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ö–µ–º–∏.**
2. **–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ö–µ–º.**
3. **–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏.**

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç–∏! üòä