import { getAnchorPoints } from "../../../app/utils/anchors";
import { calculateOrthogonalPath } from "../../../app/utils/pathUtils"; // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—É –ª—ñ–Ω—ñ–π

export const handleDragMove = (id, e, setElements, getElements, connections, setConnections) => {
    const { x, y } = e.target.position();

    console.log(`üü¢ –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ñ—ñ–≥—É—Ä—É ${id} –¥–æ –ø–æ–∑–∏—Ü—ñ—ó:`, { x, y });

    // üü¢ –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∞
    setElements((prev) =>
        prev.map((el) => (el.id === id ? { ...el, x, y } : el))
    );

    setTimeout(() => {

    const elements = getElements();

    

    setConnections((prev) =>
        prev.map((conn) => {
            console.log(`üî∏ –û–±—Ä–æ–±–ª—è—î–º–æ –∑–≤‚Äô—è–∑–æ–∫ ${conn.id}`);
            console.log("üîç `additionalAnchors` –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º:", JSON.stringify(conn.additionalAnchors, null, 2));

            // üîπ –®—É–∫–∞—î–º–æ `startElement` —Ç–∞ `endElement`
            let startElement = elements.find((el) => el.id === conn.startElementId);
            let endElement = elements.find((el) => el.id === conn.endElementId);

            // üîπ –Ø–∫—â–æ `startElement` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ `startAnchor`
            let startAnchor = conn.additionalAnchors?.find((a) => a.id === conn.startElementId);
            if (!startAnchor) {
                for (let c of prev) {
                    let foundAnchor = c.additionalAnchors?.find((a) => a.id === conn.startElementId);
                    if (foundAnchor) {
                        startAnchor = foundAnchor;
                        break;
                    }
                }
            }

            // üîπ –Ø–∫—â–æ `endElement` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ `endAnchor`
            let endAnchor = conn.additionalAnchors?.find((a) => a.id === conn.endElementId);
            if (!endAnchor) {
                for (let c of prev) {
                    let foundAnchor = c.additionalAnchors?.find((a) => a.id === conn.endElementId);
                    if (foundAnchor) {
                        endAnchor = foundAnchor;
                        break;
                    }
                }
            }

            console.log(`  - startElement: ${startElement ? startElement.id : "‚ùå –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ"}`);
            console.log(`  - endElement: ${endElement ? endElement.id : "‚ùå –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ"}`);
            console.log(`  - startAnchor: ${startAnchor ? JSON.stringify(startAnchor) : "‚ùå –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ"}`);
            console.log(`  - endAnchor: ${endAnchor ? JSON.stringify(endAnchor) : "‚ùå –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ"}`);

            // ‚ùå –Ø–∫—â–æ `startElement` –∞–±–æ `startAnchor` –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            if (!startElement && !startAnchor) {
                console.warn(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ: `, conn.id, "‚Äì `startElement` –∞–±–æ `startAnchor` –Ω–µ —ñ—Å–Ω—É—î!");
                return conn;
            }

            // ‚ùå –Ø–∫—â–æ `endElement` –∞–±–æ `endAnchor` –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            if (!endElement && !endAnchor) {
                console.warn(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ: `, conn.id, "‚Äì `endElement` –∞–±–æ `endAnchor` –Ω–µ —ñ—Å–Ω—É—î!");
                return conn;
            }

            // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `startAnchor`, —è–∫—â–æ `startElement` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            const startPoint = getAnchorPoints(startElement).find((p) => p.direction === conn.startPoint.direction);

            // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `endAnchor`, —è–∫—â–æ `endElement` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            const endPoint = getAnchorPoints(endElement).find((p) => p.direction === conn.endPoint.direction);

            console.log(`  ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ startPoint:`, startPoint);
            console.log(`  ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ endPoint:`, endPoint);

            if (!startPoint || !endPoint) {
                console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≤‚Äô—è–∑–∫—É ${conn.id}`);
                return conn;
            }

            // üü¢ –û–Ω–æ–≤–ª—é—î–º–æ –º–∞—Ä—à—Ä—É—Ç –ª—ñ–Ω—ñ—ó
            const newPoints = calculateOrthogonalPath(startPoint, endPoint);
            console.log(`  ‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç—É –¥–ª—è ${conn.id}:`, newPoints);

            if (!newPoints) {
                console.warn(`‚ö†Ô∏è –®–ª—è—Ö –Ω–µ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤—Å—è –¥–ª—è –∑–≤‚Äô—è–∑–∫—É ${conn.id}`);
                return conn;
            }

            // üü¢ –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ—á–∫–∏ –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ (`additionalAnchors`)
            const updatedAnchors = conn.additionalAnchors?.map((anchor) => {
                if (!anchor) return null;

                // ‚úÖ –Ø–∫—â–æ `anchor.id` –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î `endElementId`, –ø—Ä–∏–≤‚Äô—è–∑—É—î–º–æ –¥–æ —Ñ—ñ–≥—É—Ä–∏
                if (anchor.id === conn.endElementId && endElement?.id === id) {
                    console.log(`  üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ—á–∫—É –ø—Ä–∏–≤‚Äô—è–∑–∫–∏: ${anchor.id}, –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ –¥–æ:`, { x, y });
                    return { ...anchor, x, y };
                }

                return anchor;
            }).filter(a => a !== null);

            console.log(`  ‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ —Ç–æ—á–∫–∏ –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ –¥–ª—è ${conn.id}:`, updatedAnchors);

            return {
                ...conn,
                points: newPoints,
                additionalAnchors: updatedAnchors, // ‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ —Ç–æ—á–∫–∏ –ø—Ä–∏–≤‚Äô—è–∑–∫–∏
            };
        })
    );
}, 0);
};
