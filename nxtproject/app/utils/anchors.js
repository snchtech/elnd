import { v4 as uuidv4 } from "uuid";

export const addAnchorPoint = (connections, setConnections, connectionId, event) => {
    const { x, y } = event.target.getStage().getPointerPosition();

    setConnections((prev) =>
        prev.map((conn) =>
            conn.id === connectionId
                ? {
                      ...conn,
                      additionalAnchors: [
                          ...(conn.additionalAnchors || []),
                          { id: uuidv4(), x, y, parentConnectionId: connectionId },
                      ],
                  }
                : conn
        )
    );
};

  // üü¢ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—á–æ–∫ –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç–∞
  export const getAnchorPoints = (element) => {
    if (!element || !Array.isArray(element.anchors)) {
        console.warn(`‚ö†Ô∏è –ï–ª–µ–º–µ–Ω—Ç ${element?.id} –Ω–µ –º–∞—î –≤–∏–∑–Ω–∞—á–µ–Ω–∏—Ö —Ç–æ—á–æ–∫ –ø—Ä–∏–≤‚Äô—è–∑–∫–∏`);
        return [];
    }
    return element.anchors.map((anchor) => ({
        ...anchor,
        parentId: element.id // –î–æ–¥–∞—î–º–æ ID –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
    }));
};
