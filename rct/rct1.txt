Давайте розпочнемо! Ми створимо простий **React-додаток**, підключимо **Konva.js** через **react-konva**, і розгорнемо HTTP-сервер для роботи з даними. Виконаємо це поетапно:

---

### **Етап 1: Налаштування середовища**

#### **1. Створіть React-додаток**
```bash
npx create-react-app konva-editor
cd konva-editor
```

#### **2. Встановіть необхідні залежності**
```bash
npm install react-konva konva
npm install express
```

---

### **Етап 2: Реалізація React-додатку**

#### **1. Налаштування Konva.js у React**

Створіть файл `src/components/Canvas.js`:
```javascript
import React, { useRef } from 'react';
import { Stage, Layer, Rect, Circle } from 'react-konva';

const Canvas = () => {
  const stageRef = useRef();

  return (
    <Stage
      ref={stageRef}
      width={window.innerWidth}
      height={window.innerHeight}
      style={{ background: '#f0f0f0' }}
    >
      <Layer>
        {/* Прямокутник */}
        <Rect
          x={50}
          y={50}
          width={100}
          height={100}
          fill="blue"
          draggable
        />

        {/* Коло */}
        <Circle
          x={200}
          y={200}
          radius={50}
          fill="red"
          draggable
        />
      </Layer>
    </Stage>
  );
};

export default Canvas;
```

#### **2. Підключення компонента в `App.js`**
```javascript
import React from 'react';
import Canvas from './components/Canvas';

function App() {
  return (
    <div>
      <h1 style={{ textAlign: 'center' }}>Konva.js Editor</h1>
      <Canvas />
    </div>
  );
}

export default App;
```

---

### **Етап 3: Розгортання HTTP-сервера**

#### **1. Створіть файл `server.js`**
У корені проекту створіть файл `server.js`:
```javascript
const express = require('express');
const app = express();
const PORT = 5000;

app.use(express.json());

// Тимчасова база даних для схем
let schemes = [];

// Отримати всі схеми
app.get('/api/schemes', (req, res) => {
  res.json(schemes);
});

// Додати нову схему
app.post('/api/schemes', (req, res) => {
  const { name, data } = req.body;
  const id = schemes.length + 1;
  const newScheme = { id, name, data };
  schemes.push(newScheme);
  res.status(201).json(newScheme);
});

// Запустити сервер
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
```

#### **2. Запуск сервера**
Додайте скрипт у `package.json` для зручності:
```json
"scripts": {
  "start": "react-scripts start",
  "server": "node server.js"
}
```

Запустіть сервер:
```bash
npm run server
```

---

### **Етап 4: З'єднання React із сервером**

#### **1. Налаштування запитів на сервер**
Додайте функціонал для збереження та завантаження схем у React. Створіть файл `src/api.js`:
```javascript
const API_URL = 'http://localhost:5000/api';

export const fetchSchemes = async () => {
  const response = await fetch(`${API_URL}/schemes`);
  return response.json();
};

export const saveScheme = async (name, data) => {
  const response = await fetch(`${API_URL}/schemes`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ name, data }),
  });
  return response.json();
};
```

#### **2. Використання API у Canvas**
Змінений файл `src/components/Canvas.js`:
```javascript
import React, { useRef, useState, useEffect } from 'react';
import { Stage, Layer, Rect, Circle } from 'react-konva';
import { fetchSchemes, saveScheme } from '../api';

const Canvas = () => {
  const stageRef = useRef();
  const [schemes, setSchemes] = useState([]);

  useEffect(() => {
    // Завантаження схем із сервера
    const loadSchemes = async () => {
      const data = await fetchSchemes();
      setSchemes(data);
    };
    loadSchemes();
  }, []);

  const handleSave = async () => {
    const schemeData = stageRef.current.toJSON();
    const newScheme = await saveScheme('Test Scheme', schemeData);
    setSchemes((prev) => [...prev, newScheme]);
  };

  return (
    <div>
      <button onClick={handleSave}>Save Scheme</button>
      <Stage
        ref={stageRef}
        width={window.innerWidth}
        height={window.innerHeight}
        style={{ background: '#f0f0f0' }}
      >
        <Layer>
          <Rect x={50} y={50} width={100} height={100} fill="blue" draggable />
          <Circle x={200} y={200} radius={50} fill="red" draggable />
        </Layer>
      </Stage>
    </div>
  );
};

export default Canvas;
```

---

### **Етап 5: Тестування**
1. **Запустіть сервер:**
   ```bash
   npm run server
   ```
2. **Запустіть React-додаток:**
   ```bash
   npm start
   ```
3. **Тестуйте функціонал:**
   - Додайте елементи на сцені.
   - Натисніть "Save Scheme", щоб зберегти схему.
   - Перевірте запити до `/api/schemes`.

---

### **Розширення функціоналу**
1. **Підключення до Oracle Database:**
   - Використовуйте `node-oracledb` у `server.js` для збереження схем.
2. **Редагування існуючих схем:**
   - Реалізуйте завантаження схем із сервера та відображення їх у Konva.
3. **Масштабування та обробка великих схем:**
   - Додайте функціонал масштабування сцени.

Якщо виникають питання або потрібні розширення, дайте знати!