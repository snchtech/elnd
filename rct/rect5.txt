Давайте реалізуємо функціонал **імпорту JSON із файлу**. Користувач зможе завантажити файл JSON, а програма автоматично відобразить елементи на сцені.

---

### **Кроки для реалізації імпорту JSON**

#### **1. Оновіть компонент `Canvas.js`**
Ми додамо кнопку для імпорту JSON-файлу та функцію, яка обробляє цей файл.

```javascript
import React, { useRef, useState } from 'react';
import { Stage, Layer, Rect, Circle, Line, Text } from 'react-konva';
import ToolPanel from './ToolPanel';

const Canvas = () => {
  const stageRef = useRef();
  const [elements, setElements] = useState([]);

  // Додавання нового елемента
  const handleAddElement = (type) => {
    const newElement = {
      id: elements.length + 1,
      type,
      x: 100,
      y: 100,
      width: 100,
      height: 100,
      radius: 50,
      text: 'Текст',
      draggable: true,
      fill: 'gray',
    };
    setElements([...elements, newElement]);
  };

  // Обробка переміщення елемента
  const handleDragEnd = (id, e) => {
    const updatedElements = elements.map((el) =>
      el.id === id ? { ...el, x: e.target.x(), y: e.target.y() } : el
    );
    setElements(updatedElements);
  };

  // Збереження у JSON
  const handleSave = () => {
    const json = JSON.stringify(elements, null, 2);
    console.log('Збережений стан:', json);

    // Збереження у localStorage
    localStorage.setItem('canvasState', json);
    alert('Стан схеми збережено!');
  };

  // Завантаження стану з JSON
  const handleLoad = () => {
    const savedState = localStorage.getItem('canvasState');
    if (savedState) {
      setElements(JSON.parse(savedState));
      alert('Стан схеми завантажено!');
    } else {
      alert('Стан схеми не знайдено.');
    }
  };

  // Експорт JSON у файл
  const handleExport = () => {
    const json = JSON.stringify(elements, null, 2);
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);

    // Створення посилання для завантаження
    const a = document.createElement('a');
    a.href = url;
    a.download = 'canvas-state.json'; // Назва файлу
    a.click();

    // Звільнення об'єкта URL
    URL.revokeObjectURL(url);
  };

  // Імпорт JSON із файлу
  const handleImport = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const json = JSON.parse(e.target.result);
          setElements(json); // Оновлення стану елементів
          alert('Схема успішно імпортована!');
        } catch (error) {
          alert('Помилка під час імпорту JSON. Перевірте формат файлу.');
        }
      };
      reader.readAsText(file);
    }
  };

  return (
    <div style={{ display: 'flex' }}>
      {/* Панель інструментів */}
      <ToolPanel onAddElement={handleAddElement} />

      {/* Сцена */}
      <div style={{ flex: 1, background: '#f0f0f0' }}>
        <div style={{ margin: '10px' }}>
          <button onClick={handleSave}>Зберегти стан</button>
          <button onClick={handleLoad}>Завантажити стан</button>
          <button onClick={handleExport}>Експортувати у файл</button>
          <input
            type="file"
            accept="application/json"
            onChange={handleImport}
            style={{ display: 'inline-block', marginLeft: '10px' }}
          />
        </div>
        <Stage
          ref={stageRef}
          width={window.innerWidth}
          height={window.innerHeight}
          style={{ background: '#fff' }}
        >
          <Layer>
            {elements.map((el) => {
              if (el.type === 'rect') {
                return (
                  <Rect
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    width={el.width}
                    height={el.height}
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'circle') {
                return (
                  <Circle
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    radius={el.radius}
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'line') {
                return (
                  <Line
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    points={[0, 0, 100, 100]}
                    stroke="black"
                    strokeWidth={2}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'text') {
                return (
                  <Text
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    text={el.text}
                    fontSize={20}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              } else if (el.type === 'triangle') {
                return (
                  <Line
                    key={el.id}
                    x={el.x}
                    y={el.y}
                    points={[0, 0, 100, 0, 50, 100]}
                    closed
                    fill={el.fill}
                    draggable
                    onDragEnd={(e) => handleDragEnd(el.id, e)}
                  />
                );
              }
              return null;
            })}
          </Layer>
        </Stage>
      </div>
    </div>
  );
};

export default Canvas;
```

---

### **Як це працює?**

1. **Вибір файлу:**
   - Користувач натискає на поле для вибору файлу.
   - Дозволено вибирати лише файли із розширенням `.json`.

2. **Обробка файлу:**
   - `FileReader` зчитує вміст файлу як текст.
   - JSON-документ парситься через `JSON.parse()`.

3. **Оновлення стану:**
   - Якщо JSON валідний, об'єкти з файлу додаються у стан React.
   - Якщо JSON не валідний, виводиться відповідне повідомлення.

---

### **Що буде збережено у JSON?**
Файл може містити такий JSON:
```json
[
  {
    "id": 1,
    "type": "rect",
    "x": 50,
    "y": 50,
    "width": 100,
    "height": 100,
    "fill": "blue",
    "draggable": true
  },
  {
    "id": 2,
    "type": "circle",
    "x": 200,
    "y": 200,
    "radius": 50,
    "fill": "red",
    "draggable": true
  }
]
```

Після імпорту ці елементи будуть відображені на сцені.

---

### **Що ще можна покращити?**

1. **Валідація JSON:**
   - Перевірка структури JSON перед додаванням у стан.

2. **Обробка помилок:**
   - Додайте детальні повідомлення про помилки для користувача (наприклад, "Елемент із невідомим типом").

3. **Кастомізація елементів:**
   - Реалізуйте опції для редагування кольору, розмірів та інших властивостей після імпорту.

Якщо потрібна допомога з реалізацією додаткових функцій, дайте знати!