–û—Å—å –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ **Express** —ñ–∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ **Oracle** –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É `import/export` (ES6):

---

### üìÅ **–û–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—î–∫—Ç—É**

```
/backend
‚îú‚îÄ‚îÄ /controllers
‚îÇ   ‚îú‚îÄ‚îÄ departmentController.js
‚îÇ   ‚îú‚îÄ‚îÄ schemeController.js
‚îÇ   ‚îî‚îÄ‚îÄ unitController.js
‚îú‚îÄ‚îÄ /db
‚îÇ   ‚îî‚îÄ‚îÄ oracle.js
‚îú‚îÄ‚îÄ /routes
‚îÇ   ‚îú‚îÄ‚îÄ departments.js
‚îÇ   ‚îú‚îÄ‚îÄ schemes.js
‚îÇ   ‚îî‚îÄ‚îÄ units.js
‚îú‚îÄ‚îÄ /middleware
‚îÇ   ‚îî‚îÄ‚îÄ errorHandler.js
‚îú‚îÄ‚îÄ /utils
‚îÇ   ‚îî‚îÄ‚îÄ fileManager.js
‚îú‚îÄ‚îÄ server.js
‚îî‚îÄ‚îÄ package.json
```

---

### üîå **1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Oracle (`db/oracle.js`)**

```javascript
import oracledb from 'oracledb';
import dotenv from 'dotenv';

dotenv.config();

oracledb.outFormat = oracledb.OUT_FORMAT_OBJECT;

const dbConfig = {
  user: process.env.ORACLE_USER,
  password: process.env.ORACLE_PASSWORD,
  connectString: process.env.ORACLE_CONNECTION_STRING,
};

export async function initialize() {
  try {
    await oracledb.createPool(dbConfig);
    console.log('‚úÖ Oracle DB Connected');
  } catch (err) {
    console.error('‚ùå Error connecting to Oracle DB:', err);
  }
}

export async function close() {
  try {
    await oracledb.getPool().close(0);
    console.log('üîå Oracle DB Disconnected');
  } catch (err) {
    console.error('‚ùå Error closing Oracle DB connection:', err);
  }
}

export async function executeQuery(sql, binds = [], options = {}) {
  let connection;
  try {
    connection = await oracledb.getConnection();
    const result = await connection.execute(sql, binds, options);
    return result.rows;
  } catch (err) {
    console.error('‚ùå Query Error:', err);
    throw err;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}
```

---

### üìö **2. –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ (controllers/)**

#### **`controllers/departmentController.js`**

```javascript
import { executeQuery } from '../db/oracle.js';

export async function getDepartments(req, res) {
  try {
    const sql = `SELECT id, short_name, name FROM department`;
    const departments = await executeQuery(sql);
    res.status(200).json(departments);
  } catch (error) {
    console.error('‚ùå Error fetching departments:', error);
    res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–¥—ñ–ª—ñ–≤' });
  }
}
```

#### **`controllers/schemeController.js`**

```javascript
import { executeQuery } from '../db/oracle.js';
import { v4 as uuidv4 } from 'uuid';

export async function getSchemes(req, res) {
  try {
    const sql = `SELECT * FROM scheme`;
    const schemes = await executeQuery(sql);
    res.status(200).json(schemes);
  } catch (error) {
    console.error('‚ùå Error fetching schemes:', error);
    res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ö–µ–º' });
  }
}

export async function createScheme(req, res) {
  const { scheme_name, scheme_album_id, scheme_department, scheme_unit, scheme_format, scheme_description } = req.body;
  const scheme_id = uuidv4();

  try {
    const sql = `
      INSERT INTO scheme (id, album_id, name, depart_id, unit_id, format, description, date_created)
      VALUES (:id, :album_id, :name, :depart_id, :unit_id, :format, :description, SYSDATE)
    `;
    await executeQuery(sql, [scheme_id, scheme_album_id, scheme_name, scheme_department, scheme_unit, scheme_format, scheme_description]);
    res.status(201).json({ message: '–°—Ö–µ–º—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ', id: scheme_id });
  } catch (error) {
    console.error('‚ùå Error creating scheme:', error);
    res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ö–µ–º—É' });
  }
}
```

---

### üõ£Ô∏è **3. –†–æ—É—Ç–∏ (routes/)**

#### **`routes/departments.js`**

```javascript
import express from 'express';
import { getDepartments } from '../controllers/departmentController.js';

const router = express.Router();

router.get('/', getDepartments);

export default router;
```

#### **`routes/schemes.js`**

```javascript
import express from 'express';
import { getSchemes, createScheme } from '../controllers/schemeController.js';

const router = express.Router();

router.get('/', getSchemes);
router.post('/create', createScheme);

export default router;
```

---

### üñ• **4. –°–µ—Ä–≤–µ—Ä (`server.js`)**

```javascript
import express from 'express';
import cors from 'cors';
import compression from 'compression';
import morgan from 'morgan';
import dotenv from 'dotenv';
import { initialize, close } from './db/oracle.js';
import departmentRoutes from './routes/departments.js';
import schemeRoutes from './routes/schemes.js';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 4000;

app.use(cors());
app.use(express.json());
app.use(compression());
app.use(morgan('dev'));

// –†–æ—É—Ç–∏
app.use('/api/departments', departmentRoutes);
app.use('/api/schemes', schemeRoutes);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    await initialize();

    app.listen(PORT, () => {
      console.log(`üöÄ Server is running on http://localhost:${PORT}`);
    });

    process.on('SIGINT', async () => {
      await close();
      process.exit(0);
    });
  } catch (error) {
    console.error('‚ùå Error starting server:', error);
  }
}

startServer();
```

---

### ‚úÖ **5. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä—É**

–î–æ–¥–∞–π—Ç–µ —É **`package.json`**:

```json
"type": "module"
```

–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞:

```bash
node server.js
```

---

### üîó **6. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Next.js –¥–æ API**

#### **–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª—ñ–≤**

```javascript
useEffect(() => {
  fetch('http://localhost:4000/api/departments')
    .then((res) => res.json())
    .then((data) => setDepartments(data))
    .catch((err) => console.error(err));
}, []);
```

#### **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ö–µ–º–∏**

```javascript
const handleCreateScheme = async () => {
  await fetch('http://localhost:4000/api/schemes/create', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      scheme_name: '–ù–æ–≤–∞ —Å—Ö–µ–º–∞',
      scheme_album_id: '1',
      scheme_department: 'IT',
      scheme_unit: '–¶–µ—Ö 1',
      scheme_format: 'A4',
      scheme_description: '–û–ø–∏—Å —Å—Ö–µ–º–∏',
    }),
  });
};
```

---

## üî• **–©–æ –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏:**

1. **–ü–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä Express.**  
2. **–ß–∏—Å—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `import/export`.**  
3. **–ì–Ω—É—á–∫–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Oracle –∑ —Ä–æ–∑—à–∏—Ä—é–≤–∞–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é.**  
4. **–ó—Ä—É—á–Ω—É –≤–∑–∞—î–º–æ–¥—ñ—é –º—ñ–∂ Next.js —ñ API —Å–µ—Ä–≤–µ—Ä–æ–º.**

–¢–∞–∫–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª—è—î –ª–µ–≥–∫–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç —ñ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª. üöÄ