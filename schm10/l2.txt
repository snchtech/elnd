–î–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–ª–µ–π —ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ –¥–æ–¥–∞—Ç–∫—É —Å—Ö–µ–º –Ω–∞ –±–∞–∑—ñ **Oracle** —ñ **Node.js**, —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ —Ç–∞–∫—ñ –µ—Ç–∞–ø–∏:

---

## 1Ô∏è‚É£ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—å –¥–ª—è —Ä–æ–ª–µ–π**

### üîπ **–¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (`users`)**

```sql
CREATE TABLE users (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username VARCHAR2(50) UNIQUE NOT NULL,
  password VARCHAR2(255) NOT NULL,
  position_id NUMBER,
  department_id NUMBER,
  unit_id NUMBER,
  status VARCHAR2(20) DEFAULT 'active'
);
```

### üîπ **–¢–∞–±–ª–∏—Ü—è —Ä–æ–ª–µ–π (`roles`)**

```sql
CREATE TABLE roles (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role_name VARCHAR2(50) UNIQUE NOT NULL,
  description VARCHAR2(255)
);
```

### üîπ **–¢–∞–±–ª–∏—Ü—è –ø—Ä–∏–≤'—è–∑–∫–∏ —Ä–æ–ª–µ–π –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (`user_roles`)**

```sql
CREATE TABLE user_roles (
  user_id NUMBER,
  role_id NUMBER,
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (role_id) REFERENCES roles(id),
  PRIMARY KEY (user_id, role_id)
);
```

### üîπ **–î–æ–≤—ñ–¥–Ω–∏–∫–∏ –ø–æ—Å–∞–¥, –≤—ñ–¥–¥—ñ–ª—ñ–≤ —ñ –ø—É–Ω–∫—Ç—ñ–≤**

```sql
CREATE TABLE positions (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  position_name VARCHAR2(100) NOT NULL
);

CREATE TABLE departments (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  department_name VARCHAR2(100) NOT NULL
);

CREATE TABLE units (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  unit_name VARCHAR2(100) NOT NULL
);
```

---

## 2Ô∏è‚É£ **–ü—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–ª–µ–π**

- **auth** ‚Äì –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.  
- **scheme_user** ‚Äì –∑–∞–≥–∞–ª—å–Ω–∞ —Ä–æ–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–æ–¥–∞—Ç–∫–æ–º.  
- **Editor** ‚Äì –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ö–µ–º.  
- **Creator** ‚Äì –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ö–µ–º.  
- **Reader** ‚Äì –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ö–µ–º.  
- **Admin** ‚Äì –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä, —è–∫–∏–π –º–∞—î –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø.  

---

## 3Ô∏è‚É£ **–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –ª–æ–≥—ñ–Ω—É**

### üîπ **–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä (`controllers/authController.js`)**

```javascript
import { testUserConnection, executeQuery } from '../db/oracle.js';

export async function login(req, res) {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json({ status: 'error', error: '–õ–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ' });
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
  const connectionResult = await testUserConnection(username, password);

  if (!connectionResult.success) {
    return res.status(401).json({ status: 'error', error: connectionResult.error || '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å' });
  }

  try {
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—ñ–¥ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (–∑–∞–≥–∞–ª—å–Ω–∏–π –∫–æ–Ω–Ω–µ–∫—Ç –¥–æ–¥–∞—Ç–∫–∞)
    const userQuery = `
      SELECT u.id, u.username, p.position_name, d.department_name, un.unit_name
      FROM users u
      LEFT JOIN positions p ON u.position_id = p.id
      LEFT JOIN departments d ON u.department_id = d.id
      LEFT JOIN units un ON u.unit_id = un.id
      WHERE u.username = :username
    `;
    const userResult = await executeQuery(userQuery, [username]);

    if (userResult.length === 0) {
      return res.status(404).json({ status: 'error', error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    const user = userResult[0];

    // –ó–∞–ø–∏—Ç —Ä–æ–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const rolesQuery = `
      SELECT r.role_name
      FROM user_roles ur
      JOIN roles r ON ur.role_id = r.id
      WHERE ur.user_id = :userId
    `;
    const rolesResult = await executeQuery(rolesQuery, [user.ID]);

    const userRoles = rolesResult.map(role => role.ROLE_NAME);

    // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    res.status(200).json({
      status: 'validated',
      user: {
        username: user.USERNAME,
        position: user.POSITION_NAME,
        department: user.DEPARTMENT_NAME,
        unit: user.UNIT_NAME,
        roles: userRoles
      }
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–æ–ª–µ–π:', error);
    res.status(500).json({ status: 'error', error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É' });
  }
}
```

---

## 4Ô∏è‚É£ **–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ—É—Ç—É (`routes/auth.js`)**

```javascript
import express from 'express';
import { login } from '../controllers/authController.js';

const router = express.Router();

router.post('/login', login);

export default router;
```

---

## 5Ô∏è‚É£ **–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Oracle (`db/oracle.js`)**

```javascript
import oracledb from 'oracledb';
import dotenv from 'dotenv';

dotenv.config();

oracledb.outFormat = oracledb.OUT_FORMAT_OBJECT;

const dbConfig = {
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  connectString: process.env.ORACLE_CONNECT_STRING,
};

export async function testUserConnection(username, password) {
  try {
    const connection = await oracledb.getConnection({
      user: username,
      password: password,
      connectString: process.env.ORACLE_CONNECT_STRING,
    });
    await connection.close();
    return { success: true };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

export async function executeQuery(sql, binds = []) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    const result = await connection.execute(sql, binds);
    return result.rows;
  } catch (err) {
    throw err;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}
```

---

## 6Ô∏è‚É£ **–ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API**

### ‚úÖ **–£—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω**

```json
{
  "status": "validated",
  "user": {
    "username": "user123",
    "position": "–Ü–Ω–∂–µ–Ω–µ—Ä",
    "department": "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π –≤—ñ–¥–¥—ñ–ª",
    "unit": "–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª 1",
    "roles": ["auth", "scheme_user", "Editor"]
  }
}
```

### ‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó**

```json
{
  "status": "error",
  "error": "–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å"
}
```

---

## üîë **–©–æ –∑—Ä–æ–±–ª–µ–Ω–æ:**

1. **–†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è** —á–µ—Ä–µ–∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ **Oracle** –ø—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.  
2. **–†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π** –∑ —Ç–∞–±–ª–∏—Ü—è–º–∏ —Ä–æ–ª–µ–π, –ø–æ—Å–∞–¥, –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ —ñ –ø—É–Ω–∫—Ç—ñ–≤.  
3. **–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó** –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –π–æ–≥–æ —Ä–æ–ª—ñ.  

---

### üìå **–©–æ —â–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏:**

- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—é **JWT —Ç–æ–∫–µ–Ω—ñ–≤** –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.  
- **RBAC (Role-Based Access Control)** –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤.  
- –õ–æ–≥—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ–π–Ω–∏—Ö –ø–æ–¥—ñ–π.  

‚ö°Ô∏è **–¢–µ–ø–µ—Ä —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π —ñ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!**