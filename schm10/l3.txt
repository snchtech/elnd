–î–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ **JWT (JSON Web Token)** –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–ø—Ä–∏–π–Ω—è—Ç–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –ø—Ä–æ–ø–æ–Ω—É—é –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω—É —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó. –í–æ–Ω–∞ –≤–∫–ª—é—á–∞—Ç–∏–º–µ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —Ç–æ–∫–µ–Ω—ñ–≤, —ó—Ö –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤ —ñ –æ–∫—Ä–µ–º–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ —ñ–Ω—à–∏–º–∏ –¥–æ–¥–∞—Ç–∫–∞–º–∏.

---

## üîë **–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥**

1. **–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è JWT —Ç–æ–∫–µ–Ω–∞** –ø—Ä–∏ —É—Å–ø—ñ—à–Ω—ñ–π –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.  
2. **–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞** –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤.  
3. **–û–∫—Ä–µ–º–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç** –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ —ñ–Ω—à–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤.  
4. **–ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞** –¥–ª—è –ø—ñ–¥–ø–∏—Å—É —Ç–æ–∫–µ–Ω—ñ–≤.  
5. **Middleware** –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ —É –∑–∞–≥–æ–ª–æ–≤–∫—É `Authorization`.

---

## üìÇ **–û–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞**

```
/backend
  ‚îú‚îÄ‚îÄ /routes
  ‚îÇ     ‚îú‚îÄ‚îÄ auth.js           # –†–æ—É—Ç –¥–ª—è –ª–æ–≥—ñ–Ω—É —ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—ñ–≤
  ‚îÇ     ‚îî‚îÄ‚îÄ protected.js      # –†–æ—É—Ç –¥–ª—è –∑–∞—Ö–∏—â–µ–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
  ‚îú‚îÄ‚îÄ /controllers
  ‚îÇ     ‚îú‚îÄ‚îÄ authController.js # –õ–æ–≥—ñ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—ñ–≤
  ‚îÇ     ‚îî‚îÄ‚îÄ userController.js # –õ–æ–≥—ñ–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
  ‚îú‚îÄ‚îÄ /middlewares
  ‚îÇ     ‚îî‚îÄ‚îÄ authMiddleware.js # Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
  ‚îú‚îÄ‚îÄ /db
  ‚îÇ     ‚îî‚îÄ‚îÄ oracle.js         # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Oracle
  ‚îú‚îÄ‚îÄ /utils
  ‚îÇ     ‚îî‚îÄ‚îÄ jwt.js            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤
  ‚îú‚îÄ‚îÄ .env                    # –°–µ–∫—Ä–µ—Ç–Ω—ñ –∫–ª—é—á—ñ —ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  ‚îî‚îÄ‚îÄ server.js               # –ì–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
```

---

## 1Ô∏è‚É£ **JWT –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω—ñ–≤ (`utils/jwt.js`)**

```javascript
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';

dotenv.config();

const JWT_SECRET = process.env.JWT_SECRET || 'supersecretkey';
const JWT_EXPIRES_IN = '1h';  // –¢–æ–∫–µ–Ω –¥—ñ—î 1 –≥–æ–¥–∏–Ω—É

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
export const generateToken = (userData) => {
  return jwt.sign(userData, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
export const verifyToken = (token) => {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch (err) {
    return null;
  }
};
```

üîπ **–§–∞–π–ª `.env`:**

```
JWT_SECRET=your_super_secret_key
```

---

## 2Ô∏è‚É£ **Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ (`middlewares/authMiddleware.js`)**

```javascript
import { verifyToken } from '../utils/jwt.js';

export const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ status: 'error', error: '–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–¥—ñ–π—Å–Ω–∏–π' });
  }

  const token = authHeader.split(' ')[1];
  const decoded = verifyToken(token);

  if (!decoded) {
    return res.status(403).json({ status: 'error', error: '–ù–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω' });
  }

  req.user = decoded; // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∑–∞–ø–∏—Ç—É
  next();
};
```

---

## 3Ô∏è‚É£ **–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (`controllers/authController.js`)**

```javascript
import { testUserConnection, executeQuery } from '../db/oracle.js';
import { generateToken } from '../utils/jwt.js';

export async function login(req, res) {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json({ status: 'error', error: '–õ–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ' });
  }

  const connectionResult = await testUserConnection(username, password);

  if (!connectionResult.success) {
    return res.status(401).json({ status: 'error', error: connectionResult.error || '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å' });
  }

  try {
    const userQuery = `
      SELECT u.id, u.username, p.position_name, d.department_name, un.unit_name
      FROM users u
      LEFT JOIN positions p ON u.position_id = p.id
      LEFT JOIN departments d ON u.department_id = d.id
      LEFT JOIN units un ON u.unit_id = un.id
      WHERE u.username = :username
    `;
    const userResult = await executeQuery(userQuery, [username]);

    if (userResult.length === 0) {
      return res.status(404).json({ status: 'error', error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    const user = userResult[0];

    const rolesQuery = `
      SELECT r.role_name
      FROM user_roles ur
      JOIN roles r ON ur.role_id = r.id
      WHERE ur.user_id = :userId
    `;
    const rolesResult = await executeQuery(rolesQuery, [user.ID]);

    const userRoles = rolesResult.map(role => role.ROLE_NAME);

    const payload = {
      username: user.USERNAME,
      position: user.POSITION_NAME,
      department: user.DEPARTMENT_NAME,
      unit: user.UNIT_NAME,
      roles: userRoles
    };

    const token = generateToken(payload);

    res.status(200).json({
      status: 'validated',
      token,
      user: payload
    });
  } catch (error) {
    res.status(500).json({ status: 'error', error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É' });
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—É –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ —ñ–Ω—à–∏–º–∏ –¥–æ–¥–∞—Ç–∫–∞–º–∏
export function generateAccessToken(req, res) {
  const { username, roles } = req.body;

  if (!username || !roles) {
    return res.status(400).json({ status: 'error', error: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ username —ñ roles' });
  }

  const token = generateToken({ username, roles });

  res.status(200).json({
    status: 'success',
    token
  });
}
```

---

## 4Ô∏è‚É£ **–†–æ—É—Ç–∏–Ω–≥ –¥–ª—è –ª–æ–≥—ñ–Ω—É —ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—ñ–≤ (`routes/auth.js`)**

```javascript
import express from 'express';
import { login, generateAccessToken } from '../controllers/authController.js';
import { authenticateToken } from '../middlewares/authMiddleware.js';

const router = express.Router();

// –õ–æ–≥—ñ–Ω —ñ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
router.post('/login', login);

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
router.post('/generate-token', authenticateToken, generateAccessToken);

export default router;
```

---

## 5Ô∏è‚É£ **–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (`server.js`)**

```javascript
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import authRoutes from './routes/auth.js';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

app.use('/api/auth', authRoutes);

app.get('/', (req, res) => {
  res.send('üöÄ API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—î!');
});

app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ ${PORT}`);
});
```

---

## üì≤ **–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è**

### ‚úÖ **–ó–∞–ø–∏—Ç –Ω–∞ –ª–æ–≥—ñ–Ω**
```
POST /api/auth/login
Content-Type: application/json

{
  "username": "user123",
  "password": "password123"
}
```

**–í—ñ–¥–ø–æ–≤—ñ–¥—å:**
```json
{
  "status": "validated",
  "token": "JWT_TOKEN",
  "user": {
    "username": "user123",
    "position": "–Ü–Ω–∂–µ–Ω–µ—Ä",
    "department": "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π –≤—ñ–¥–¥—ñ–ª",
    "unit": "–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª 1",
    "roles": ["auth", "scheme_user", "Editor"]
  }
}
```

---

## üîê **–ü–µ—Ä–µ–≤–∞–≥–∏ —Ä—ñ—à–µ–Ω–Ω—è**

- **JWT** —Ç–æ–∫–µ–Ω–∏ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.  
- **Middleware** –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤.  
- **–ì–Ω—É—á–∫—ñ—Å—Ç—å** —É —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—ñ —Ä–æ–ª–µ–π —ñ –¥–æ—Å—Ç—É–ø—ñ–≤.  

–¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –±–µ–∑–ø–µ—á–Ω–æ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ —ñ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ–º–∏ —Å–µ—Ä–≤—ñ—Å–∞–º–∏!