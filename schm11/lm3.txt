–¶–µ–π —Ä—è–¥–æ–∫ –∫–æ–¥—É:

```javascript
// –î–æ–¥–∞—î–º–æ username —ñ–∑ —Ç–æ–∫–µ–Ω–∞
morgan.token('user', (req) => {
  return req.user ? req.user.username : '–ì—ñ—Å—Ç—å';
});
```

### üìå **–ü–æ—è—Å–Ω–µ–Ω–Ω—è, —è–∫ –ø—Ä–∞—Ü—é—î —Ü–µ–π –∫–æ–¥:**

1. **`morgan.token()`**  
   –¶–µ –º–µ—Ç–æ–¥ —ñ–∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ **`morgan`**, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è.  
   –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ç–æ–∫–µ–Ω–∏ ‚Äî —Ü–µ `:method`, `:url`, `:status`, –∞ —Ç—É—Ç –º–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–∏–π —Ç–æ–∫–µ–Ω `:user`.

2. **`req.user`**  
   –ü–æ–ª–µ **`req.user`** –¥–æ–¥–∞—î—Ç—å—Å—è –≤ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ middleware **`authenticateToken`**, —è–∫–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î JWT-—Ç–æ–∫–µ–Ω.

3. **JWT-—Ç–æ–∫–µ–Ω**  
   –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –≤ –∑–∞–ø–∏—Ç—ñ —É –∑–∞–≥–æ–ª–æ–≤–∫—É **`Authorization`**:

   ```
   Authorization: Bearer <jwt_token>
   ```

   –£ middleware —Ü–µ–π —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è, —ñ —è–∫—â–æ –≤—ñ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π, –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è –≤ **`req.user`**.

---

### üîê **–Ø–∫ —Å–∞–º–µ `req.user` –ø–æ—Ç—Ä–∞–ø–ª—è—î —É –∑–∞–ø–∏—Ç?**

–¶–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ middleware **`authenticateToken`**, —è–∫–µ –º–∏ —Ä–∞–Ω—ñ—à–µ —Ä–µ–∞–ª—ñ–∑—É–≤–∞–ª–∏:

```javascript
import { verifyToken } from '../utils/jwt.js';

export const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ status: 'error', error: '–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–¥—ñ–π—Å–Ω–∏–π' });
  }

  const token = authHeader.split(' ')[1];  // –û—Ç—Ä–∏–º—É—î–º–æ —Å–∞–º —Ç–æ–∫–µ–Ω
  const decoded = verifyToken(token);      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω

  if (!decoded) {
    return res.status(403).json({ status: 'error', error: '–ù–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω' });
  }

  req.user = decoded;  // üü¢ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–∑–∫–æ–¥–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Ç–æ–∫–µ–Ω–∞ –≤ req.user
  next();              // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–∞–ª—ñ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ middleware/–º–∞—Ä—à—Ä—É—Ç—É
};
```

---

### üîë **–©–æ –º—ñ—Å—Ç–∏—Ç—å JWT-—Ç–æ–∫–µ–Ω?**

–ü—Ä–∏ –ª–æ–≥—ñ–Ω—ñ –º–∏ –≥–µ–Ω–µ—Ä—É—î–º–æ JWT-—Ç–æ–∫–µ–Ω —ñ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:

```javascript
const payload = {
  username: user.USERNAME,      // –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  position: user.POSITION_NAME, // –ü–æ—Å–∞–¥–∞
  department: user.DEPARTMENT_NAME, // –í—ñ–¥–¥—ñ–ª
  unit: user.UNIT_NAME,         // –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª
  roles: userRoles              // –†–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
};

const token = generateToken(payload);
```

üîë **–ü—ñ—Å–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó** —Ü–µ–π —Ç–æ–∫–µ–Ω —Ä–æ–∑–∫–æ–¥–æ–≤—É—é—Ç—å, —ñ –º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ `req.user` —ñ–∑ –ø–æ–ª—è–º–∏:

```javascript
req.user = {
  username: 'user123',
  position: '–Ü–Ω–∂–µ–Ω–µ—Ä',
  department: '–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π –≤—ñ–¥–¥—ñ–ª',
  unit: '–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª 1',
  roles: ['auth', 'scheme_user', 'Editor']
};
```

---

### üìù **–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î —Ä–∞–∑–æ–º —ñ–∑ `morgan`**

üì• **–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:**

```http
GET /api/schemes HTTP/1.1
Host: api.example.com
Authorization: Bearer <jwt_token>
```

üîç **–Ø–∫ –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤—É—î –ª–æ–≥—É–≤–∞–Ω–Ω—è:**

1. **`authenticateToken`** –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–æ–∫–µ–Ω —ñ –¥–æ–¥–∞—î `req.user`.  
2. **`morgan`** –±–∞—á–∏—Ç—å, —â–æ `req.user` —ñ—Å–Ω—É—î, —ñ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î `username` —É –ª–æ–≥–∏.  

üìÇ **–õ–æ–≥-—Ñ–∞–π–ª (`combined.log`):**

```
25.10.2025 14:22:33 | GET /api/schemes | 200 | 35 ms | User: user123
```

üìÇ **–Ø–∫—â–æ —Ç–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π:**

```
25.10.2025 14:23:45 | GET /api/schemes | 401 | 12 ms | User: –ì—ñ—Å—Ç—å
```

---

### ‚ö° **–ß–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ?**

1. **–ê—É–¥–∏—Ç** ‚Äî –≤–∏–¥–Ω–æ, —è–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–∫–æ–Ω—É–≤–∞–≤ –∑–∞–ø–∏—Ç.  
2. **–ë–µ–∑–ø–µ–∫–∞** ‚Äî —Ñ—ñ–∫—Å—É—î–º–æ —Å–ø—Ä–æ–±–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –¥–æ—Å—Ç—É–ø—ñ–≤.  
3. **–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞** ‚Äî —à–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫ –ø–æ–º–∏–ª–æ–∫ –∑–∞ –ª–æ–≥–∞–º–∏.

üîí –¢–∞–∫–∏–º —á–∏–Ω–æ–º, `morgan` —É –∑–≤'—è–∑—Ü—ñ –∑ JWT —ñ `authenticateToken` –¥–æ–∑–≤–æ–ª—è—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–µ—Å—Ç–∏ –æ–±–ª—ñ–∫ —É—Å—ñ—Ö –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.