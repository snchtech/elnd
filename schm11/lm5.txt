–ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ ‚Äî —Ü–µ **–±–µ–∑–ø–µ—á–Ω—ñ—à–∏–π –ø—ñ–¥—Ö—ñ–¥** —É –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—ñ –∑ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏–º –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤ `localStorage`). –û–¥–∏–Ω —ñ–∑ —Å–ø–æ—Å–æ–±—ñ–≤ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è **—Ñ–∞–π–ª–æ–≤–æ—ó –ë–î** —è–∫ **LowDB** –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.

–û–¥–Ω–∞–∫ –Ω–∞–π–∫—Ä–∞—â–æ—é –ø—Ä–∞–∫—Ç–∏–∫–æ—é —î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è **Redis** –∞–±–æ **Memory Store** –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å –≤–∏—Å–æ–∫—É —à–≤–∏–¥–∫–æ–¥—ñ—é —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.

### üî• **–†—ñ—à–µ–Ω–Ω—è 1: –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –≤ LowDB**

---

### üì¶ **1. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è LowDB**

```bash
npm install lowdb
```

### üìÇ **2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è LowDB**

üîπ **`db/tokenDb.js`** (–§–∞–π–ª –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–æ–∫–µ–Ω–∞–º–∏)

```javascript
import { Low } from 'lowdb';
import { JSONFile } from 'lowdb/node';

const file = new JSONFile('./db/tokens.json');
const db = new Low(file);

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
await db.read();
db.data ||= { tokens: [] }; // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤

/**
 * –î–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export const addToken = async (username, token) => {
  await db.read();
  db.data.tokens.push({ username, token, createdAt: new Date().toISOString() });
  await db.write();
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
 */
export const isValidToken = async (token) => {
  await db.read();
  return db.data.tokens.some((t) => t.token === token);
};

/**
 * –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∏ –ª–æ–≥–∞—É—Ç—ñ
 */
export const removeToken = async (token) => {
  await db.read();
  db.data.tokens = db.data.tokens.filter((t) => t.token !== token);
  await db.write();
};
```

---

### üöÄ **3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó**

üîπ **`controllers/authController.js`**

```javascript
import { testUserConnection, executeQuery } from '../db/oracle.js';
import { generateToken } from '../utils/jwt.js';
import { addToken, removeToken } from '../db/tokenDb.js';

export async function login(req, res) {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json({ status: 'error', error: '–õ–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ' });
  }

  const connectionResult = await testUserConnection(username, password);

  if (!connectionResult.success) {
    return res.status(401).json({ status: 'error', error: connectionResult.error || '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å' });
  }

  try {
    const payload = { username, roles: ['auth', 'scheme_user'] };
    const token = generateToken(payload);

    await addToken(username, token); // ‚úÖ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω —É LowDB

    res.status(200).json({
      status: 'validated',
      token,
      user: payload,
    });
  } catch (error) {
    res.status(500).json({ status: 'error', error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É' });
  }
}

/**
 * –õ–æ–≥–∞—É—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export async function logout(req, res) {
  const token = req.headers['authorization']?.split(' ')[1];

  if (!token) {
    return res.status(400).json({ status: 'error', error: '–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π' });
  }

  await removeToken(token); // ‚úÖ –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–∫–µ–Ω —ñ–∑ LowDB
  res.status(200).json({ status: 'success', message: '–í–∏—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ' });
}
```

---

### üîí **4. Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞**

üîπ **`middlewares/authMiddleware.js`**

```javascript
import { isValidToken } from '../db/tokenDb.js';
import { verifyToken } from '../utils/jwt.js';

export const authenticateToken = async (req, res, next) => {
  const authHeader = req.headers['authorization'];

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ status: 'error', error: '–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–¥—ñ–π—Å–Ω–∏–π' });
  }

  const token = authHeader.split(' ')[1];

  const isTokenStored = await isValidToken(token);

  if (!isTokenStored) {
    return res.status(403).json({ status: 'error', error: '–¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π' });
  }

  const decoded = verifyToken(token);

  if (!decoded) {
    return res.status(403).json({ status: 'error', error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω' });
  }

  req.user = decoded;
  next();
};
```

---

### üü¢ **5. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Middleware**

üîπ **`routes/protectedRoutes.js`**

```javascript
import express from 'express';
import { authenticateToken } from '../middlewares/authMiddleware.js';

const router = express.Router();

router.get('/secure-data', authenticateToken, (req, res) => {
  res.json({ message: `–í—ñ—Ç–∞—é, ${req.user.username}! –¶–µ –∑–∞—Ö–∏—â–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.` });
});

export default router;
```

---

## üîÑ **–ü–µ—Ä–µ–≤–∞–≥–∏ —ñ –ù–µ–¥–æ–ª—ñ–∫–∏ –ø—ñ–¥—Ö–æ–¥—É –∑ LowDB**

### ‚úÖ **–ü–µ—Ä–µ–≤–∞–≥–∏**
1. **–ü—Ä–æ—Å—Ç–æ—Ç–∞** ‚Äî –ª–µ–≥–∫–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏.
2. **–õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è** ‚Äî –∑—Ä—É—á–Ω–æ –¥–ª—è –Ω–µ–≤–µ–ª–∏–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∞–±–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.
3. **–ì–Ω—É—á–∫—ñ—Å—Ç—å** ‚Äî –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –±—É–¥—å-—è–∫—É –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.

### ‚ö†Ô∏è **–ù–µ–¥–æ–ª—ñ–∫–∏**
1. **–ù–∏–∑—å–∫–∞ –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω—ñ—Å—Ç—å** ‚Äî –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∫—Ä–∞—â–µ Redis –∞–±–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
2. **–ü–æ–≤—ñ–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø** ‚Äî –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è/–∑–∞–ø–∏—Å –≤ —Ñ–∞–π–ª –º–æ–∂–µ —Å–ø–æ–≤—ñ–ª—å–Ω—é–≤–∞—Ç–∏—Å—è –∑ —á–∞—Å–æ–º.
3. **–†–∏–∑–∏–∫ –≤—Ç—Ä–∞—Ç–∏ –¥–∞–Ω–∏—Ö** ‚Äî —è–∫—â–æ —Å–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–∏—Ç—å—Å—è, –¥–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä–µ–∂—É—Ç—å—Å—è.

---

## üî• **–†—ñ—à–µ–Ω–Ω—è 2: –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –≤ Redis (–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)**

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ **—à–≤–∏–¥–∫—ñ—Å—Ç—å** —ñ **–º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω—ñ—Å—Ç—å**, –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ **Redis**.

### üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Redis:

```bash
npm install redis
```

üîπ **`db/redisClient.js`**

```javascript
import { createClient } from 'redis';

const redisClient = createClient();

redisClient.on('connect', () => {
  console.log('‚úÖ Redis Connected');
});

redisClient.on('error', (err) => {
  console.error('‚ùå Redis Error:', err);
});

await redisClient.connect();

export default redisClient;
```

üîπ **–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –≤ Redis**

```javascript
import redisClient from '../db/redisClient.js';

export const addToken = async (username, token) => {
  await redisClient.set(token, username, { EX: 60 * 60 * 24 }); // ‚è≥ –¢–æ–∫–µ–Ω –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è 1 –¥–æ–±—É
};

export const removeToken = async (token) => {
  await redisClient.del(token);
};

export const isValidToken = async (token) => {
  const result = await redisClient.exists(token);
  return result === 1;
};
```

---

## ‚úÖ **–©–æ –∫—Ä–∞—â–µ –æ–±—Ä–∞—Ç–∏?**

1. **–î–ª—è –Ω–µ–≤–µ–ª–∏–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤/—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è** ‚Üí **LowDB**  
2. **–î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–∏—Å—Ç–µ–º** ‚Üí **Redis** (—à–≤–∏–¥–∫–æ, –±–µ–∑–ø–µ—á–Ω–æ, –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–æ)

–¢–∞–∫—ñ –ø—ñ–¥—Ö–æ–¥–∏ –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å **–∫–æ–Ω—Ç—Ä–æ–ª—å** –∑–∞ —Ç–æ–∫–µ–Ω–∞–º–∏ —Ç–∞ –¥–æ–∑–≤–æ–ª—è—é—Ç—å **–ª–æ–≥—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å** –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.