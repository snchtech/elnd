–í–∞—à –ø—ñ–¥—Ö—ñ–¥ —ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º **Access Token** —ñ **Refresh Token** —î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—é —ñ –±–µ–∑–ø–µ—á–Ω–æ—é –ø—Ä–∞–∫—Ç–∏–∫–æ—é –¥–ª—è —Å—É—á–∞—Å–Ω–∏—Ö –≤–µ–±-–¥–æ–¥–∞—Ç–∫—ñ–≤. –¶—è –º–æ–¥–µ–ª—å –∑–∞–±–µ–∑–ø–µ—á—É—î:

1. **–í–∏—Å–æ–∫—É –±–µ–∑–ø–µ–∫—É** ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—á–∏–π **Access Token** –∑–º–µ–Ω—à—É—î —Ä–∏–∑–∏–∫ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü—ñ—ó.
2. **–ó—Ä—É—á–Ω—ñ—Å—Ç—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞** ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –±–µ–∑ —Ä–æ–∑–ª–æ–≥—ñ–Ω–µ–Ω–Ω—è.
3. **–ö–æ–Ω—Ç—Ä–æ–ª—å** ‚Äî **Refresh Token** –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ (–≤ –ë–î Oracle), —â–æ –¥–æ–∑–≤–æ–ª—è—î –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–µ—Å—ñ—è–º–∏.

---

## üîê **–Ø–∫ –ø—Ä–∞—Ü—é—î –º–æ–¥–µ–ª—å Access + Refresh Token**

1. **–õ–æ–≥—ñ–Ω**: –ü—ñ—Å–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è:
   - **Access Token** (5 —Ö–≤–∏–ª–∏–Ω) ‚Üí –ó–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ **LocalStorage**.
   - **Refresh Token** (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 7 –¥–Ω—ñ–≤) ‚Üí –ó–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ **Oracle**.

2. **–ó–∞–ø–∏—Ç –¥–æ API**: –ü–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è **Access Token**:
   - –Ø–∫—â–æ –≤–∞–ª—ñ–¥–Ω–∏–π ‚Üí –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç.
   - –Ø–∫—â–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π ‚Üí –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è **Refresh Token** –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ **Access Token**.

3. **–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤**: –ü—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ:
   - –ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –Ω–æ–≤–∏–π **Access Token** —ñ –Ω–æ–≤–∏–π **Refresh Token**.
   - –°—Ç–∞—Ä–∏–π **Refresh Token** –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è —ñ–∑ –ë–î.

---

## üì¶ **1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –≤ Oracle**

```sql
CREATE TABLE refresh_tokens (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username VARCHAR2(50) NOT NULL,
  department VARCHAR2(100),
  position VARCHAR2(100),
  token_value VARCHAR2(500) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  expires_at TIMESTAMP
);
```

---

## üõ† **2. –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—ñ–∫–∏ —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ (API)**

### üîí **JWT-—É—Ç–∏–ª—ñ—Ç–∏ (utils/jwt.js)**

```javascript
import jwt from 'jsonwebtoken';

const ACCESS_TOKEN_SECRET = 'your-access-token-secret';
const REFRESH_TOKEN_SECRET = 'your-refresh-token-secret';

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Access Token (–∂–∏—Ç—Ç—è - 5 —Ö–≤)
export const generateAccessToken = (payload) => {
  return jwt.sign(payload, ACCESS_TOKEN_SECRET, { expiresIn: '5m' });
};

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Refresh Token (–∂–∏—Ç—Ç—è - 7 –¥–Ω—ñ–≤)
export const generateRefreshToken = (payload) => {
  return jwt.sign(payload, REFRESH_TOKEN_SECRET, { expiresIn: '7d' });
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Access Token
export const verifyAccessToken = (token) => {
  try {
    return jwt.verify(token, ACCESS_TOKEN_SECRET);
  } catch (err) {
    return null;
  }
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Refresh Token
export const verifyRefreshToken = (token) => {
  try {
    return jwt.verify(token, REFRESH_TOKEN_SECRET);
  } catch (err) {
    return null;
  }
};
```

---

### üîë **–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (controllers/authController.js)**

```javascript
import { testUserConnection, executeQuery } from '../db/oracle.js';
import { generateAccessToken, generateRefreshToken, verifyRefreshToken } from '../utils/jwt.js';

export async function login(req, res) {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json({ status: 'error', error: '–õ–æ–≥—ñ–Ω —ñ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ' });
  }

  const connectionResult = await testUserConnection(username, password);

  if (!connectionResult.success) {
    return res.status(401).json({ status: 'error', error: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å' });
  }

  try {
    const payload = { username, roles: ['auth', 'scheme_user'] };

    const accessToken = generateAccessToken(payload);
    const refreshToken = generateRefreshToken(payload);

    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π Refresh Token —ñ –∑–∞–ø–∏—Å—É—î–º–æ –Ω–æ–≤–∏–π
    await executeQuery(`DELETE FROM refresh_tokens WHERE username = :username`, [username]);

    await executeQuery(`
      INSERT INTO refresh_tokens (username, token_value, expires_at)
      VALUES (:username, :token_value, SYSTIMESTAMP + INTERVAL '7' DAY)
    `, [username, refreshToken]);

    res.status(200).json({
      status: 'validated',
      accessToken,
      refreshToken
    });
  } catch (error) {
    res.status(500).json({ status: 'error', error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ —Å–∏—Å—Ç–µ–º—É' });
  }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è Access Token –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Refresh Token
export async function refreshAccessToken(req, res) {
  const { refreshToken } = req.body;

  if (!refreshToken) {
    return res.status(400).json({ status: 'error', error: 'Refresh Token –≤—ñ–¥—Å—É—Ç–Ω—ñ–π' });
  }

  const decoded = verifyRefreshToken(refreshToken);

  if (!decoded) {
    return res.status(403).json({ status: 'error', error: '–ù–µ–¥—ñ–π—Å–Ω–∏–π Refresh Token' });
  }

  const userQuery = `SELECT * FROM refresh_tokens WHERE username = :username AND token_value = :token`;
  const result = await executeQuery(userQuery, [decoded.username, refreshToken]);

  if (result.length === 0) {
    return res.status(403).json({ status: 'error', error: 'Refresh Token –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
  }

  const newAccessToken = generateAccessToken({ username: decoded.username, roles: decoded.roles });
  const newRefreshToken = generateRefreshToken({ username: decoded.username, roles: decoded.roles });

  // –û–Ω–æ–≤–ª—é—î–º–æ Refresh Token –≤ –ë–î
  await executeQuery(`UPDATE refresh_tokens SET token_value = :token WHERE username = :username`, [newRefreshToken, decoded.username]);

  res.status(200).json({ accessToken: newAccessToken, refreshToken: newRefreshToken });
}
```

---

## üîë **3. Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Access Token**

```javascript
import { verifyAccessToken } from '../utils/jwt.js';

export const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–¥—ñ–π—Å–Ω–∏–π' });
  }

  const token = authHeader.split(' ')[1];
  const decoded = verifyAccessToken(token);

  if (!decoded) {
    return res.status(403).json({ error: '–ù–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω' });
  }

  req.user = decoded;
  next();
};
```

---

## üåê **4. –ù–∞ Frontend (Next.js)**

### üîÑ **–û–Ω–æ–≤–ª–µ–Ω–Ω—è Access Token**

```javascript
const refreshAccessToken = async () => {
  const refreshToken = localStorage.getItem('refreshToken');

  if (!refreshToken) {
    console.error('Refresh Token –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
    return;
  }

  try {
    const res = await fetch('http://localhost:5000/api/refresh-token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ refreshToken }),
    });

    const data = await res.json();

    if (res.ok) {
      localStorage.setItem('accessToken', data.accessToken);
      localStorage.setItem('refreshToken', data.refreshToken);
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:', error);
  }
};
```

---

## ‚úÖ **–ü–µ—Ä–µ–≤–∞–≥–∏ –º–æ–¥–µ–ª—ñ Access + Refresh Token**

1. **–ë–µ–∑–ø–µ—á–Ω–∏–π –¥–æ—Å—Ç—É–ø** –¥–æ API –∑–∞–≤–¥—è–∫–∏ –∫–æ—Ä–æ—Ç–∫–æ—á–∞—Å–Ω–æ–º—É **Access Token**.
2. **–ú—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è —Ä–∏–∑–∏–∫—ñ–≤** –ø—Ä–∏ –≤–∏–∫—Ä–∞–¥–µ–Ω–Ω—ñ —Ç–æ–∫–µ–Ω–∞ (–æ–±–º–µ–∂–µ–Ω–∏–π —á–∞—Å –¥—ñ—ó).
3. **–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–µ—Å—ñ—è–º–∏** ‚Äî **Refresh Token** –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –ë–î —ñ –ª–µ–≥–∫–æ –∫–µ—Ä—É—î—Ç—å—Å—è.

---

## ‚ö° **–©–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ?**

1. **–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ Refresh Token —É Redis** –¥–ª—è –∫—Ä–∞—â–æ—ó —à–≤–∏–¥–∫–æ–¥—ñ—ó.  
2. **–î–æ–¥–∞–≤–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å–ø—Ä–æ–± –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤**.  
3. **–î–æ–¥–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤** –ø—Ä–∏ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –¥—ñ—è—Ö.

–¢–∞–∫–∏–π –ø—ñ–¥—Ö—ñ–¥ —î –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º —ñ –±–µ–∑–ø–µ—á–Ω–∏–º –¥–ª—è –≤–∞—à–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É —Å—Ö–µ–º.