Ось приклад реалізації цього функціоналу:

### **1. API-роут для аутентифікації**

Створимо API-роут у Next.js для обробки запиту логіна та генерації JWT токена.

```javascript
// pages/api/auth/login.js
import jwt from "jsonwebtoken";
import cookie from "cookie";

const SECRET_KEY = "your_secret_key"; // Заміни на секретний ключ для токена

export default async function handler(req, res) {
  if (req.method === "POST") {
    const { username, password } = req.body;

    // Виконуємо запит до сервера аутентифікації
    try {
      const response = await fetch("https://your-api-server.com/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      });

      if (!response.ok) {
        return res.status(401).json({ error: "Invalid credentials" });
      }

      const userData = await response.json(); // Наприклад, { id, username, role, ... }

      // Генеруємо JWT токен
      const token = jwt.sign(
        { id: userData.id, username: userData.username, role: userData.role },
        SECRET_KEY,
        { expiresIn: "1h" }
      );

      // Встановлюємо токен в HTTP Only cookie
      res.setHeader(
        "Set-Cookie",
        cookie.serialize("accessToken", token, {
          httpOnly: true,
          secure: process.env.NODE_ENV === "production", // Використовуй secure в продакшні
          sameSite: "strict",
          path: "/", // Доступно на всьому сайті
          maxAge: 3600, // 1 година
        })
      );

      // Відповідаємо клієнту
      return res.status(200).json({ status: "ok" });
    } catch (error) {
      console.error("Login error:", error);
      return res.status(500).json({ error: "Internal server error" });
    }
  } else {
    res.setHeader("Allow", ["POST"]);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}
```

---

### **2. Форма логіна на Next.js**

Форма на сторінці логіну виконує запит до API-роуту.

```javascript
// pages/login.js
import { useState } from "react";
import { useRouter } from "next/router";

export default function LoginPage() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState(null);
  const router = useRouter();

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const res = await fetch("/api/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      });

      if (res.ok) {
        // Успішний логін
        router.push("/"); // Перенаправляємо на головну сторінку
      } else {
        const data = await res.json();
        setError(data.error || "Something went wrong");
      }
    } catch (err) {
      console.error("Login error:", err);
      setError("Network error");
    }
  };

  return (
    <div>
      <h1>Login</h1>
      {error && <p style={{ color: "red" }}>{error}</p>}
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="username">Username:</label>
          <input
            type="text"
            id="username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
        </div>
        <div>
          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </div>
        <button type="submit">Login</button>
      </form>
    </div>
  );
}
```

---

### **3. Перевірка користувача на інших сторінках**

Для перевірки токена (JWT) і доступу до даних користувача можна використати `getServerSideProps`.

```javascript
// pages/index.js
import jwt from "jsonwebtoken";

const SECRET_KEY = "your_secret_key"; // Має збігатися з ключем в API

export async function getServerSideProps({ req }) {
  const { accessToken } = req.cookies;

  if (!accessToken) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  try {
    // Перевіряємо токен
    const decoded = jwt.verify(accessToken, SECRET_KEY);

    return {
      props: {
        user: decoded, // Передаємо дані користувача на сторінку
      },
    };
  } catch (err) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }
}

export default function HomePage({ user }) {
  return (
    <div>
      <h1>Welcome, {user.username}!</h1>
    </div>
  );
}
```

---

### **4. Видалення токена (Logout)**

Додай API-роут для видалення cookie.

```javascript
// pages/api/auth/logout.js
import cookie from "cookie";

export default function handler(req, res) {
  if (req.method === "POST") {
    res.setHeader(
      "Set-Cookie",
      cookie.serialize("accessToken", "", {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "strict",
        path: "/",
        expires: new Date(0), // Видаляємо cookie
      })
    );
    return res.status(200).json({ status: "logged out" });
  } else {
    res.setHeader("Allow", ["POST"]);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}
```

Кнопка logout:

```javascript
// components/LogoutButton.js
import { useRouter } from "next/router";

export default function LogoutButton() {
  const router = useRouter();

  const handleLogout = async () => {
    await fetch("/api/auth/logout", {
      method: "POST",
    });
    router.push("/login"); // Перенаправляємо на сторінку логіну
  };

  return <button onClick={handleLogout}>Logout</button>;
}
```

---

### **Підсумок**

Ця реалізація дозволяє:
- Безпечно зберігати JWT токени в HTTP Only cookies.
- Перевіряти аутентифікацію через серверні функції (`getServerSideProps`).
- Забезпечувати легкий доступ до даних користувача через контекст або передані пропси.