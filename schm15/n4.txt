Ось як можна реалізувати оновлення токенів (refresh) за допомогою проксі-функції на рівні Next.js і з використанням `middleware` для автоматизації перевірки та оновлення:

---

### **1. Проксі-функція для поновлення токенів**

Ця функція виконує запит до API сервера, який відповідає за оновлення токенів, і встановлює нові значення токенів у `HTTP Only` cookies.

```javascript
// pages/api/auth/refresh.js
import cookie from "cookie";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    res.setHeader("Allow", ["POST"]);
    return res.status(405).end(`Method ${req.method} Not Allowed`);
  }

  try {
    // Виконуємо запит до стороннього API для поновлення токенів
    const response = await fetch("https://your-api-server.com/auth/refresh", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Cookie: req.headers.cookie, // Передаємо cookies на сервер
      },
    });

    if (!response.ok) {
      return res.status(401).json({ error: "Failed to refresh tokens" });
    }

    // Отримуємо нові токени з відповіді API
    const { accessToken, refreshToken } = await response.json();

    // Встановлюємо нові токени в cookies
    res.setHeader("Set-Cookie", [
      cookie.serialize("accessToken", accessToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "strict",
        path: "/",
        maxAge: 60 * 60, // 1 година
      }),
      cookie.serialize("refreshToken", refreshToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "strict",
        path: "/",
        maxAge: 60 * 60 * 24 * 7, // 7 днів
      }),
    ]);

    return res.status(200).json({ success: true });
  } catch (err) {
    console.error("Refresh token error:", err);
    return res.status(500).json({ error: "Internal server error" });
  }
}
```

---

### **2. Використання функції поновлення на клієнті**

На клієнті можна викликати цю функцію через `fetch` у разі закінчення терміну дії `accessToken`.

```javascript
// utils/auth.js
export const refreshTokens = async () => {
  try {
    const res = await fetch("/api/auth/refresh", {
      method: "POST",
    });

    if (!res.ok) {
      throw new Error("Failed to refresh tokens");
    }

    const data = await res.json();
    return data.success;
  } catch (err) {
    console.error("Error refreshing tokens:", err);
    return false;
  }
};
```

---

### **3. Автоматичне оновлення токенів у `middleware`**

Щоб автоматично оновлювати токени під час кожного запиту, можна використати `middleware.js`.

```javascript
// middleware.js
import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";

const SECRET_KEY = "your_secret_key";

export async function middleware(req) {
  const accessToken = req.cookies.accessToken;

  if (!accessToken) {
    // Якщо accessToken відсутній, перевіряємо наявність refreshToken
    const refreshToken = req.cookies.refreshToken;

    if (refreshToken) {
      try {
        // Виконуємо запит для поновлення токенів
        const response = await fetch(`${req.nextUrl.origin}/api/auth/refresh`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Cookie: req.headers.get("cookie"),
          },
        });

        if (response.ok) {
          // Продовжуємо обробку запиту
          return NextResponse.next();
        }
      } catch (err) {
        console.error("Failed to refresh tokens:", err);
      }
    }

    // Якщо ні accessToken, ні refreshToken немає або не вдалося поновити — перенаправляємо на логін
    return NextResponse.redirect(new URL("/login", req.url));
  }

  // Перевіряємо валідність accessToken
  try {
    jwt.verify(accessToken, SECRET_KEY);
    return NextResponse.next(); // Продовжуємо обробку
  } catch (err) {
    console.error("Invalid access token:", err);
    return NextResponse.redirect(new URL("/login", req.url));
  }
}

export const config = {
  matcher: ["/protected-page", "/another-protected-page"], // Захищені маршрути
};
```

---

### **4. Використання у клієнтському коді**

Клієнт може використовувати функцію `refreshTokens` для ручного поновлення токенів у випадках, коли це необхідно (наприклад, через інтерцептори в Axios або під час ініціалізації контексту).

```javascript
// utils/api.js
import axios from "axios";
import { refreshTokens } from "./auth";

// Створюємо інтерцептор для автоматичного поновлення токенів
axios.interceptors.response.use(
  (response) => response, // Якщо відповідь успішна, просто повертаємо її
  async (error) => {
    const originalRequest = error.config;

    // Якщо отримали 401 і це не повторний запит
    if (error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      const success = await refreshTokens();
      if (success) {
        return axios(originalRequest); // Повторюємо запит після поновлення токенів
      }
    }

    return Promise.reject(error);
  }
);
```

---

### **5. Підсумок**

- **API-роут `/api/auth/refresh`** виконує запит до стороннього API для поновлення токенів і встановлює їх у `HTTP Only` cookies.
- **`middleware.js`** автоматично перевіряє валідність `accessToken` і, якщо потрібно, поновлює його через `/api/auth/refresh`.
- На клієнті можна використовувати інтерцептори (наприклад, в Axios), щоб автоматично обробляти 401 помилки і викликати поновлення токенів.

Це забезпечує безперервний досвід для користувача, мінімізуючи кількість випадків, коли йому потрібно заново логінитися.