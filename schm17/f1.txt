–û—Å—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º `api/auth/login`, `middleware.js`, —Ç–∞ `api/auth/refreshtoken`.

---

## üîπ **üìå 1. –û–Ω–æ–≤–ª–µ–Ω–∏–π `api/auth/login.js`**
- –í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç –Ω–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π API `/login`.
- –û—Ç—Ä–∏–º—É—î `accessToken`, `refreshToken`, `userData`, `refreshExpireIn`.
- –ì–µ–Ω–µ—Ä—É—î **–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–æ–∫–µ–Ω–∏** `accessTokenEtls` —ñ `refreshTokenEtls` –∑ –≤–ª–∞—Å–Ω–∏–º `SECRET_KEY_ETLS`.
- –ó–±–µ—Ä—ñ–≥–∞—î –≤—Å—ñ —Ç–æ–∫–µ–Ω–∏ —É `HTTP-only` cookies.

```javascript
import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";

const SECRET_KEY_ETLS = process.env.SECRET_KEY_ETLS;
const EXPIRES_IN_ACCESS_ETLS = "15m"; // –ß–∞—Å –¥—ñ—ó accessTokenEtls
const EXPIRES_IN_REFRESH_ETLS = "7d"; // –ß–∞—Å –¥—ñ—ó refreshTokenEtls

export async function POST(req) {
  try {
    const { email, password } = await req.json();

    // –ó–∞–ø–∏—Ç –Ω–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
    const apiResponse = await fetch(`${process.env.EXTERNAL_API_URL}/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, password }),
    });

    if (!apiResponse.ok) {
      return NextResponse.json({ error: "Invalid credentials" }, { status: 401 });
    }

    const { accessToken, refreshToken, userData, refreshExpireIn } = await apiResponse.json();

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö —Ç–æ–∫–µ–Ω—ñ–≤
    const accessTokenEtls = jwt.sign({ userId: userData.id, role: userData.role }, SECRET_KEY_ETLS, {
      expiresIn: EXPIRES_IN_ACCESS_ETLS,
    });

    const refreshTokenEtls = jwt.sign({ userId: userData.id }, SECRET_KEY_ETLS, {
      expiresIn: EXPIRES_IN_REFRESH_ETLS,
    });

    // –§–æ—Ä–º—É—î–º–æ response –∑ cookies
    const response = NextResponse.json({ message: "Login successful", userData });

    response.headers.set(
      "Set-Cookie",
      [
        `accessToken=${accessToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshToken=${refreshToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `accessTokenEtls=${accessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshTokenEtls=${refreshTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return response;
  } catch (error) {
    console.error("Login error:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
```

---

## üîπ **üìå 2. Middleware: `middleware.js`**
- –ß–∏—Ç–∞—î `cookies`.
- –ü–µ—Ä–µ–≤—ñ—Ä—è—î `accessTokenEtls`. –Ø–∫—â–æ –≤—ñ–Ω –¥—ñ–π—Å–Ω–∏–π ‚Üí `next()`.
- –Ø–∫—â–æ `accessTokenEtls` –Ω–µ–¥—ñ–π—Å–Ω–∏–π, –ø–µ—Ä–µ–≤—ñ—Ä—è—î `refreshTokenEtls`.
- –Ø–∫—â–æ `refreshTokenEtls` —Ç–µ–∂ –Ω–µ–¥—ñ–π—Å–Ω–∏–π ‚Üí Logout —ñ —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ `/login`.
- –Ø–∫—â–æ `refreshTokenEtls` –¥—ñ–π—Å–Ω–∏–π ‚Üí –í–∏–∫–ª–∏–∫–∞—î `/api/auth/refreshtoken` –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤.

```javascript
import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";

const SECRET_KEY_ETLS = process.env.SECRET_KEY_ETLS;

export async function middleware(req) {
  const cookies = req.cookies;
  const accessTokenEtls = cookies.get("accessTokenEtls")?.value;
  const refreshTokenEtls = cookies.get("refreshTokenEtls")?.value;

  // –Ø–∫—â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ ‚Üí —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ /login
  if (!accessTokenEtls && !refreshTokenEtls) {
    return NextResponse.redirect(new URL("/login", req.url));
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ accessTokenEtls
  try {
    jwt.verify(accessTokenEtls, SECRET_KEY_ETLS);
    return NextResponse.next();
  } catch (error) {
    console.warn("accessTokenEtls invalid, checking refreshTokenEtls...");
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ refreshTokenEtls
  try {
    jwt.verify(refreshTokenEtls, SECRET_KEY_ETLS);

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ `/api/auth/refreshtoken` –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
    const refreshResponse = await fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
      method: "POST",
      credentials: "include",
      headers: {
        "Content-Type": "application/json",
        Cookie: req.headers.get("cookie") || "",
      },
    });

    if (!refreshResponse.ok) {
      throw new Error("Failed to refresh tokens");
    }

    return NextResponse.next();
  } catch (error) {
    console.error("refreshTokenEtls invalid:", error);

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å—ñ—Ö cookies —ñ —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ /login
    return NextResponse.redirect(new URL("/login", req.url), {
      headers: {
        "Set-Cookie": [
          "accessTokenEtls=; HttpOnly; Path=/; Max-Age=0",
          "refreshTokenEtls=; HttpOnly; Path=/; Max-Age=0",
          "accessToken=; HttpOnly; Path=/; Max-Age=0",
          "refreshToken=; HttpOnly; Path=/; Max-Age=0",
        ].join(", "),
      },
    });
  }
}

export const config = {
  matcher: ["/dashboard", "/profile"], // –ó–∞—Ö–∏—â–µ–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
};
```

---

## üîπ **üìå 3. API `/api/auth/refreshtoken.js`**
- –ü–µ—Ä–µ–≤—ñ—Ä—è—î `refreshTokenEtls`.
- –Ø–∫—â–æ –≤—ñ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π ‚Üí –ì–µ–Ω–µ—Ä—É—î **–Ω–æ–≤—ñ `accessTokenEtls` —ñ `refreshTokenEtls`**.
- –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ –≤ `HTTP-only` cookies.
- –ü–æ–≤–µ—Ä—Ç–∞—î –æ–Ω–æ–≤–ª–µ–Ω—ñ —Ç–æ–∫–µ–Ω–∏.

```javascript
import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";

const SECRET_KEY_ETLS = process.env.SECRET_KEY_ETLS;
const EXPIRES_IN_ACCESS_ETLS = "15m";
const EXPIRES_IN_REFRESH_ETLS = "7d";

export async function POST(req) {
  try {
    const cookies = req.cookies;
    const refreshTokenEtls = cookies.get("refreshTokenEtls")?.value;

    if (!refreshTokenEtls) {
      return NextResponse.json({ error: "No refresh token provided" }, { status: 401 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ refreshTokenEtls
    const decoded = jwt.verify(refreshTokenEtls, SECRET_KEY_ETLS);
    const newPayload = { userId: decoded.userId };

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏
    const newAccessTokenEtls = jwt.sign(newPayload, SECRET_KEY_ETLS, { expiresIn: EXPIRES_IN_ACCESS_ETLS });
    const newRefreshTokenEtls = jwt.sign(newPayload, SECRET_KEY_ETLS, { expiresIn: EXPIRES_IN_REFRESH_ETLS });

    // –§–æ—Ä–º—É—î–º–æ response –∑ –Ω–æ–≤–∏–º–∏ cookies
    const response = NextResponse.json({ message: "Tokens refreshed" });

    response.headers.set(
      "Set-Cookie",
      [
        `accessTokenEtls=${newAccessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshTokenEtls=${newRefreshTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return response;
  } catch (error) {
    console.error("Failed to refresh tokens:", error);
    return NextResponse.json({ error: "Invalid refresh token" }, { status: 401 });
  }
}
```

---

## ‚úÖ **üìå –©–æ –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏?**
‚úî **Next.js API `/api/auth/login` —Ç–µ–ø–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î 4 —Ç–æ–∫–µ–Ω–∏ (`accessToken`, `refreshToken`, `accessTokenEtls`, `refreshTokenEtls`)**  
‚úî **Middleware –ø–µ—Ä–µ–≤—ñ—Ä—è—î `accessTokenEtls`, –∞ –ø—Ä–∏ –π–æ–≥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—ñ ‚Äì `refreshTokenEtls`**  
‚úî **–Ø–∫—â–æ `refreshTokenEtls` —Ç–µ–∂ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è ‚Üí –ø–æ–≤–Ω–∏–π logout (`/login`)**  
‚úî **–Ø–∫—â–æ `refreshTokenEtls` —â–µ –∞–∫—Ç–∏–≤–Ω–∏–π ‚Üí –≥–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ —á–µ—Ä–µ–∑ `/api/auth/refreshtoken`**  
‚úî **–í—Å—ñ —Ç–æ–∫–µ–Ω–∏ –∑–∞—Ö–∏—â–µ–Ω—ñ —á–µ—Ä–µ–∑ `HTTP-only cookies`**

üîπ **–¢–µ–ø–µ—Ä —Ç–≤–æ—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–ø–µ—á–Ω–∞ —ñ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞! üöÄ**