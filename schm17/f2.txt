–û—Å—å –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –¥–≤–∞ —Ä—ñ–∑–Ω—ñ —Å–µ–∫—Ä–µ—Ç–Ω—ñ –∫–ª—é—á—ñ `ETLS_ACCESS` —Ç–∞ `ETLS_REFRESH` –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó `accessTokenEtls` —ñ `refreshTokenEtls`.  

---

## üîπ **üìå 1. –û–Ω–æ–≤–ª–µ–Ω–∏–π `api/auth/login.js`**
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î `ETLS_ACCESS` –¥–ª—è `accessTokenEtls` —ñ `ETLS_REFRESH` –¥–ª—è `refreshTokenEtls`.

```javascript
import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";

const ETLS_ACCESS = process.env.ETLS_ACCESS;
const ETLS_REFRESH = process.env.ETLS_REFRESH;
const EXPIRES_IN_ACCESS_ETLS = "15m"; // –ß–∞—Å –∂–∏—Ç—Ç—è accessTokenEtls
const EXPIRES_IN_REFRESH_ETLS = "7d"; // –ß–∞—Å –∂–∏—Ç—Ç—è refreshTokenEtls

export async function POST(req) {
  try {
    const { email, password } = await req.json();

    // –ó–∞–ø–∏—Ç –¥–æ —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–≥–æ API
    const apiResponse = await fetch(`${process.env.EXTERNAL_API_URL}/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, password }),
    });

    if (!apiResponse.ok) {
      return NextResponse.json({ error: "Invalid credentials" }, { status: 401 });
    }

    const { accessToken, refreshToken, userData, refreshExpireIn } = await apiResponse.json();

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö —Ç–æ–∫–µ–Ω—ñ–≤
    const accessTokenEtls = jwt.sign({ userId: userData.id, role: userData.role }, ETLS_ACCESS, {
      expiresIn: EXPIRES_IN_ACCESS_ETLS,
    });

    const refreshTokenEtls = jwt.sign({ userId: userData.id }, ETLS_REFRESH, {
      expiresIn: EXPIRES_IN_REFRESH_ETLS,
    });

    // –§–æ—Ä–º—É—î–º–æ response –∑ cookies
    const response = NextResponse.json({ message: "Login successful", userData });

    response.headers.set(
      "Set-Cookie",
      [
        `accessToken=${accessToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshToken=${refreshToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `accessTokenEtls=${accessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshTokenEtls=${refreshTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return response;
  } catch (error) {
    console.error("Login error:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
```

---

## üîπ **üìå 2. Middleware: `middleware.js`**
- –ü–µ—Ä–µ–≤—ñ—Ä—è—î `accessTokenEtls` (`ETLS_ACCESS`).
- –Ø–∫—â–æ `accessTokenEtls` –Ω–µ–¥—ñ–π—Å–Ω–∏–π, –ø–µ—Ä–µ–≤—ñ—Ä—è—î `refreshTokenEtls` (`ETLS_REFRESH`).
- –Ø–∫—â–æ `refreshTokenEtls` —â–µ –≤–∞–ª—ñ–¥–Ω–∏–π, –≤–∏–∫–ª–∏–∫–∞—î `/api/auth/refreshtoken` –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤.

```javascript
import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";

const ETLS_ACCESS = process.env.ETLS_ACCESS;
const ETLS_REFRESH = process.env.ETLS_REFRESH;

export async function middleware(req) {
  const cookies = req.cookies;
  const accessTokenEtls = cookies.get("accessTokenEtls")?.value;
  const refreshTokenEtls = cookies.get("refreshTokenEtls")?.value;

  // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ–∫–µ–Ω—ñ–≤ ‚Üí —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ /login
  if (!accessTokenEtls && !refreshTokenEtls) {
    return NextResponse.redirect(new URL("/login", req.url));
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ accessTokenEtls
  try {
    jwt.verify(accessTokenEtls, ETLS_ACCESS);
    return NextResponse.next();
  } catch (error) {
    console.warn("accessTokenEtls invalid, checking refreshTokenEtls...");
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ refreshTokenEtls
  try {
    jwt.verify(refreshTokenEtls, ETLS_REFRESH);

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ `/api/auth/refreshtoken` –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
    const refreshResponse = await fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
      method: "POST",
      credentials: "include",
      headers: {
        "Content-Type": "application/json",
        Cookie: req.headers.get("cookie") || "",
      },
    });

    if (!refreshResponse.ok) {
      throw new Error("Failed to refresh tokens");
    }

    return NextResponse.next();
  } catch (error) {
    console.error("refreshTokenEtls invalid:", error);

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å—ñ—Ö cookies —ñ —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ /login
    return NextResponse.redirect(new URL("/login", req.url), {
      headers: {
        "Set-Cookie": [
          "accessTokenEtls=; HttpOnly; Path=/; Max-Age=0",
          "refreshTokenEtls=; HttpOnly; Path=/; Max-Age=0",
          "accessToken=; HttpOnly; Path=/; Max-Age=0",
          "refreshToken=; HttpOnly; Path=/; Max-Age=0",
        ].join(", "),
      },
    });
  }
}

export const config = {
  matcher: ["/dashboard", "/profile"], // –ó–∞—Ö–∏—â–µ–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
};
```

---

## üîπ **üìå 3. API `/api/auth/refreshtoken.js`**
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î `ETLS_REFRESH` –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ `refreshTokenEtls`.
- –ì–µ–Ω–µ—Ä—É—î –Ω–æ–≤–∏–π `accessTokenEtls` (`ETLS_ACCESS`) —Ç–∞ `refreshTokenEtls` (`ETLS_REFRESH`).

```javascript
import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";

const ETLS_ACCESS = process.env.ETLS_ACCESS;
const ETLS_REFRESH = process.env.ETLS_REFRESH;
const EXPIRES_IN_ACCESS_ETLS = "15m";
const EXPIRES_IN_REFRESH_ETLS = "7d";

export async function POST(req) {
  try {
    const cookies = req.cookies;
    const refreshTokenEtls = cookies.get("refreshTokenEtls")?.value;

    if (!refreshTokenEtls) {
      return NextResponse.json({ error: "No refresh token provided" }, { status: 401 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ refreshTokenEtls
    const decoded = jwt.verify(refreshTokenEtls, ETLS_REFRESH);
    const newPayload = { userId: decoded.userId };

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏
    const newAccessTokenEtls = jwt.sign(newPayload, ETLS_ACCESS, { expiresIn: EXPIRES_IN_ACCESS_ETLS });
    const newRefreshTokenEtls = jwt.sign(newPayload, ETLS_REFRESH, { expiresIn: EXPIRES_IN_REFRESH_ETLS });

    // –§–æ—Ä–º—É—î–º–æ response –∑ –Ω–æ–≤–∏–º–∏ cookies
    const response = NextResponse.json({ message: "Tokens refreshed" });

    response.headers.set(
      "Set-Cookie",
      [
        `accessTokenEtls=${newAccessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshTokenEtls=${newRefreshTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return response;
  } catch (error) {
    console.error("Failed to refresh tokens:", error);
    return NextResponse.json({ error: "Invalid refresh token" }, { status: 401 });
  }
}
```

---

## ‚úÖ **üìå –©–æ –æ–Ω–æ–≤–ª–µ–Ω–æ**
‚úî **–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ä—ñ–∑–Ω—ñ —Å–µ–∫—Ä–µ—Ç–Ω—ñ –∫–ª—é—á—ñ**:  
  - `ETLS_ACCESS` –¥–ª—è `accessTokenEtls`  
  - `ETLS_REFRESH` –¥–ª—è `refreshTokenEtls`  

‚úî **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤**:  
  - –Ø–∫—â–æ `accessTokenEtls` –≤–∞–ª—ñ–¥–Ω–∏–π ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Ç  
  - –Ø–∫—â–æ –Ω—ñ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ `refreshTokenEtls`  
  - –Ø–∫—â–æ `refreshTokenEtls` –≤–∞–ª—ñ–¥–Ω–∏–π ‚Üí –æ–Ω–æ–≤–ª—é—î–º–æ –æ–±–∏–¥–≤–∞ —Ç–æ–∫–µ–Ω–∏  
  - –Ø–∫—â–æ `refreshTokenEtls` —Ç–µ–∂ –Ω–µ–¥—ñ–π—Å–Ω–∏–π ‚Üí **logout** —Ç–∞ —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ `/login`  

üîπ **–ó–∞—Ö–∏—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π, —ñ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ! üöÄ**