–û—Å—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è `customFetch(url, options)`, —è–∫–∞ –±—É–¥–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ `accessToken` –∑ `HTTP-only cookies`, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –π–æ–≥–æ –ø—Ä–∏ 401 –ø–æ–º–∏–ª—Ü—ñ —Ç–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç.

---

## üîπ **üìå 1. –°—Ç–≤–æ—Ä—é—î–º–æ `/api/getdata.js` –∑ `customFetch`**
```javascript
import { NextResponse } from "next/server";
import { parse } from "cookie";
import jwt from "jsonwebtoken";

const REMOTE_API = process.env.REMOTE_API;

export async function POST(req) {
  try {
    const { url, options } = await req.json();
    const cookies = parse(req.headers.get("cookie") || "");

    let accessToken = cookies.accessToken;
    const refreshToken = cookies.refreshToken;

    // –Ø–∫—â–æ –Ω–µ–º–∞—î accessToken ‚Äì –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ refreshToken
    if (!accessToken) {
      console.warn("No access token, attempting refresh...");
      const refreshedTokens = await refreshAccessToken(refreshToken);
      if (!refreshedTokens) return redirectToLogin();
      accessToken = refreshedTokens.accessToken;
    }

    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ—Ç–æ—á–Ω–∏–º accessToken
    let response = await fetch(`${REMOTE_API}${url}`, {
      ...options,
      headers: {
        ...options.headers,
        Authorization: `Bearer ${accessToken}`,
      },
    });

    // –Ø–∫—â–æ accessToken –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π (401), –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –ø–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
    if (response.status === 401) {
      console.warn("Access token expired, refreshing...");

      const refreshedTokens = await refreshAccessToken(refreshToken);
      if (!refreshedTokens) return redirectToLogin();

      // –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç –∑ –Ω–æ–≤–∏–º accessToken
      response = await fetch(`${REMOTE_API}${url}`, {
        ...options,
        headers: {
          ...options.headers,
          Authorization: `Bearer ${refreshedTokens.accessToken}`,
        },
      });

      if (!response.ok) throw new Error(`Request failed after token refresh: ${response.statusText}`);
    }

    return NextResponse.json(await response.json());
  } catch (error) {
    console.error("Error in customFetch:", error);
    return NextResponse.json({ error: "Request failed" }, { status: 500 });
  }
}

// üîπ –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
async function refreshAccessToken(refreshToken) {
  try {
    if (!refreshToken) {
      console.warn("No refresh token available");
      return null;
    }

    const refreshResponse = await fetch(`${REMOTE_API}/refreshtoken`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ refreshToken }),
    });

    if (!refreshResponse.ok) {
      console.error("Failed to refresh token");
      return null;
    }

    const { accessToken, refreshToken: newRefreshToken } = await refreshResponse.json();

    // –§–æ—Ä–º—É—î–º–æ Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const response = NextResponse.json({ message: "Tokens refreshed" });
    response.headers.set(
      "Set-Cookie",
      [
        `accessToken=${accessToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshToken=${newRefreshToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return { accessToken, refreshToken: newRefreshToken };
  } catch (error) {
    console.error("Error refreshing tokens:", error);
    return null;
  }
}

// üîπ –§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥—ñ—Ä–µ–∫—Ç—É –Ω–∞ –ª–æ–≥—ñ–Ω
function redirectToLogin() {
  return NextResponse.redirect(new URL("/login", req.url), {
    headers: {
      "Set-Cookie": [
        "accessToken=; HttpOnly; Path=/; Max-Age=0",
        "refreshToken=; HttpOnly; Path=/; Max-Age=0",
      ].join(", "),
    },
  });
}
```

---

## ‚úÖ **üìå –©–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ?**
‚úî **–î–æ–¥–∞—î `accessToken` –≤ `Authorization: Bearer ...`** –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º.  
‚úî **–Ø–∫—â–æ `accessToken` –ø–æ–≤–µ—Ä—Ç–∞—î 401**, –≤–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç `/refreshtoken` –Ω–∞ `REMOTE_API`.  
‚úî **–Ø–∫—â–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ —É `HTTP-only cookies`.**  
‚úî **–ü–æ–≤—Ç–æ—Ä—é—î –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –∑ –Ω–æ–≤–∏–º `accessToken`.**  
‚úî **–Ø–∫—â–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, –≤–∏–¥–∞–ª—è—î –≤—Å—ñ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ `/login`.**  

üîπ **–¢–µ–ø–µ—Ä Next.js API –±–µ–∑–ø–µ—á–Ω–æ –ø—Ä–∞—Ü—é—î –∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ–º API, –æ–Ω–æ–≤–ª—é—é—á–∏ —Ç–æ–∫–µ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ! üöÄ**