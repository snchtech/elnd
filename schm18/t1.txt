### ‚úÖ **–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ `jose` –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ JWT —É Next.js**
`jsonwebtoken` **–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –¥–ª—è Next.js**, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –ø–æ—Ç—Ä–µ–±—É—î Node.js API, –∞ –≤ Next.js API-—Ä–æ—É—Ç–∏ –º–æ–∂—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ `Edge Runtime`.  
`jose` ‚Äì —Ü–µ **–ª–µ–≥–∫–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ JWT**, —è–∫–∞ –ø—Ä–∞—Ü—é—î **–Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ —Ç–∞ –≤ Edge Runtime**.

---

## üîπ **üìå 1. –û–Ω–æ–≤–ª–µ–Ω–∏–π `api/auth/login.js` (–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ `jose`)**
```javascript
import { NextResponse } from "next/server";
import { SignJWT } from "jose";

const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);
const EXPIRES_IN_ACCESS_ETLS = 15 * 60; // 15 —Ö–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö
const EXPIRES_IN_REFRESH_ETLS = 7 * 24 * 60 * 60; // 7 –¥–Ω—ñ–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö

export async function POST(req) {
  try {
    const { email, password } = await req.json();

    // –ó–∞–ø–∏—Ç –¥–æ —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–≥–æ API
    const apiResponse = await fetch(`${process.env.EXTERNAL_API_URL}/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, password }),
    });

    if (!apiResponse.ok) {
      return NextResponse.json({ error: "Invalid credentials" }, { status: 401 });
    }

    const { accessToken, refreshToken, userData } = await apiResponse.json();

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è `accessTokenEtls`
    const accessTokenEtls = await new SignJWT({ userId: userData.id, role: userData.role })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è `refreshTokenEtls`
    const refreshTokenEtls = await new SignJWT({ userId: userData.id })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_REFRESH_ETLS)
      .sign(ETLS_REFRESH);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ cookies
    const response = NextResponse.json({ message: "Login successful", userData });

    response.headers.set(
      "Set-Cookie",
      [
        `accessToken=${accessToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshToken=${refreshToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `accessTokenEtls=${accessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshTokenEtls=${refreshTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return response;
  } catch (error) {
    console.error("Login error:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
```

---

## üîπ **üìå 2. –û–Ω–æ–≤–ª–µ–Ω–∏–π `middleware.js` (–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è `jose` + –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤)**
```javascript
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import { jwtVerify } from "jose";

const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);

export async function middleware(req) {
  const { pathname } = req.nextUrl;

  // –í–∏–∫–ª—é—á–∞—î–º–æ `/login` –∑—ñ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
  if (pathname.startsWith("/login")) {
    return NextResponse.next();
  }

  const cookieStore = cookies();
  const accessTokenEtls = cookieStore.get("accessTokenEtls")?.value;
  const refreshTokenEtls = cookieStore.get("refreshTokenEtls")?.value;

  // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ–∫–µ–Ω—ñ–≤ ‚Äì —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ `/login`
  if (!accessTokenEtls && !refreshTokenEtls) {
    return NextResponse.redirect(new URL("/login", req.url));
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ accessTokenEtls
  try {
    await jwtVerify(accessTokenEtls, ETLS_ACCESS);
    return NextResponse.next();
  } catch (error) {
    console.warn("accessTokenEtls invalid, checking refreshTokenEtls...");
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ refreshTokenEtls
  try {
    await jwtVerify(refreshTokenEtls, ETLS_REFRESH);

    // –ó–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
    const refreshResponse = await fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
      method: "POST",
      credentials: "include",
      headers: {
        "Content-Type": "application/json",
        Cookie: req.headers.get("cookie") || "",
      },
    });

    if (!refreshResponse.ok) {
      throw new Error("Failed to refresh tokens");
    }

    return NextResponse.next();
  } catch (error) {
    console.error("refreshTokenEtls invalid:", error);

    return NextResponse.redirect(new URL("/login", req.url), {
      headers: {
        "Set-Cookie": [
          "accessTokenEtls=; HttpOnly; Path=/; Max-Age=0",
          "refreshTokenEtls=; HttpOnly; Path=/; Max-Age=0",
          "accessToken=; HttpOnly; Path=/; Max-Age=0",
          "refreshToken=; HttpOnly; Path=/; Max-Age=0",
        ].join(", "),
      },
    });
  }
}

export const config = {
  matcher: ["/((?!login).*)"], // –í–∏–∫–ª—é—á–∞—î `/login` –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
};
```

---

## üîπ **üìå 3. –û–Ω–æ–≤–ª–µ–Ω–∏–π `api/auth/refreshtoken.js` (–û–Ω–æ–≤–ª–µ–Ω–Ω—è `accessTokenEtls` + `refreshTokenEtls`)**
```javascript
import { NextResponse } from "next/server";
import { jwtVerify, SignJWT } from "jose";

const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);
const EXPIRES_IN_ACCESS_ETLS = 15 * 60; // 15 —Ö–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö
const EXPIRES_IN_REFRESH_ETLS = 7 * 24 * 60 * 60; // 7 –¥–Ω—ñ–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö

export async function POST(req) {
  try {
    const cookieStore = cookies();
    const refreshTokenEtls = cookieStore.get("refreshTokenEtls")?.value;

    if (!refreshTokenEtls) {
      return NextResponse.json({ error: "No refresh token provided" }, { status: 401 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ refreshTokenEtls
    const { payload } = await jwtVerify(refreshTokenEtls, ETLS_REFRESH);

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏
    const newAccessTokenEtls = await new SignJWT({ userId: payload.userId })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    const newRefreshTokenEtls = await new SignJWT({ userId: payload.userId })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_REFRESH_ETLS)
      .sign(ETLS_REFRESH);

    // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –Ω–æ–≤–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
    const response = NextResponse.json({ message: "Tokens refreshed" });

    response.headers.set(
      "Set-Cookie",
      [
        `accessTokenEtls=${newAccessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshTokenEtls=${newRefreshTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return response;
  } catch (error) {
    console.error("Failed to refresh tokens:", error);
    return NextResponse.json({ error: "Invalid refresh token" }, { status: 401 });
  }
}
```

---

## ‚úÖ **üìå –©–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è —Ç–∞ –ø–æ–∫—Ä–∞—â–∏–ª–æ—Å—è?**
‚úî **–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ `jose`, —â–æ –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ Next.js API —Ç–∞ Edge Runtime.**  
‚úî **–ë–µ–∑–ø–µ—á–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—ñ–≤ —á–µ—Ä–µ–∑ `jwtVerify`.**  
‚úî **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `SignJWT` –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó JWT –±–µ–∑ `jsonwebtoken`.**  
‚úî **–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ cookies (`cookies()` API).**  

üöÄ **–¢–µ–ø–µ—Ä —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—î –±–µ–∑–ø–µ—á–Ω–æ, –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ç–∞ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º —É Next.js! üî•**