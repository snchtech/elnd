### ‚úÖ **–†–æ–∑–±—ñ—Ä –ø–æ–º–∏–ª–∫–∏ `JWSSignatureVerificationFailed: signature verification failed`**
–ü–æ–º–∏–ª–∫–∞ `JWSSignatureVerificationFailed` —É `jose.jwtVerify` –æ–∑–Ω–∞—á–∞—î, —â–æ:
1. **–¢–æ–∫–µ–Ω –±—É–≤ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π —ñ–Ω—à–∏–º –∫–ª—é—á–µ–º** ‚Äì —Ç–æ–±—Ç–æ `jsonwebtoken` —ñ `jose` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Ä—ñ–∑–Ω—ñ –º–µ—Ç–æ–¥–∏ –ø—ñ–¥–ø–∏—Å—É.
2. **–ö–ª—é—á `ETLS_REFRESH` —É `jose.jwtVerify` –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ —Ç–∏–º, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤—Å—è –ø—Ä–∏ –ø—ñ–¥–ø–∏—Å—É–≤–∞–Ω–Ω—ñ**.
3. **–¢–æ–∫–µ–Ω –º–æ–∂–µ –±—É—Ç–∏ –∑–º—ñ–Ω–µ–Ω–∏–π –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π** ‚Äì –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–¥–∞—á—ñ –π–æ–≥–æ –º–æ–¥–∏—Ñ—ñ–∫—É–≤–∞–≤ –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä.

---

## üîπ **üìå –ß–æ–º—É —Ü—è –ø–æ–º–∏–ª–∫–∞ –≤–∏–Ω–∏–∫–ª–∞ —É —Ç–µ–±–µ?**
–¢–∏ **—Å–ø–æ—á–∞—Ç–∫—É –≥–µ–Ω–µ—Ä—É–≤–∞–≤ JWT —Ç–æ–∫–µ–Ω–∏ —á–µ—Ä–µ–∑ `jsonwebtoken`**, –∞ –ø–æ—Ç—ñ–º **—Å–ø—Ä–æ–±—É–≤–∞–≤ –≤–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ —ó—Ö —É `jose`**, —â–æ –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ **–Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å—É**.

üìå **–ü—Ä–∏—á–∏–Ω–∞:**  
- `jsonwebtoken` –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î **Base64Url encoding**, –∞–ª–µ –π–æ–≥–æ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–æ—Ö–∏ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ `jose`.
- `jose` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î `Uint8Array` –¥–ª—è –∫–ª—é—á—ñ–≤ (`TextEncoder().encode()`), –∞ `jsonwebtoken` –ø—Ä–∞—Ü—é—î –∑ —Ä—è–¥–∫–æ–≤–∏–º–∏ –∫–ª—é—á–∞–º–∏.
- `jsonwebtoken.sign()` –ø—Ä–∞—Ü—é—î –ø–æ-—ñ–Ω—à–æ–º—É, –Ω—ñ–∂ `jose.SignJWT()`.

**–¢–æ–º—É —Ç–æ–∫–µ–Ω–∏, –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ `jsonwebtoken`, –Ω–µ –º–æ–∂–Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ `jose`!**

---

## üîπ **üìå –Ø–∫ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É?**
### ‚úÖ **–í–∞—Ä—ñ–∞–Ω—Ç 1 (–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π) ‚Äì –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `jose` –Ω–∞ –≤—Å—ñ—Ö –µ—Ç–∞–ø–∞—Ö**
**–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏:**  
‚úÖ –ü–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ `jose`, –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤—à–∏ —Ç–æ–∫–µ–Ω–∏ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ `SignJWT`.  
‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `new TextEncoder().encode(KEY)` –ø—Ä–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ.

**üìå –§—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–¥ –±–µ–∑ –ø–æ–º–∏–ª–∫–∏:**
```javascript
import { jwtVerify, SignJWT } from "jose";

const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);

export async function POST(req) {
  try {
    const cookieStore = cookies();
    const refreshTokenEtls = cookieStore.get("refreshTokenEtls")?.value;

    if (!refreshTokenEtls) {
      return NextResponse.json({ error: "No refresh token provided" }, { status: 401 });
    }

    // üîπ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è refreshTokenEtls (–∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ —á–µ—Ä–µ–∑ `jose`)
    const { payload } = await jwtVerify(refreshTokenEtls, ETLS_REFRESH);

    // üîπ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ accessTokenEtls
    const newAccessTokenEtls = await new SignJWT({ userId: payload.userId })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime("15m")
      .sign(ETLS_REFRESH);

    const response = NextResponse.json({ message: "Tokens refreshed" });
    response.headers.set(
      "Set-Cookie",
      `accessTokenEtls=${newAccessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`
    );

    return response;
  } catch (error) {
    console.error("JWT Verification Error:", error);
    return NextResponse.json({ error: "Invalid refresh token" }, { status: 401 });
  }
}
```
‚úî **–¶–µ–π –∫–æ–¥ —Ç–µ–ø–µ—Ä –Ω–µ –º–∞—Ç–∏–º–µ –ø–æ–º–∏–ª–∫–∏ `signature verification failed`**, –±–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—é—Ç—å –∑ `jose`.

---

### ‚úÖ **–í–∞—Ä—ñ–∞–Ω—Ç 2 (–¢–∏–º—á–∞—Å–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è) ‚Äì –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `jsonwebtoken` –≤—Å—é–¥–∏**
–Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à —Ç–∏–º—á–∞—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `jsonwebtoken`, —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ **–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞ –≤–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ —Ç–æ–∫–µ–Ω–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º —Å–ø–æ—Å–æ–±–æ–º**.

üìå **–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ –¥–ª—è `jsonwebtoken`:**
```javascript
import jwt from "jsonwebtoken";

const ETLS_REFRESH = process.env.ETLS_REFRESH;

export async function POST(req) {
  try {
    const cookieStore = cookies();
    const refreshTokenEtls = cookieStore.get("refreshTokenEtls")?.value;

    if (!refreshTokenEtls) {
      return NextResponse.json({ error: "No refresh token provided" }, { status: 401 });
    }

    // üîπ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ `jsonwebtoken`
    const decoded = jwt.verify(refreshTokenEtls, ETLS_REFRESH);

    // üîπ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ `accessTokenEtls`
    const newAccessTokenEtls = jwt.sign({ userId: decoded.userId }, ETLS_REFRESH, {
      expiresIn: "15m",
    });

    const response = NextResponse.json({ message: "Tokens refreshed" });
    response.headers.set(
      "Set-Cookie",
      `accessTokenEtls=${newAccessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`
    );

    return response;
  } catch (error) {
    console.error("JWT Verification Error:", error);
    return NextResponse.json({ error: "Invalid refresh token" }, { status: 401 });
  }
}
```
‚úî **–¶–µ —Ç–∏–º—á–∞—Å–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è ‚Äì –∞–ª–µ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –∫—Ä–∞—â–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ `jose` –≤—Å—é–¥–∏.**

---

## üîπ **üìå –í–∏—Å–Ω–æ–≤–æ–∫**
| –ü—ñ–¥—Ö—ñ–¥ | –ß–∏ –ø—Ä–∞—Ü—é—î? | –†–∏–∑–∏–∫ –ø–æ–º–∏–ª–æ–∫ |
|--------|------------|---------------|
| –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `jose` –≤—Å—é–¥–∏ (–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è + –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è) | ‚úÖ –¢–∞–∫ | üî• –ù–µ–º–∞—î |
| –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `jsonwebtoken` –≤—Å—é–¥–∏ | ‚úÖ –¢–∞–∫ | ‚ùó –ú–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —É `middleware.js` |
| –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è `jsonwebtoken`, –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è `jose` | ‚ùå –ù—ñ | üö® `signature verification failed` |

‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:** –ø–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ `jose` –Ω–∞ –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—è—Ö **(Login, Middleware, RefreshToken API)**, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º.  

üöÄ **–¶–µ 100% –≤–∏—Ä—ñ—à–∏—Ç—å –ø–æ–º–∏–ª–∫—É `JWSSignatureVerificationFailed`!** üî•