### ‚úÖ **–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ `customFetch` —ñ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ Next.js API**

---

## üîπ **üìå 1. –©–æ –æ–∑–Ω–∞—á–∞—î `refreshToken: newRefreshToken` —É –∫–æ–¥—ñ**
```javascript
const { accessToken, refreshToken: newRefreshToken } = await refreshResponse.json();
```
–¶–µ **–¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è –æ–±'—î–∫—Ç–∞**, –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –∑ JSON-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API.

üìå **–©–æ —Ç—É—Ç –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è?**  
- `refreshResponse.json()` –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç:
  ```json
  {
    "accessToken": "abc123",
    "refreshToken": "xyz456"
  }
  ```
- `{ accessToken, refreshToken: newRefreshToken }`  
  - `accessToken` –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç–∞–∫–∏–º –∂–µ.
  - `refreshToken` –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î—Ç—å—Å—è –≤ `newRefreshToken`.

üìå **–ù–∞–≤—ñ—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ?**
- –Ø–∫—â–æ —Ç–∏ –≤–∂–µ –º–∞—î—à –∑–º—ñ–Ω–Ω—É `refreshToken`, —Ç–∏ –Ω–µ –º–æ–∂–µ—à —ó—ó –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤ —Ü—å–æ–º—É –∂ —Ä—è–¥–∫—É.
- **–¢–æ–º—É `refreshToken` –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î—Ç—å—Å—è –≤ `newRefreshToken`**, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É –∑–º—ñ–Ω–Ω–∏—Ö.

---

## üîπ **üìå 2. –ê–Ω–∞–ª—ñ–∑ –ª–æ–≥—ñ–∫–∏ `customFetch`**
–¢–∞–∫, —Ç–∏ **–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑—É–º—ñ—î—à** –ª–æ–≥—ñ–∫—É, –∞–ª–µ —î –æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç, –¥–µ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏.

üìå **–û–≥–ª—è–¥ –ª–æ–≥—ñ–∫–∏:**
1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î `accessToken` —É cookies.
   - ‚ùå **–ü–æ–º–∏–ª–∫–∞** ‚Äì –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ `refreshToken` –≤ cookies, –ø–µ—Ä—à –Ω—ñ–∂ —Ä–æ–±–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
2. –Ø–∫—â–æ `accessToken` –Ω–µ–º–∞—î, –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –æ–Ω–æ–≤–∏—Ç–∏ —á–µ—Ä–µ–∑ `refreshToken`.
3. –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ `REMOTE_API`.
4. –Ø–∫—â–æ –æ—Ç—Ä–∏–º—É—î–º–æ `401`, –∑–Ω–æ–≤—É –ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ `accessToken` —ñ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç.
5. –Ø–∫—â–æ `refreshToken` —Ç–µ–∂ –Ω–µ–¥—ñ–π—Å–Ω–∏–π ‚Äì –≤–∏–∫–æ–Ω—É—î–º–æ **logout** (–æ—á–∏—â–∞—î–º–æ cookies).

üìå **–©–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏?**
- üîπ **–ü–µ—Ä–µ–¥ –ø–µ—Ä—à–∏–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ `refreshToken`**.  
- üîπ **–î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ `refreshToken` —Ç–µ–∂ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π** ‚Üí **–≤—ñ–¥—Ä–∞–∑—É –≤–∏–∫–æ–Ω—É—î–º–æ logout**.

---

## üîπ **üìå 3. –î–æ–¥–∞–≤–∞–Ω–Ω—è `userDataEtls` —É `refreshAccessToken`**
–¢–µ–ø–µ—Ä **–ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–æ–∫–µ–Ω—ñ–≤ –º–∏ —â–µ –æ–Ω–æ–≤–ª—é—î–º–æ `userDataEtls`**, –∑–∞—à–∏—Ñ—Ä—É–≤–∞–≤—à–∏ `userData` —á–µ—Ä–µ–∑ `jose`.

### ‚úÖ **–û–Ω–æ–≤–ª–µ–Ω–∏–π `refreshAccessToken.js`**
```javascript
import { NextResponse } from "next/server";
import { jwtVerify, SignJWT } from "jose";

const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);
const EXPIRES_IN_ACCESS_ETLS = 15 * 60; // 15 —Ö–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö
const EXPIRES_IN_REFRESH_ETLS = 7 * 24 * 60 * 60; // 7 –¥–Ω—ñ–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö

export async function POST(req) {
  try {
    const cookies = parse(req.headers.get("cookie") || "");
    const refreshTokenEtls = cookies.refreshTokenEtls;

    if (!refreshTokenEtls) {
      return NextResponse.json({ error: "No refresh token provided" }, { status: 401 });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ refreshTokenEtls
    const { payload } = await jwtVerify(refreshTokenEtls, ETLS_REFRESH);

    // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏
    const newAccessTokenEtls = await new SignJWT({ userId: payload.userId })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    const newRefreshTokenEtls = await new SignJWT({ userId: payload.userId })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_REFRESH_ETLS)
      .sign(ETLS_REFRESH);

    // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ `userDataEtls`
    const userData = payload.userData || {}; // –î–æ–¥–∞—î–º–æ userData, —è–∫—â–æ —î
    const userDataEtls = await new SignJWT(userData)
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –Ω–æ–≤–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
    const response = NextResponse.json({ message: "Tokens refreshed" });

    response.headers.set(
      "Set-Cookie",
      [
        `accessTokenEtls=${newAccessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshTokenEtls=${newRefreshTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `userDataEtls=${userDataEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return response;
  } catch (error) {
    console.error("Failed to refresh tokens:", error);
    return NextResponse.json({ error: "Invalid refresh token" }, { status: 401 });
  }
}
```
‚úî **–¢–µ–ø–µ—Ä –º–∏ –æ–Ω–æ–≤–ª—é—î–º–æ `userDataEtls` —Ä–∞–∑–æ–º —ñ–∑ —Ç–æ–∫–µ–Ω–∞–º–∏.**  
‚úî **–¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.**

---

## üîπ **üìå 4. –í–∏–Ω–µ—Å–µ–Ω–Ω—è `customFetch` —É `api/rest/customfetch.js`**
```javascript
import { NextResponse } from "next/server";
import { parse } from "cookie";

const REMOTE_API = process.env.REMOTE_API;

export async function POST(req) {
  try {
    const { url, options } = await req.json();
    const cookies = parse(req.headers.get("cookie") || "");

    let accessToken = cookies.accessToken;
    const refreshToken = cookies.refreshToken;

    if (!accessToken) {
      if (!refreshToken) return redirectToLogin();
      const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json", Cookie: req.headers.get("cookie") || "" },
      });

      if (!refreshedTokens.ok) return redirectToLogin();
      const { accessToken } = await refreshedTokens.json();
    }

    let response = await fetch(`${REMOTE_API}${url}`, {
      ...options,
      headers: {
        ...options.headers,
        Authorization: `Bearer ${accessToken}`,
      },
    });

    if (response.status === 401) {
      const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json", Cookie: req.headers.get("cookie") || "" },
      });

      if (!refreshedTokens.ok) return redirectToLogin();
      const { accessToken } = await refreshedTokens.json();

      response = await fetch(`${REMOTE_API}${url}`, {
        ...options,
        headers: { ...options.headers, Authorization: `Bearer ${accessToken}` },
      });
    }

    return NextResponse.json(await response.json());
  } catch (error) {
    return NextResponse.json({ error: "Request failed" }, { status: 500 });
  }
}
```
‚úî **–¶–µ–π API –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è —è–∫ –ø—Ä–æ–∫—Å—ñ –º—ñ–∂ Next.js —ñ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ–º API.**

---

## üîπ **üìå 5. –í–∏–Ω–µ—Å–µ–Ω–Ω—è `refreshAccessToken` —É `api/rest/refreshresttokens.js`**
–¶–µ –º–∏ –≤–∂–µ —Ä–µ–∞–ª—ñ–∑—É–≤–∞–ª–∏ —É **–ø—É–Ω–∫—Ç—ñ 3**.

---

## üîπ **üìå 6. –ö—É–¥–∏ –≤–∏–Ω–µ—Å—Ç–∏ `redirectToLogin` —É Next.js?**
–§—É–Ω–∫—Ü—ñ—é `redirectToLogin()` –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–Ω–µ—Å—Ç–∏ —É `utils/auth.js`.

üìå **–°—Ç–≤–æ—Ä—é—î–º–æ `utils/auth.js`**
```javascript
import { NextResponse } from "next/server";

export function redirectToLogin() {
  return NextResponse.redirect(new URL("/login", req.url), {
    headers: {
      "Set-Cookie": [
        "accessTokenEtls=; HttpOnly; Path=/; Max-Age=0",
        "refreshTokenEtls=; HttpOnly; Path=/; Max-Age=0",
        "userDataEtls=; HttpOnly; Path=/; Max-Age=0",
      ].join(", "),
    },
  });
}
```
‚úî **–¢–µ–ø–µ—Ä —É –≤—Å—ñ—Ö API –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ `redirectToLogin()`**.

---

## ‚úÖ **üìå –ü—ñ–¥—Å—É–º–æ–∫**
‚úî **–û–Ω–æ–≤–ª–µ–Ω–æ `refreshresttokens` –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è `userDataEtls`**  
‚úî **`customFetch` —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—î —è–∫ Next.js API (`api/rest/customfetch.js`)**  
‚úî **–û–±—Ä–æ–±–∫—É —Ä–µ–¥—ñ—Ä–µ–∫—Ç—É –≤–∏–Ω–µ—Å–µ–Ω–æ —É `utils/auth.js`**  

üöÄ **–¢–µ–ø–µ—Ä —Ç–≤—ñ–π Next.js API –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∫—Å—ñ—Ä—É—î —Å—Ç–æ—Ä–æ–Ω–Ω—ñ–π API —ñ –ø—Ä–∞—Ü—é—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ! üî•**