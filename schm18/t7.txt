### ‚úÖ **üìå –ß–∏ –º–æ–∂–Ω–∞ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ `refreshToken` API –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ `refreshTokenEtls`?**
–¢–∞–∫, –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ç–∞–∫, —â–æ–± **–ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ `refreshTokenEtls` –Ω–∞ Next.js API** –æ–¥–Ω–æ—á–∞—Å–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞–≤—Å—è **—ñ `refreshToken` –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ API (Node.js + Express)**. –¶–µ —É—Å—É–≤–∞—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ `refreshExpireIn`, –∞–ª–µ —Ç—Ä–æ—Ö–∏ –∑–±—ñ–ª—å—à—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤.

---

## üîπ **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥: –æ–Ω–æ–≤–ª–µ–Ω–Ω—è `refreshToken` –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ `refreshTokenEtls`**
### **–©–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è?**
- –ü—Ä–∏ –∫–æ–∂–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ `accessTokenEtls` –º–∏ **–∑–∞–≤–∂–¥–∏ –æ–Ω–æ–≤–ª—é—î–º–æ `refreshToken` –Ω–∞ API**.
- `refreshTokenEtls` —Ç–µ–ø–µ—Ä **–æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è —Ä–∞–∑–æ–º –∑ `refreshToken` API**.
- –¶–µ **–≥–∞—Ä–∞–Ω—Ç—É—î —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é** –¥–≤–æ—Ö –ø–∞—Ä —Ç–æ–∫–µ–Ω—ñ–≤.

---

## üîπ **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ `refreshresttokens.js`**
```javascript
import { NextResponse } from "next/server";
import { parse } from "cookie";
import { SignJWT, jwtVerify } from "jose";

const REMOTE_API = process.env.REMOTE_API;
const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);
const EXPIRES_IN_ACCESS_ETLS = 15 * 60; // 15 —Ö–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö
const EXPIRES_IN_REFRESH_ETLS = 12 * 60 * 60; // 12 –≥–æ–¥–∏–Ω —É —Å–µ–∫—É–Ω–¥–∞—Ö

export async function POST(req) {
  try {
    const cookies = parse(req.headers.get("cookie") || "");
    const refreshTokenEtls = cookies.refreshTokenEtls;

    if (!refreshTokenEtls) {
      return NextResponse.json({ error: "No refresh token provided" }, { status: 401 });
    }

    // üîπ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è `refreshTokenEtls`
    const { payload } = await jwtVerify(refreshTokenEtls, ETLS_REFRESH);

    // üîπ –û–Ω–æ–≤–ª–µ–Ω–Ω—è `accessToken` —Ç–∞ `refreshToken` –Ω–∞ API
    const refreshResponse = await fetch(`${REMOTE_API}/refreshtoken`, {
      method: "POST",
      credentials: "include",
      headers: { "Content-Type": "application/json", Cookie: req.headers.get("cookie") || "" },
    });

    if (!refreshResponse.ok) {
      return redirectToLogin();
    }

    const { accessToken, refreshToken: newRefreshToken, userData } = await refreshResponse.json();

    // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ `accessTokenEtls`
    const newAccessTokenEtls = await new SignJWT({ userId: payload.userId })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ `refreshTokenEtls` (–∑–∞–≤–∂–¥–∏ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è —Ä–∞–∑–æ–º —ñ–∑ `refreshToken`)
    const newRefreshTokenEtls = await new SignJWT({ userId: payload.userId })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_REFRESH_ETLS)
      .sign(ETLS_REFRESH);

    // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ `userDataEtls`
    const userDataEtls = await new SignJWT(userData)
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    // üîπ –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
    const response = NextResponse.json({ message: "Tokens refreshed" });

    response.headers.set(
      "Set-Cookie",
      [
        `accessToken=${accessToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshToken=${newRefreshToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `accessTokenEtls=${newAccessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshTokenEtls=${newRefreshTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `userDataEtls=${userDataEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return response;
  } catch (error) {
    console.error("Error refreshing tokens:", error);
    return NextResponse.json({ error: "Invalid refresh token" }, { status: 401 });
  }
}
```

---

## üîπ **üìå –©–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è –≤ —Ü—å–æ–º—É –ø—ñ–¥—Ö–æ–¥—ñ?**
| üî• –©–æ –±—É–ª–æ | ‚úÖ –©–æ —Å—Ç–∞–ª–æ |
|------------|------------|
| **–ü–µ—Ä–µ–≤—ñ—Ä—è–ª–∏ `refreshExpireIn` –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º `refreshTokenEtls`** | `refreshTokenEtls` –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è **–∑–∞–≤–∂–¥–∏ —Ä–∞–∑–æ–º –∑ `refreshToken` API** |
| `refreshTokenEtls` –º—ñ–≥ –∑–∞–ª–∏—à–∞—Ç–∏—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è `refreshToken` API | **–ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è** `refreshTokenEtls` —Ç–∞ `refreshToken` API |
| –ë—É–ª–∏ –≤–∏–ø–∞–¥–∫–∏, –∫–æ–ª–∏ `refreshTokenEtls` —â–µ –¥—ñ—è–≤, –∞ API –≤–∂–µ –≤–∏–¥–∞–ª–∏–ª–æ `refreshToken` | **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –∑ "–º–µ—Ä—Ç–≤–∏–º" —Ç–æ–∫–µ–Ω–æ–º** |

---

## ‚úÖ **üìå –ü—ñ–¥—Å—É–º–æ–∫**
‚úî **–ü—Ä–∏ –∫–æ–∂–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ `accessTokenEtls`, –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è —ñ `refreshToken` API**.  
‚úî **`refreshTokenEtls` –∑–∞–≤–∂–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î—Ç—å—Å—è –∑ `refreshToken` API, —É–Ω–∏–∫–∞—é—á–∏ —Ä–æ–∑—Å–∏–Ω—Ö—Ä–æ–Ω—É**.  
‚úî **API —Ç–∞ Next.js –±—ñ–ª—å—à–µ –Ω–µ –º–∞—é—Ç—å –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç–µ–π —É —Ç–µ—Ä–º—ñ–Ω–∞—Ö –¥—ñ—ó —Ç–æ–∫–µ–Ω—ñ–≤**.  

üöÄ **–¶–µ–π –ø—ñ–¥—Ö—ñ–¥ –≥–∞—Ä–∞–Ω—Ç—É—î —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é —Ç–æ–∫–µ–Ω—ñ–≤ —ñ –≤–∏–∫–ª—é—á–∞—î –±—É–¥—å-—è–∫—ñ —Ä–æ–∑—Å–∏–Ω—Ö—Ä–æ–Ω–∏ –º—ñ–∂ —Å–µ—Ä–≤–µ—Ä–∞–º–∏! üî•**