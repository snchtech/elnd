### ‚úÖ **üìå –Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ `cookies` –∑ Next.js API –¥–æ —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–≥–æ API (Node.js + Express)?**
–¢–∏ —Ö–æ—á–µ—à **–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ cookies –≤—ñ–¥ Next.js API –¥–æ —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–≥–æ API**, –∞ –ø–æ—Ç—ñ–º **–æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ —Ç–æ–∫–µ–Ω–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó—Ö –Ω–∞–∑–∞–¥ –∫–ª—ñ—î–Ω—Ç—É**.

---

## üîπ **üìå –ü—Ä–æ–±–ª–µ–º–∏ –≤ —Ç–≤–æ—î–º—É –∫–æ–¥—ñ**
### **1. `parse(req.header.cookie)` ‚Äì –ø–æ–º–∏–ª–∫–∞**
- `req.headers.cookie` –º—ñ—Å—Ç–∏—Ç—å `cookies` —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞, –∞ `parse(req.headers.cookie)` –ø–æ–≤–µ—Ä—Ç–∞—î **–æ–±'—î–∫—Ç**.
- **–û–¥–Ω–∞–∫ `fetch` –Ω–µ –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ–±'—î–∫—Ç —É `headers.Cookie` ‚Äì –π–æ–º—É –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ä—è–¥–æ–∫.**
- **‚ùå –ü–û–ú–ò–õ–ö–ê:** `TypeError: Cannot convert object to primitive value`.

### **2. –Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ cookies –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ Express**
- `req.cookies` –ø—Ä–∞—Ü—é—î **—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ cookies –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—Ç—å—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º**.
- **–ö–æ–ª–∏ cookies –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –≤ `headers.Cookie`, –ø–æ—Ç—Ä—ñ–±–Ω–æ —ó—Ö –ø–∞—Ä—Å–∏—Ç–∏ –≤—Ä—É—á–Ω—É –∑ `req.headers.cookie`**.

---

## üîπ **üìå –Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ `cookies` –≤—ñ–¥ Next.js API –¥–æ Node.js API**
### ‚úÖ **1. Next.js API (`refreshresttokens.js`)**
```javascript
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import { SignJWT } from "jose";

const REMOTE_API = process.env.REMOTE_API;
const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);
const EXPIRES_IN_ACCESS_ETLS = 15 * 60; // 15 —Ö–≤
const EXPIRES_IN_REFRESH_ETLS = 12 * 60 * 60; // 12 –≥–æ–¥

export async function POST(req) {
  try {
    const cookieStore = cookies();
    const refreshToken = cookieStore.get("refreshToken")?.value;

    if (!refreshToken) {
      console.warn("No refresh token available");
      return NextResponse.json({ error: "No refresh token provided" }, { status: 401 });
    }

    // üîπ –ü–µ—Ä–µ–¥–∞—î–º–æ cookies —É –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –¥–æ REMOTE_API
    const refreshResponse = await fetch(`${REMOTE_API}/refreshtoken`, {
      method: "POST",
      credentials: "include",
      headers: {
        "Content-Type": "application/json",
        "Cookie": `refreshToken=${refreshToken}`,
      },
    });

    if (!refreshResponse.ok) {
      console.error("Failed to refresh token");
      return NextResponse.json({ error: "Failed to refresh token" }, { status: 401 });
    }

    // üîπ –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ `userData`
    const { accessToken, refreshToken: newRefreshToken, userData } = await refreshResponse.json();

    // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ `userDataEtls` —á–µ—Ä–µ–∑ `jose`
    const userDataEtls = await new SignJWT(userData)
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    // üîπ –ü–µ—Ä–µ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ —Ç–æ–∫–µ–Ω–∏ –∫–ª—ñ—î–Ω—Ç—É —á–µ—Ä–µ–∑ `Set-Cookie`
    const response = NextResponse.json({ message: "Tokens refreshed" });

    response.headers.set(
      "Set-Cookie",
      [
        `accessToken=${accessToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshToken=${newRefreshToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `userDataEtls=${userDataEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return response;
  } catch (error) {
    console.error("Error refreshing tokens:", error);
    return NextResponse.json({ error: "Invalid refresh token" }, { status: 401 });
  }
}
```

‚úî **–¢–µ–ø–µ—Ä Next.js API –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—î `refreshToken` –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö.**  
‚úî **–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ —ñ –ø–µ—Ä–µ–¥–∞—î —ó—Ö —É `Set-Cookie`.**  

---

## ‚úÖ **2. Node.js + Express API (`refreshtoken.js`)**
```javascript
import express from "express";
import cookieParser from "cookie-parser";

const app = express();
app.use(express.json());
app.use(cookieParser());

app.post("/refreshtoken", async (req, res) => {
  try {
    // üîπ –û—Ç—Ä–∏–º—É—î–º–æ cookies —ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const cookieHeader = req.headers.cookie;
    let refreshToken = "";

    if (cookieHeader) {
      const cookies = Object.fromEntries(
        cookieHeader.split("; ").map((c) => c.split("="))
      );
      refreshToken = cookies.refreshToken;
    }

    if (!refreshToken) {
      return res.status(401).json({ error: "No refresh token provided" });
    }

    // üîπ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è refreshToken (—Ç—É—Ç –º–∞—î –±—É—Ç–∏ —Ç–≤–æ—è –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏)
    const isValid = true; // –°–∏–º—É–ª—é—î–º–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    if (!isValid) {
      return res.status(403).json({ error: "Invalid refresh token" });
    }

    // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏
    const newAccessToken = "newAccessToken123";
    const newRefreshToken = "newRefreshToken456";
    const userData = { id: 1, role: "admin" };

    // üîπ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ –≤ cookies
    res.cookie("accessToken", newAccessToken, {
      httpOnly: true,
      secure: true,
      sameSite: "strict",
    });

    res.cookie("refreshToken", newRefreshToken, {
      httpOnly: true,
      secure: true,
      sameSite: "strict",
    });

    // üîπ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ —Ç–æ–∫–µ–Ω–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({ accessToken: newAccessToken, refreshToken: newRefreshToken, userData });
  } catch (error) {
    console.error("Error refreshing token:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

app.listen(3001, () => console.log("Auth API running on port 3001"));
```

‚úî **–°–µ—Ä–≤–µ—Ä Express —Ç–µ–ø–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á–∏—Ç–∞—î `cookies` —ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤.**  
‚úî **–û–Ω–æ–≤–ª–µ–Ω—ñ —Ç–æ–∫–µ–Ω–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —É `Set-Cookie` –≤—ñ–¥–ø–æ–≤—ñ–¥—å.**  
‚úî **Next.js API –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ —ñ –ø–µ—Ä–µ–¥–∞—î —ó—Ö –∫–ª—ñ—î–Ω—Ç—É.**  

---

## ‚úÖ **üìå –ü—ñ–¥—Å—É–º–æ–∫**
| **–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏** | **–Ø–∫ —Ü–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ** |
|------------------|------------------|
| **–ü–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ `refreshToken` –≤—ñ–¥ Next.js API –¥–æ Express API** | –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `headers.Cookie: refreshToken=${refreshToken}` |
| **–û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ `refreshToken` –≤ Express API** | –ü–∞—Ä—Å–∏–º–æ `req.headers.cookie` |
| **–ü–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ –Ω–∞–∑–∞–¥ –∫–ª—ñ—î–Ω—Ç—É** | –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `res.cookie("accessToken", newAccessToken, {...})` |

üöÄ **–¢–µ–ø–µ—Ä Next.js API —ñ Express API –æ–±–º—ñ–Ω—é—é—Ç—å—Å—è `cookies` –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üî•**