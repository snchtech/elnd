### ‚úÖ **üìå –î–æ–¥–∞—î–º–æ `logger` —É `login.js` –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó**
–û–Ω–æ–≤–∏–º–æ –∫–æ–¥, —â–æ–±:
1. **–õ–æ–≥—É–≤–∞—Ç–∏ –ø–æ—á–∞—Ç–æ–∫ –ª–æ–≥—ñ–Ω—É (`email` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –±–µ–∑ –ø–∞—Ä–æ–ª—è!)**.
2. **–õ–æ–≥—É–≤–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ (`userId` —Ç–∞ `role`)**.
3. **–õ–æ–≥—É–≤–∞—Ç–∏ –Ω–µ–≤–¥–∞–ª–∏–π –≤—Ö—ñ–¥ (`401` –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è)**.
4. **–õ–æ–≥—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –ø—ñ–¥ —á–∞—Å –ª–æ–≥—ñ–Ω—É**.

---

## üîπ **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π `login.js` –∑ `logger`**
```javascript
import { NextResponse } from "next/server";
import { SignJWT } from "jose";
import logger from "@/utils/logger"; // üîπ –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ª–æ–≥–µ—Ä

const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);
const EXPIRES_IN_ACCESS_ETLS = 15 * 60; // 15 —Ö–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö
const EXPIRES_IN_REFRESH_ETLS = 7 * 24 * 60 * 60; // 7 –¥–Ω—ñ–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö

export async function POST(req) {
  try {
    const { email, password } = await req.json();
    logger.info(`Login attempt for email: ${email}`); // üîπ –õ–æ–≥—É—î–º–æ —Å–ø—Ä–æ–±—É –≤—Ö–æ–¥—É

    // üîπ –ó–∞–ø–∏—Ç –¥–æ —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–≥–æ API
    const apiResponse = await fetch(`${process.env.EXTERNAL_API_URL}/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, password }),
    });

    if (!apiResponse.ok) {
      logger.warn(`Failed login attempt for email: ${email}`); // üîπ –õ–æ–≥—É—î–º–æ –Ω–µ–≤–¥–∞–ª–∏–π –≤—Ö—ñ–¥
      return NextResponse.json({ error: "Invalid credentials" }, { status: 401 });
    }

    const { accessToken, refreshToken, userData } = await apiResponse.json();

    // üîπ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è `accessTokenEtls`
    const accessTokenEtls = await new SignJWT({ userId: userData.id, role: userData.role })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    // üîπ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è `refreshTokenEtls`
    const refreshTokenEtls = await new SignJWT({ userId: userData.id })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_REFRESH_ETLS)
      .sign(ETLS_REFRESH);

    // üîπ –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥
    logger.info(`User logged in: ID=${userData.id}, Role=${userData.role}, Email=${email}`);

    // üîπ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ cookies
    const response = NextResponse.json({ message: "Login successful", userData });

    response.headers.set(
      "Set-Cookie",
      [
        `accessToken=${accessToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshToken=${refreshToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `accessTokenEtls=${accessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshTokenEtls=${refreshTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return response;
  } catch (error) {
    logger.error(`Login error for email ${req.email}: ${error.message}`); // üîπ –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
```

---

## ‚úÖ **üìå –©–æ —Ç—É—Ç –∑—Ä–æ–±–ª–µ–Ω–æ?**
| **–©–æ –ª–æ–≥—É—î–º–æ?** | **–ü—Ä–∏–∫–ª–∞–¥ –ª–æ–≥—É** |
|----------------|----------------|
| –ü–æ—á–∞—Ç–æ–∫ –≤—Ö–æ–¥—É | `[12.06.2024 12:15:21] INFO: Login attempt for email: user@example.com` |
| –ù–µ–≤–¥–∞–ª–∏–π –≤—Ö—ñ–¥ | `[12.06.2024 12:15:22] WARN: Failed login attempt for email: user@example.com` |
| –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ | `[12.06.2024 12:15:23] INFO: User logged in: ID=42, Role=admin, Email=user@example.com` |
| –ü–æ–º–∏–ª–∫–∞ | `[12.06.2024 12:15:25] ERROR: Login error for email user@example.com: TypeError: Failed to fetch` |

---

## ‚úÖ **üìå –ü—ñ–¥—Å—É–º–æ–∫**
üîπ **–õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ–ø–æ–º–∞–≥–∞—î –±–∞—á–∏—Ç–∏ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.**  
üîπ **–Ø–∫—â–æ –ª–æ–≥—ñ–Ω –Ω–µ–≤–¥–∞–ª–∏–π ‚Äî –≤–∏–¥–Ω–æ, —â–æ –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ (–Ω–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å —á–∏ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞).**  
üîπ **–Ø–∫—â–æ –ª–æ–≥—ñ–Ω —É—Å–ø—ñ—à–Ω–∏–π ‚Äî –≤–∏–¥–Ω–æ `userId`, `role`, `email` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.**  
üîπ **–¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –ª–µ–≥–∫–æ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Ö–æ–¥—ñ–≤ —ñ –º–æ–∂–ª–∏–≤—ñ –∞—Ç–∞–∫–∏ –∞–±–æ –ø–æ–º–∏–ª–∫–∏.**  

üöÄ **–¢–µ–ø–µ—Ä —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ª–æ–≥—ñ–Ω—É –ø—Ä–∞—Ü—é—î —ñ–¥–µ–∞–ª—å–Ω–æ! üî•**