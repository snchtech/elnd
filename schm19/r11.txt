### ‚úÖ **üìå –î–æ–¥–∞—î–º–æ `logger` —É `refreshresttokens.js`**
–©–æ–± **–≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤**, –ø–æ—Ç—Ä—ñ–±–Ω–æ:
1. **–õ–æ–≥—É–≤–∞—Ç–∏ –ø–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Ç—É (`refreshTokenEtls` –æ—Ç—Ä–∏–º–∞–Ω–æ —á–∏ –Ω—ñ)**.
2. **–õ–æ–≥—É–≤–∞—Ç–∏ —É—Å–ø—ñ—à–Ω—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é `refreshTokenEtls`**.
3. **–õ–æ–≥—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ (`userId`)**.
4. **–õ–æ–≥—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏ (`401`, —è–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π, –∞–±–æ —ñ–Ω—à—ñ –≤–∏–Ω—è—Ç–∫–∏).**

---

## üîπ **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π `refreshresttokens.js` –∑ `logger`**
```javascript
import { NextResponse } from "next/server";
import { jwtVerify, SignJWT } from "jose";
import { cookies } from "next/headers";
import logger from "@/utils/logger"; // üîπ –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ª–æ–≥–µ—Ä

const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);
const EXPIRES_IN_ACCESS_ETLS = 15 * 60; // 15 —Ö–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö
const EXPIRES_IN_REFRESH_ETLS = 7 * 24 * 60 * 60; // 7 –¥–Ω—ñ–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö

export async function POST(req) {
  try {
    const cookieStore = cookies();
    const refreshTokenEtls = cookieStore.get("refreshTokenEtls")?.value;

    if (!refreshTokenEtls) {
      logger.warn("No refresh token provided, cannot refresh tokens."); // üîπ –õ–æ–≥—É—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
      return NextResponse.json({ error: "No refresh token provided" }, { status: 401 });
    }

    // üîπ –í–µ—Ä–∏—Ñ—ñ–∫—É—î–º–æ refreshTokenEtls
    let payload;
    try {
      ({ payload } = await jwtVerify(refreshTokenEtls, ETLS_REFRESH));
      logger.info(`Refresh token verified for userId=${payload.userId}`); // üîπ –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    } catch (error) {
      logger.error(`Invalid refresh token: ${error.message}`); // üîπ –õ–æ–≥—É—î–º–æ –Ω–µ–≤–¥–∞–ª—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
      return NextResponse.json({ error: "Invalid refresh token" }, { status: 401 });
    }

    // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏
    const newAccessTokenEtls = await new SignJWT({ userId: payload.userId })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    const newRefreshTokenEtls = await new SignJWT({ userId: payload.userId })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_REFRESH_ETLS)
      .sign(ETLS_REFRESH);

    logger.info(`New tokens generated for userId=${payload.userId}`); // üîπ –õ–æ–≥—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤

    // üîπ –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –Ω–æ–≤–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
    const response = NextResponse.json({ message: "Tokens refreshed" });

    response.headers.set(
      "Set-Cookie",
      [
        `accessTokenEtls=${newAccessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshTokenEtls=${newRefreshTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return response;
  } catch (error) {
    logger.error(`Failed to refresh tokens: ${error.message}`); // üîπ –õ–æ–≥—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ–º–∏–ª–∫–∏
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
```

---

## ‚úÖ **üìå –©–æ —Ç—É—Ç –∑—Ä–æ–±–ª–µ–Ω–æ?**
| **–©–æ –ª–æ–≥—É—î–º–æ?** | **–ü—Ä–∏–∫–ª–∞–¥ –ª–æ–≥—É** |
|----------------|----------------|
| –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ | `[12.06.2024 12:15:21] INFO: Refresh token verified for userId=42` |
| –í—ñ–¥—Å—É—Ç–Ω—ñ–π `refreshTokenEtls` | `[12.06.2024 12:15:22] WARN: No refresh token provided, cannot refresh tokens.` |
| –ù–µ–≤–¥–∞–ª–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è | `[12.06.2024 12:15:23] ERROR: Invalid refresh token: JWT expired` |
| –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ | `[12.06.2024 12:15:24] INFO: New tokens generated for userId=42` |
| –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ | `[12.06.2024 12:15:25] ERROR: Failed to refresh tokens: TypeError: Cannot read property 'userId' of undefined` |

---

## ‚úÖ **üìå –ü—ñ–¥—Å—É–º–æ–∫**
üîπ **–î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.**  
üîπ **–Ø–∫—â–æ `refreshTokenEtls` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äì –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î `WARN`.**  
üîπ **–Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π ‚Äì –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–∞—î `ERROR`.**  
üîπ **–Ø–∫—â–æ —Ç–æ–∫–µ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ ‚Äì –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑—É—î `INFO`.**  
üîπ **–Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∏ ‚Äì –≤–æ–Ω–∏ –ª–æ–≥—É—é—Ç—å—Å—è —Ä–∞–∑–æ–º —ñ–∑ `userId`.**  

üöÄ **–¢–µ–ø–µ—Ä –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –º–∞—î —á—ñ—Ç–∫—É —Å–∏—Å—Ç–µ–º—É –ª–æ–≥—É–≤–∞–Ω–Ω—è, —â–æ –¥–æ–ø–æ–º–∞–≥–∞—î –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≤—Å—ñ –ø–æ–¥—ñ—ó! üî•**