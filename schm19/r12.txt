### ‚úÖ **üìå –î–æ–¥–∞—î–º–æ `logger` —É `refreshAccessToken.js`**
–©–æ–± **–≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤**, –ø–æ—Ç—Ä—ñ–±–Ω–æ:
1. **–õ–æ–≥—É–≤–∞—Ç–∏ –ø–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ (`refreshToken` –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏ –Ω—ñ)**.
2. **–õ–æ–≥—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É –¥–æ `REMOTE_API`**.
3. **–õ–æ–≥—É–≤–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ (`userId`)**.
4. **–õ–æ–≥—É–≤–∞—Ç–∏ –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏** (—è–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ, —è–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ—â–æ).

---

## üîπ **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π `refreshAccessToken.js` –∑ `logger`**
```javascript
import { NextResponse } from "next/server";
import { SignJWT } from "jose";
import logger from "@/utils/logger"; // üîπ –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ª–æ–≥–µ—Ä

const REMOTE_API = process.env.REMOTE_API;
const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);
const EXPIRES_IN_ACCESS_ETLS = 15 * 60; // 15 —Ö–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö
const EXPIRES_IN_REFRESH_ETLS = 7 * 24 * 60 * 60; // 7 –¥–Ω—ñ–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö

export async function refreshAccessToken(refreshToken) {
  try {
    if (!refreshToken) {
      logger.warn("No refresh token available, cannot refresh tokens.");
      return null;
    }

    logger.info("Attempting to refresh access token...");

    // üîπ –ó–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —É REMOTE_API
    const refreshResponse = await fetch(`${REMOTE_API}/refreshtoken`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ refreshToken }),
    });

    if (!refreshResponse.ok) {
      logger.error(`Failed to refresh token from API, Status: ${refreshResponse.status}`);
      return null;
    }

    // üîπ –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ userData –∑ API
    const { accessToken, refreshToken: newRefreshToken, userData } = await refreshResponse.json();

    if (!accessToken || !newRefreshToken || !userData) {
      logger.error("API returned invalid token data.");
      return null;
    }

    // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ `userDataEtls` —á–µ—Ä–µ–∑ `jose`
    const userDataEtls = await new SignJWT(userData)
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    logger.info(`New access token generated for userId=${userData.id}`);

    // üîπ –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ —É `Set-Cookie`
    const response = NextResponse.json({ message: "Tokens refreshed" });

    response.headers.set(
      "Set-Cookie",
      [
        `accessToken=${accessToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshToken=${newRefreshToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `userDataEtls=${userDataEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    logger.info(`Tokens successfully refreshed for userId=${userData.id}`);

    return { accessToken, refreshToken: newRefreshToken, userDataEtls };
  } catch (error) {
    logger.error(`Error refreshing tokens: ${error.message}`);
    return null;
  }
}
```

---

## ‚úÖ **üìå –©–æ —Ç—É—Ç –∑—Ä–æ–±–ª–µ–Ω–æ?**
| **–©–æ –ª–æ–≥—É—î–º–æ?** | **–ü—Ä–∏–∫–ª–∞–¥ –ª–æ–≥—É** |
|----------------|----------------|
| –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ | `[12.06.2024 12:15:21] INFO: Attempting to refresh access token...` |
| –í—ñ–¥—Å—É—Ç–Ω—ñ–π `refreshToken` | `[12.06.2024 12:15:22] WARN: No refresh token available, cannot refresh tokens.` |
| –ù–µ–≤–¥–∞–ª–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (`401` –∞–±–æ —ñ–Ω—à–∏–π —Å—Ç–∞—Ç—É—Å) | `[12.06.2024 12:15:23] ERROR: Failed to refresh token from API, Status: 401` |
| –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ API | `[12.06.2024 12:15:24] ERROR: API returned invalid token data.` |
| –£—Å–ø—ñ—à–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è | `[12.06.2024 12:15:25] INFO: New access token generated for userId=42` |
| –£—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Å —É `cookies` | `[12.06.2024 12:15:26] INFO: Tokens successfully refreshed for userId=42` |
| –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ | `[12.06.2024 12:15:27] ERROR: Error refreshing tokens: TypeError: Failed to fetch` |

---

## ‚úÖ **üìå –ü—ñ–¥—Å—É–º–æ–∫**
üîπ **–î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.**  
üîπ **–Ø–∫—â–æ `refreshToken` –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî `WARN`-–ª–æ–≥.**  
üîπ **–Ø–∫—â–æ API –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–º–∏–ª–∫—É ‚Äî `ERROR`-–ª–æ–≥ –∑ `status`.**  
üîπ **–Ø–∫—â–æ `userData` –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π ‚Äî `ERROR`-–ª–æ–≥.**  
üîπ **–Ø–∫—â–æ –≤—Å–µ —É—Å–ø—ñ—à–Ω–æ ‚Äî –ª–æ–≥—É—é—Ç—å—Å—è `userId` —ñ –∑–∞–ø–∏—Å —É `cookies`.**  

üöÄ **–¢–µ–ø–µ—Ä –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ Next.js –º–∞—î –ø–æ—Ç—É–∂–Ω—É —Å–∏—Å—Ç–µ–º—É –ª–æ–≥—É–≤–∞–Ω–Ω—è, —â–æ —Å–ø—Ä–æ—â—É—î –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥! üî•**