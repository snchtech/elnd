### ‚úÖ **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π `refreshresttokens.js`, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î `accessToken` —É `body`**
–û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–¥, —â–æ–± –≤—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞–≤ **`accessToken` –≤ —Ç—ñ–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ** –¥–ª—è `customFetch`, —â–æ–± —Ç–æ–π –º—ñ–≥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –π–æ–≥–æ.

---

### üîπ **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π `refreshresttokens.js`**
```javascript
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import { SignJWT } from "jose";

const REMOTE_API = process.env.REMOTE_API;
const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);
const EXPIRES_IN_ACCESS_ETLS = 15 * 60; // 15 —Ö–≤
const EXPIRES_IN_REFRESH_ETLS = 12 * 60 * 60; // 12 –≥–æ–¥

export async function POST(req) {
  try {
    const cookieStore = cookies();
    const refreshToken = cookieStore.get("refreshToken")?.value;

    if (!refreshToken) {
      return NextResponse.json({ error: "No refresh token provided" }, { status: 401 });
    }

    // üîπ –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–≥–æ API –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
    const refreshResponse = await fetch(`${REMOTE_API}/refreshtoken`, {
      method: "POST",
      credentials: "include",
      headers: {
        "Content-Type": "application/json",
        "Cookie": `refreshToken=${refreshToken}`,
      },
    });

    if (!refreshResponse.ok) {
      return NextResponse.json({ error: "Failed to refresh token" }, { status: 401 });
    }

    // üîπ –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏
    const { accessToken, refreshToken: newRefreshToken, userData } = await refreshResponse.json();

    // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ `userDataEtls`
    const userDataEtls = await new SignJWT(userData)
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    // üîπ –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ–∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ —É `Set-Cookie`
    const response = NextResponse.json({ accessToken, refreshToken: newRefreshToken, userDataEtls });

    response.headers.set(
      "Set-Cookie",
      [
        `accessToken=${accessToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshToken=${newRefreshToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `userDataEtls=${userDataEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    return response;
  } catch (error) {
    return NextResponse.json({ error: "Invalid refresh token" }, { status: 401 });
  }
}
```
‚úî **–¢–µ–ø–µ—Ä `refreshresttokens` –ø–æ–≤–µ—Ä—Ç–∞—î `accessToken` —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ JSON**, —ñ `customFetch` –∑–º–æ–∂–µ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏.  
‚úî **–¢–∞–∫–æ–∂ `Set-Cookie` –æ–Ω–æ–≤–ª—é—î `cookies` —É –±—Ä–∞—É–∑–µ—Ä—ñ**.

---

### ‚úÖ **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π `customFetch.js`**
–û–Ω–æ–≤–ª—é—î–º–æ `customFetch`, —â–æ–± –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π `accessToken` —Ç–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ –ø—ñ—Å–ª—è –π–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.

```javascript
import { NextResponse } from "next/server";
import { parse } from "cookie";

const REMOTE_API = process.env.REMOTE_API;

export async function POST(req) {
  try {
    const { url, options } = await req.json();
    const cookies = parse(req.headers.get("cookie") || "");

    let accessToken = cookies.accessToken;
    const refreshToken = cookies.refreshToken;

    // üîπ –Ø–∫—â–æ –Ω–µ–º–∞—î accessToken, –ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏
    if (!accessToken) {
      if (!refreshToken) return redirectToLogin();

      const refreshResponse = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json", Cookie: req.headers.get("cookie") || "" },
      });

      if (!refreshResponse.ok) return redirectToLogin();

      // üîπ –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π accessToken
      const { accessToken: newAccessToken } = await refreshResponse.json();
      accessToken = newAccessToken;
    }

    // üîπ –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç —ñ–∑ –æ—Ç—Ä–∏–º–∞–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º
    let response = await fetch(`${REMOTE_API}${url}`, {
      ...options,
      headers: {
        ...options.headers,
        Authorization: `Bearer ${accessToken}`,
      },
    });

    // üîπ –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ 401, –ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏ —ñ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç
    if (response.status === 401) {
      const refreshResponse = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json", Cookie: req.headers.get("cookie") || "" },
      });

      if (!refreshResponse.ok) return redirectToLogin();

      // üîπ –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π accessToken
      const { accessToken: newAccessToken } = await refreshResponse.json();
      accessToken = newAccessToken;

      // üîπ –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç —ñ–∑ –Ω–æ–≤–∏–º accessToken
      response = await fetch(`${REMOTE_API}${url}`, {
        ...options,
        headers: { ...options.headers, Authorization: `Bearer ${newAccessToken}` },
      });
    }

    return NextResponse.json(await response.json());
  } catch (error) {
    return NextResponse.json({ error: "Request failed" }, { status: 500 });
  }
}
```

---

### ‚úÖ **üìå –©–æ –ø–æ–∫—Ä–∞—â–µ–Ω–æ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ?**
| ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ | ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è |
|------------|---------------|
| `refreshresttokens` –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞–≤ `accessToken` —É JSON | **–¢–µ–ø–µ—Ä –≤—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞—î `accessToken`, `refreshToken`, `userDataEtls`** |
| `customFetch` –Ω–µ –º—ñ–≥ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–π `accessToken` | **–¢–µ–ø–µ—Ä `customFetch` –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π `accessToken` —ñ –ø–æ–≤—Ç–æ—Ä—é—î –∑–∞–ø–∏—Ç** |
| –î—É–±–ª—ñ–∫–∞—Ç –∫–æ–¥—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∑–∞–ø–∏—Ç—ñ | **–¢–µ–ø–µ—Ä –ª–æ–≥—ñ–∫–∞ —á—ñ—Ç–∫–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∞** |
| –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –º–æ–≥–ª–∞ –±—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∞ –∑ `Set-Cookie` | **–¢–µ–ø–µ—Ä cookies –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ** |

---

## ‚úÖ **üìå –Ø–∫ —Ü–µ —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—î?**
1Ô∏è‚É£ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–æ–±–∏—Ç—å –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ `customFetch`**  
2Ô∏è‚É£ **–Ø–∫—â–æ `accessToken` –Ω–µ–¥—ñ–π—Å–Ω–∏–π, `customFetch` —Ä–æ–±–∏—Ç—å –∑–∞–ø–∏—Ç –Ω–∞ `/refreshresttokens`**  
3Ô∏è‚É£ **`refreshresttokens` –æ–Ω–æ–≤–ª—é—î `cookies` —ñ –ø–æ–≤–µ—Ä—Ç–∞—î `accessToken` –≤ `body`**  
4Ô∏è‚É£ **`customFetch` –æ—Ç—Ä–∏–º—É—î `accessToken`, –≤—Å—Ç–∞–≤–ª—è—î –π–æ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —ñ –ø–æ–≤—Ç–æ—Ä—é—î –∑–∞–ø–∏—Ç**  
5Ô∏è‚É£ **–ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–æ –∑ –Ω–æ–≤–∏–º `accessToken`**  

üöÄ **–¶—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –±–µ–∑ —Ä–æ–∑—Å–∏–Ω—Ö—Ä–æ–Ω—É, –º—ñ–Ω—ñ–º—ñ–∑—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—É—î –ø—Ä–∞–≤–∏–ª—å–Ω—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é! üî•**