### ‚úÖ **üìå –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è `username` —Ç–∞ —á–∞—Å—É –∑–∞–ø–∏—Ç—É —É Next.js API**
–û–Ω–æ–≤–∏–º–æ —Å–∏—Å—Ç–µ–º—É –ª–æ–≥—É–≤–∞–Ω–Ω—è, —â–æ–±:
- **–õ–æ–≥—É–≤–∞—Ç–∏ `username` —ñ–∑ `cookies`** (`etlsUser` ‚Äì —Ü–µ JWT —Ç–æ–∫–µ–Ω, —Ç–æ–º—É —Ç—Ä–µ–±–∞ –π–æ–≥–æ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `jose`).
- **–î–æ–¥–∞–≤–∞—Ç–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ `DD.MM.YYYY HH:mm:ss`**.
- **–î–æ–¥–∞–≤–∞—Ç–∏ `username` —É –∫–æ–∂–µ–Ω –ª–æ–≥ –∑–∞–ø–∏—Ç—É**.

---

## üîπ **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π `logger.js`**
üìå **–û–Ω–æ–≤–ª—é—î–º–æ `utils/logger.js`**, –¥–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É `DD.MM.YYYY HH:mm:ss`.

```javascript
import { createLogger, format, transports } from "winston";

// üîπ –§–æ—Ä–º–∞—Ç —á–∞—Å—É: 12.06.2024 12:15:21
const timeFormat = () => {
  const now = new Date();
  return now.toLocaleString("uk-UA", { timeZone: "Europe/Kiev" }).replace(",", "");
};

// üîπ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
const logFormat = format.printf(({ level, message }) => `[${timeFormat()}] ${level.toUpperCase()}: ${message}`);

const logger = createLogger({
  level: "info",
  format: format.combine(format.colorize(), logFormat),
  transports: [
    new transports.Console(),
    new transports.File({ filename: "logs/requests.log", level: "info" }),
    new transports.File({ filename: "logs/errors.log", level: "error" }),
  ],
});

export default logger;
```
‚úî **–õ–æ–≥–∏ —Ç–µ–ø–µ—Ä –º—ñ—Å—Ç—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É `DD.MM.YYYY HH:mm:ss`.**  
‚úî **–í—Å—ñ –∑–∞–ø–∏—Ç–∏ –ª–æ–≥—É—é—Ç—å—Å—è —É `logs/requests.log`, –∞ –ø–æ–º–∏–ª–∫–∏ –≤ `logs/errors.log`.**

---

## üîπ **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π `middleware.js`**
üìå **–î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∫—É `etlsUser` –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è `username`**.

```javascript
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import { jwtVerify } from "jose";
import logger from "@/utils/logger";

const ETLS_SECRET = new TextEncoder().encode(process.env.ETLS_ACCESS);

async function getUsernameFromToken(token) {
  try {
    const { payload } = await jwtVerify(token, ETLS_SECRET);
    return payload.username || "Unknown User";
  } catch (error) {
    return "Unknown User";
  }
}

export async function middleware(req) {
  const { pathname } = req.nextUrl;
  const cookieStore = cookies();
  const accessTokenEtls = cookieStore.get("accessTokenEtls")?.value;
  const refreshTokenEtls = cookieStore.get("refreshTokenEtls")?.value;
  const etlsUserToken = cookieStore.get("etlsUser")?.value;

  const username = etlsUserToken ? await getUsernameFromToken(etlsUserToken) : "Unknown User";

  // üîπ –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ `username`
  const logMessage = `${req.method} ${pathname} from ${username} [${req.headers.get("user-agent")}]`;
  logger.info(logMessage);

  // üîπ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ `/login`, —Ä–æ–±–∏–º–æ logout
  if (pathname === "/login" && (accessTokenEtls || refreshTokenEtls)) {
    logger.info(`${username} accessed /login ‚Üí Logging out`);
    return logoutUser(req);
  }

  return NextResponse.next();
}

function logoutUser(req) {
  return NextResponse.redirect(new URL("/login", req.url), {
    headers: {
      "Set-Cookie": [
        "accessTokenEtls=; HttpOnly; Path=/; Max-Age=0",
        "refreshTokenEtls=; HttpOnly; Path=/; Max-Age=0",
        "userDataEtls=; HttpOnly; Path=/; Max-Age=0",
        "etlsUser=; HttpOnly; Path=/; Max-Age=0",
      ].join(", "),
    },
  });
}

export const config = {
  matcher: ["/login", "/dashboard", "/profile"],
};
```
‚úî **–õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ø–µ—Ä –≤–∫–ª—é—á–∞—î `username`, —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —ñ–∑ `etlsUser`.**  
‚úî **–Ø–∫—â–æ `etlsUser` –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π ‚Äì –≤–∫–∞–∑—É—î—Ç—å—Å—è `"Unknown User"`.**  
‚úî **–õ–æ–≥—É–≤–∞–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å `User-Agent` –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.**  

---

## üîπ **üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è `customFetch.js`**
üìå **–î–æ–¥–∞—î–º–æ `username` —É –∫–æ–∂–µ–Ω –ª–æ–≥ –∑–∞–ø–∏—Ç—É.**

```javascript
import { NextResponse } from "next/server";
import { parse } from "cookie";
import { jwtVerify } from "jose";
import logger from "@/utils/logger";

const REMOTE_API = process.env.REMOTE_API;
const ETLS_SECRET = new TextEncoder().encode(process.env.ETLS_ACCESS);

async function getUsernameFromToken(token) {
  try {
    const { payload } = await jwtVerify(token, ETLS_SECRET);
    return payload.username || "Unknown User";
  } catch (error) {
    return "Unknown User";
  }
}

export async function POST(req) {
  try {
    const { url, options } = await req.json();
    const cookies = parse(req.headers.get("cookie") || "");

    let accessToken = cookies.accessToken;
    const refreshToken = cookies.refreshToken;
    const etlsUserToken = cookies.etlsUser;

    const username = etlsUserToken ? await getUsernameFromToken(etlsUserToken) : "Unknown User";

    if (!accessToken) {
      if (!refreshToken) {
        logger.warn(`${username} ‚Üí No access token and no refresh token ‚Üí Redirecting to login`);
        return redirectToLogin();
      }

      logger.info(`${username} ‚Üí Access token missing ‚Üí Refreshing tokens...`);
      const refreshResponse = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json", Cookie: req.headers.get("cookie") || "" },
      });

      if (!refreshResponse.ok) {
        logger.error(`${username} ‚Üí Failed to refresh tokens ‚Üí Redirecting to login`);
        return redirectToLogin();
      }

      const { accessToken: newAccessToken } = await refreshResponse.json();
      accessToken = newAccessToken;
    }

    let response = await fetch(`${REMOTE_API}${url}`, {
      ...options,
      headers: {
        ...options.headers,
        Authorization: `Bearer ${accessToken}`,
      },
    });

    logger.info(`${username} ‚Üí API request: ${req.method} ${url} - Status: ${response.status}`);

    if (response.status === 401) {
      logger.warn(`${username} ‚Üí Access token expired ‚Üí Refreshing tokens...`);
      const refreshResponse = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json", Cookie: req.headers.get("cookie") || "" },
      });

      if (!refreshResponse.ok) {
        logger.error(`${username} ‚Üí Failed to refresh tokens after 401 ‚Üí Redirecting to login`);
        return redirectToLogin();
      }

      const { accessToken: newAccessToken } = await refreshResponse.json();
      accessToken = newAccessToken;

      response = await fetch(`${REMOTE_API}${url}`, {
        ...options,
        headers: { ...options.headers, Authorization: `Bearer ${newAccessToken}` },
      });

      logger.info(`${username} ‚Üí Retried API request: ${req.method} ${url} - Status: ${response.status}`);
    }

    return NextResponse.json(await response.json());
  } catch (error) {
    logger.error(`Request failed: ${error.message}`);
    return NextResponse.json({ error: "Request failed" }, { status: 500 });
  }
}
```
‚úî **–õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ —Ç–µ–ø–µ—Ä –≤–∫–ª—é—á–∞—î `username`!**  
‚úî **–Ø–∫—â–æ `etlsUser` –Ω–µ —ñ—Å–Ω—É—î ‚Äì –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è `"Unknown User"`.**  
‚úî **–í—Å—ñ –∑–∞–ø–∏—Ç–∏, –≤–∫–ª—é—á–∞—é—á–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤, –ª–æ–≥—É—é—Ç—å—Å—è —Ä–∞–∑–æ–º —ñ–∑ `username`.**  

---

## ‚úÖ **üìå –ü—ñ–¥—Å—É–º–æ–∫**
üîπ **–¢–µ–ø–µ—Ä –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Ç —É Next.js API –ª–æ–≥—É—î `username`, —á–∞—Å —Ç–∞ —Å—Ç–∞—Ç—É—Å.**  
üîπ **`etlsUser` —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ `jose`, —ñ –π–æ–≥–æ `username` –¥–æ–¥–∞—î—Ç—å—Å—è –≤ –ª–æ–≥–∏.**  
üîπ **–õ–æ–≥–∏ –≤ `requests.log` –º–∞—é—Ç—å –≤–∏–≥–ª—è–¥:**
```
[12.06.2024 12:15:21] INFO: GET /dashboard from adminUser [Mozilla/5.0]
```
üöÄ **–¢–≤–æ—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ø–µ—Ä —â–µ –ø–æ—Ç—É–∂–Ω—ñ—à–∞ —Ç–∞ –∑—Ä—É—á–Ω—ñ—à–∞ –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏! üî•**