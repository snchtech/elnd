–û—Å—å —è–∫ –º–æ–∂–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ **Winston** —ñ **Morgan** —É —Ç–≤—ñ–π API-—Å–µ—Ä–≤–µ—Ä –Ω–∞ **Node.js + Express**, —â–æ–± –ª–æ–≥—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ —Ç–∞ –ø–æ–º–∏–ª–∫–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É.

---

### 1Ô∏è‚É£ **–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫**
–í—Å—Ç–∞–Ω–æ–≤–∏ **winston** —ñ **morgan** —á–µ—Ä–µ–∑ `npm`:
```sh
npm install winston morgan
```

---

### 2Ô∏è‚É£ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Winston Logger**
–°—Ç–≤–æ—Ä–∏–º–æ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–µ—Ä–∞:  
#### üìÅ `utils/logger.js`
```javascript
const { createLogger, format, transports } = require('winston');
const { timestamp, printf, combine } = format;
const path = require('path');

// –§–æ—Ä–º–∞—Ç –ª–æ–≥—É: [–î–∞—Ç–∞ –ß–∞—Å] [–†—ñ–≤–µ–Ω—å]: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (User: {username})
const logFormat = printf(({ level, message, timestamp, username }) => {
  return `[${timestamp}] [${level.toUpperCase()}]: ${message} (User: ${username || 'Unknown'})`;
});

const logger = createLogger({
  level: 'info',
  format: combine(
    timestamp({ format: 'DD.MM.YYYY HH:mm:ss' }), // –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É
    logFormat
  ),
  transports: [
    new transports.Console(), // –í–∏–≤—ñ–¥ —É –∫–æ–Ω—Å–æ–ª—å
    new transports.File({ filename: path.join(__dirname, '../logs/app.log') }) // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Ñ–∞–π–ª
  ],
});

module.exports = logger;
```

---

### 3Ô∏è‚É£ **–î–æ–¥–∞–≤–∞–Ω–Ω—è Morgan –¥–ª—è HTTP-–∑–∞–ø–∏—Ç—ñ–≤**
–°—Ç–≤–æ—Ä–∏–º–æ middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤.

#### üìÅ `middlewares/loggerMiddleware.js`
```javascript
const morgan = require('morgan');
const logger = require('../utils/logger');

// –ö–∞—Å—Ç–æ–º–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç Morgan –∑ —ñ–º'—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —î
morgan.token('username', (req) => req.user ? req.user.username : 'Guest');

const requestLogger = morgan(
  ':method :url :status - :response-time ms (User: :username)',
  {
    stream: {
      write: (message) => logger.info(message.trim())
    }
  }
);

module.exports = requestLogger;
```

---

### 4Ô∏è‚É£ **–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ª–æ–≥–µ—Ä–∞ –¥–æ `server.js`**
#### üìÅ `server.js`
```javascript
const express = require('express');
const requestLogger = require('./middlewares/loggerMiddleware');
const authRoute = require('./routes/authRoute');

const app = express();

app.use(express.json());

// –î–æ–¥–∞—î–º–æ middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è HTTP-–∑–∞–ø–∏—Ç—ñ–≤
app.use(requestLogger);

app.use('/api/auth', authRoute);

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
```

---

### 5Ô∏è‚É£ **–î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —É –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä**
#### üìÅ `controllers/authController.js`
```javascript
const { authenticateUser, checkUserRole } = require('../services/oracleService');
const { generateToken } = require('../utils/jwtUtils');
const logger = require('../utils/logger');

// –õ–æ–≥—ñ–Ω —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
exports.login = async (req, res) => {
  const { username, password } = req.body;

  try {
    const isAuthenticated = await authenticateUser(username, password);

    if (!isAuthenticated) {
      logger.warn(`Login failed for user: ${username}`);
      return res.status(401).json({ message: 'Invalid username or password' });
    }

    const hasRole = await checkUserRole(username, 'schemeaccess');
    if (!hasRole) {
      logger.warn(`Access denied for user: ${username}`);
      return res.status(403).json({ message: 'Access denied. Missing role: schemeaccess' });
    }

    const token = generateToken({ username });

    logger.info(`User ${username} logged in successfully`);
    return res.status(200).json({ message: 'Login successful', token });
  } catch (error) {
    logger.error(`Login error for user: ${username} - ${error.message}`);
    return res.status(500).json({ message: 'Internal server error' });
  }
};

// –õ–æ–≥—ñ–Ω —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
exports.tokenLogin = async (req, res) => {
  const { username } = req.user; 

  try {
    const hasRole = await checkUserRole(username, 'schemeaccess');
    if (!hasRole) {
      logger.warn(`Token login denied for user: ${username}`);
      return res.status(403).json({ message: 'Access denied. Missing role: schemeaccess' });
    }

    logger.info(`User ${username} authenticated successfully via token`);
    return res.status(200).json({ message: 'Authenticated successfully' });
  } catch (error) {
    logger.error(`Token login error for user: ${username} - ${error.message}`);
    return res.status(500).json({ message: 'Internal server error' });
  }
};
```

---

### 6Ô∏è‚É£ **–î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —É Middleware –¥–ª—è —Ç–æ–∫–µ–Ω–∞**
#### üìÅ `middlewares/authMiddleware.js`
```javascript
const { verifyJWT } = require('../utils/jwtUtils');
const logger = require('../utils/logger');

exports.verifyToken = (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    logger.warn('Authentication attempt without token');
    return res.status(401).json({ message: 'Authentication token is missing or invalid' });
  }

  const token = authHeader.split(' ')[1];

  try {
    const decoded = verifyJWT(token);
    req.user = decoded; // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ req

    logger.info(`Token verified for user: ${decoded.username}`);
    next();
  } catch (error) {
    logger.warn(`Invalid token provided - ${error.message}`);
    return res.status(401).json({ message: 'Invalid token' });
  }
};
```

---

### üìå **–©–æ –º–∏ —Ä–µ–∞–ª—ñ–∑—É–≤–∞–ª–∏?**
‚úÖ **Winston** –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.  
‚úÖ **Morgan** –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö HTTP-–∑–∞–ø–∏—Ç—ñ–≤ (–º–µ—Ç–æ–¥, URL, —Å—Ç–∞—Ç—É—Å, —á–∞—Å).  
‚úÖ **–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —É middleware —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏**.  
‚úÖ **–õ–æ–≥-—Ñ–∞–π–ª** –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ `logs/app.log`.  

–¢–µ–ø–µ—Ä —É –ª–æ–≥–∞—Ö —Ç–∏ –ø–æ–±–∞—á–∏—à —â–æ—Å—å –Ω–∞ –∑—Ä–∞–∑–æ–∫:
```
[12.06.2025 12:54:10] [INFO]: User admin logged in successfully (User: admin)
[12.06.2025 12:54:15] [WARN]: Token login denied for user: guest (User: guest)
[12.06.2025 12:54:20] [ERROR]: Login error for user: admin - Database connection failed (User: admin)
```
–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –∞–±–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ª–æ–≥–∏ –≤ –æ–∫—Ä–µ–º–∏—Ö —Ñ–∞–π–ª–∞—Ö, –º–æ–∂–µ–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —â–µ –≥–Ω—É—á–∫—ñ—à–µ.

–Ø–∫—â–æ —î —â–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –ø–∏—Ç–∞–π! üöÄ