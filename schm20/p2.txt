–©–æ–± –≤–∏–Ω–µ—Å—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –≤ –æ–∫—Ä–µ–º–∏–π –ª–æ–≥-—Ñ–∞–π–ª, –Ω–∞–ª–∞—à—Ç—É—î–º–æ Winston —Ç–∞–∫, —â–æ–±:
1. **–õ–æ–≥–∏ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ–¥—ñ–π** –∑–∞–ø–∏—Å—É–≤–∞–ª–∏—Å—è —É `logs/app.log`.
2. **–õ–æ–≥–∏ –ø–æ–º–∏–ª–æ–∫** –∑–∞–ø–∏—Å—É–≤–∞–ª–∏—Å—è —É `logs/error.log`.
3. **–õ–æ–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è–ª–∏—Å—è –ø—ñ—Å–ª—è 14 –¥–Ω—ñ–≤**.
4. **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –ª–æ–≥—É –±—É–≤ 5–ú–ë**.

---

### 1Ô∏è‚É£ **–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞**
Winston –ø—ñ–¥—Ç—Ä–∏–º—É—î –æ–±–º–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –ª–æ–≥-—Ñ–∞–π–ª—ñ–≤, –∞–ª–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø–∞–∫–µ—Ç:
```sh
npm install winston-daily-rotate-file
```

---

### 2Ô∏è‚É£ **–û–Ω–æ–≤–ª–µ–Ω–Ω—è `utils/logger.js`**
–°—Ç–≤–æ—Ä–∏–º–æ –æ–∫—Ä–µ–º—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ª–æ–≥—ñ–≤ —Ç–∞ –ª–æ–≥—ñ–≤ –ø–æ–º–∏–ª–æ–∫, –∞ —Ç–∞–∫–æ–∂ –Ω–∞–ª–∞—à—Ç—É—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É —Ç–∞ —Ç–µ—Ä–º—ñ–Ω –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è.

#### üìÅ `utils/logger.js`
```javascript
const { createLogger, format, transports } = require('winston');
const { timestamp, printf, combine } = format;
const path = require('path');
const DailyRotateFile = require('winston-daily-rotate-file');

// –§–æ—Ä–º–∞—Ç –ª–æ–≥—ñ–≤
const logFormat = printf(({ level, message, timestamp, username }) => {
  return `[${timestamp}] [${level.toUpperCase()}]: ${message} (User: ${username || 'Unknown'})`;
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–≥–µ—Ä–∞
const logger = createLogger({
  level: 'info',
  format: combine(
    timestamp({ format: 'DD.MM.YYYY HH:mm:ss' }), // –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É
    logFormat
  ),
  transports: [
    // –õ–æ–≥-—Ñ–∞–π–ª –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ–¥—ñ–π
    new DailyRotateFile({
      filename: path.join(__dirname, '../logs/app-%DATE%.log'),
      datePattern: 'YYYY-MM-DD',
      maxSize: '5m',      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É 5MB
      maxFiles: '14d',    // –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –ª–æ–≥–∏ –ª–∏—à–µ 14 –¥–Ω—ñ–≤
      zippedArchive: true // –ê—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –ª–æ–≥–∏
    }),

    // –õ–æ–≥-—Ñ–∞–π–ª –¥–ª—è –ø–æ–º–∏–ª–æ–∫
    new DailyRotateFile({
      filename: path.join(__dirname, '../logs/error-%DATE%.log'),
      level: 'error',
      datePattern: 'YYYY-MM-DD',
      maxSize: '5m',
      maxFiles: '14d',
      zippedArchive: true
    }),

    // –í–∏–≤—ñ–¥ —É –∫–æ–Ω—Å–æ–ª—å
    new transports.Console()
  ],
});

module.exports = logger;
```

---

### 3Ô∏è‚É£ **–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ `controllers/authController.js`**
–û–Ω–æ–≤–∏–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä, —â–æ–± –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏ —É `error.log`, –∞ —É—Å–ø—ñ—à–Ω—ñ –¥—ñ—ó ‚Äì —É `app.log`.

#### üìÅ `controllers/authController.js`
```javascript
const { authenticateUser, checkUserRole } = require('../services/oracleService');
const { generateToken } = require('../utils/jwtUtils');
const logger = require('../utils/logger');

// –õ–æ–≥—ñ–Ω —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
exports.login = async (req, res) => {
  const { username, password } = req.body;

  try {
    const isAuthenticated = await authenticateUser(username, password);

    if (!isAuthenticated) {
      logger.warn(`Login failed for user: ${username}`);
      return res.status(401).json({ message: 'Invalid username or password' });
    }

    const hasRole = await checkUserRole(username, 'schemeaccess');
    if (!hasRole) {
      logger.warn(`Access denied for user: ${username}`);
      return res.status(403).json({ message: 'Access denied. Missing role: schemeaccess' });
    }

    const token = generateToken({ username });

    logger.info(`User ${username} logged in successfully`);
    return res.status(200).json({ message: 'Login successful', token });
  } catch (error) {
    logger.error(`Login error for user: ${username} - ${error.message}`);
    return res.status(500).json({ message: 'Internal server error' });
  }
};
```

---

### 4Ô∏è‚É£ **–ü—Ä–∏–∫–ª–∞–¥ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —É middleware**
–û–Ω–æ–≤–∏–º–æ middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω—É, —â–æ–± –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏ —É `error.log`.

#### üìÅ `middlewares/authMiddleware.js`
```javascript
const { verifyJWT } = require('../utils/jwtUtils');
const logger = require('../utils/logger');

exports.verifyToken = (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    logger.warn('Authentication attempt without token');
    return res.status(401).json({ message: 'Authentication token is missing or invalid' });
  }

  const token = authHeader.split(' ')[1];

  try {
    const decoded = verifyJWT(token);
    req.user = decoded; // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ req

    logger.info(`Token verified for user: ${decoded.username}`);
    next();
  } catch (error) {
    logger.error(`Invalid token provided - ${error.message}`);
    return res.status(401).json({ message: 'Invalid token' });
  }
};
```

---

### üìå **–©–æ –º–∏ —Ä–µ–∞–ª—ñ–∑—É–≤–∞–ª–∏?**
‚úÖ **–õ–æ–≥–∏ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ–¥—ñ–π** (`logs/app-YYYY-MM-DD.log`)  
‚úÖ **–õ–æ–≥–∏ –ø–æ–º–∏–ª–æ–∫** (`logs/error-YYYY-MM-DD.log`)  
‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ —á–µ—Ä–µ–∑ 14 –¥–Ω—ñ–≤**  
‚úÖ **–ê—Ä—Ö—ñ–≤–∞—Ü—ñ—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤**  
‚úÖ **–û–±–º–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –¥–æ 5MB**  

---

### üìå **–ü—Ä–∏–∫–ª–∞–¥ –ª–æ–≥—ñ–≤ —É `logs/app-2025-06-12.log`**
```
[12.06.2025 12:54:10] [INFO]: User admin logged in successfully (User: admin)
[12.06.2025 12:55:05] [WARN]: Access denied for user: guest (User: guest)
```

### üìå **–ü—Ä–∏–∫–ª–∞–¥ –ª–æ–≥—ñ–≤ —É `logs/error-2025-06-12.log`**
```
[12.06.2025 12:54:30] [ERROR]: Login error for user: admin - Database connection failed (User: admin)
[12.06.2025 12:55:10] [ERROR]: Invalid token provided - jwt expired (User: admin)
```

---

### üî• **–¢–µ–ø–µ—Ä —É —Ç–µ–±–µ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π –ª–æ–≥–µ—Ä –¥–ª—è API!**
–Ø–∫—â–æ —î —â–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äì –ø–∏—Ç–∞–π! üöÄ