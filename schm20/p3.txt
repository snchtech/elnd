### ‚úÖ **üìå –õ–æ–≥—ñ–∫–∞ –¥–ª—è `/login` –≤ `middleware.js`**  
–©–æ–± –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ `/login`, —Ç—Ä–µ–±–∞:  
1. **–Ø–∫—â–æ `accessTokenEtls` –≤–∞–ª—ñ–¥–Ω–∏–π ‚Üí —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ `/` (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π).**  
2. **–Ø–∫—â–æ `accessTokenEtls` –Ω–µ–¥—ñ–π—Å–Ω–∏–π, –∞–ª–µ `refreshTokenEtls` –≤–∞–ª—ñ–¥–Ω–∏–π ‚Üí –æ–Ω–æ–≤–∏—Ç–∏ `accessTokenEtls` —á–µ—Ä–µ–∑ `/api/auth/refreshtoken`, –∞ –ø–æ—Ç—ñ–º —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ `/`.**  
3. **–Ø–∫—â–æ `refreshTokenEtls` —Ç–µ–∂ –Ω–µ–¥—ñ–π—Å–Ω–∏–π ‚Üí –æ—á–∏—â–∞—î–º–æ –≤—Å—ñ `cookies`, –¥–æ–∑–≤–æ–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –∑–∞–ª–∏—à–∏—Ç–∏—Å—è –Ω–∞ `/login`.**  

---

## üîπ **üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è `middleware.js` —Ç—ñ–ª—å–∫–∏ –¥–ª—è `/login`**  
üîπ **–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `if (req.nextUrl.pathname === "/login")`** –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç—ñ–ª—å–∫–∏ `/login`.  
üîπ **–î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –æ–±–æ—Ö —Ç–æ–∫–µ–Ω—ñ–≤ —Ç–∞ –ª–æ–≥—ñ–∫—É —Ä–µ–¥—ñ—Ä–µ–∫—Ç—É.**  

```javascript
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import { jwtVerify } from "jose";
import logger from "@/utils/logger";

const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);

export async function middleware(req) {
  if (req.nextUrl.pathname === "/login") {
    const cookieStore = cookies();
    const accessTokenEtls = cookieStore.get("accessTokenEtls")?.value;
    const refreshTokenEtls = cookieStore.get("refreshTokenEtls")?.value;

    // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ accessTokenEtls
    if (accessTokenEtls) {
      try {
        await jwtVerify(accessTokenEtls, ETLS_ACCESS);
        logger.info("User already authenticated via accessTokenEtls, redirecting to /");
        return NextResponse.redirect(new URL("/", req.url));
      } catch (error) {
        logger.warn("accessTokenEtls expired or invalid, checking refreshTokenEtls...");
      }
    }

    // üîπ –Ø–∫—â–æ accessTokenEtls –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π ‚Üí –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ refreshTokenEtls
    if (refreshTokenEtls) {
      try {
        await jwtVerify(refreshTokenEtls, ETLS_REFRESH);
        logger.info("refreshTokenEtls is valid, requesting new accessTokenEtls...");

        // üîπ –í–∏–∫–æ–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —á–µ—Ä–µ–∑ API
        const refreshResponse = await fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
          method: "POST",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
            Cookie: req.headers.get("cookie") || "",
          },
        });

        if (refreshResponse.ok) {
          logger.info("Successfully refreshed tokens, redirecting to /");
          return NextResponse.redirect(new URL("/", req.url));
        } else {
          logger.error("Failed to refresh tokens, user must log in again.");
        }
      } catch (error) {
        logger.error(`Error refreshing tokens: ${error.message}`);
      }
    }

    // üîπ –Ø–∫—â–æ refreshTokenEtls —Ç–µ–∂ –Ω–µ–¥—ñ–π—Å–Ω–∏–π ‚Üí –û—á–∏—Å—Ç–∫–∞ cookies
    logger.warn("No valid tokens found, clearing cookies and staying on /login.");
    return NextResponse.next({
      headers: {
        "Set-Cookie": [
          "accessTokenEtls=; HttpOnly; Path=/; Max-Age=0",
          "refreshTokenEtls=; HttpOnly; Path=/; Max-Age=0",
          "accessToken=; HttpOnly; Path=/; Max-Age=0",
          "refreshToken=; HttpOnly; Path=/; Max-Age=0",
          "etlsUser=; HttpOnly; Path=/; Max-Age=0",
        ].join(", "),
      },
    });
  }

  return NextResponse.next(); // üîπ –î–ª—è —ñ–Ω—à–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –æ–±—Ä–æ–±–∫–∞ –π–¥–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
}
```

---

## ‚úÖ **üìå –©–æ —Ç—É—Ç –∑—Ä–æ–±–ª–µ–Ω–æ?**
| **–°—Ü–µ–Ω–∞—Ä—ñ–π** | **–©–æ —Å—Ç–∞–Ω–µ—Ç—å—Å—è?** |
|-------------|----------------|
| ‚úÖ `accessTokenEtls` –≤–∞–ª—ñ–¥–Ω–∏–π | üîπ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π ‚Üí —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ `/` |
| ‚ùå `accessTokenEtls` –Ω–µ–¥—ñ–π—Å–Ω–∏–π, –∞–ª–µ ‚úÖ `refreshTokenEtls` –≤–∞–ª—ñ–¥–Ω–∏–π | üîπ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ ‚Üí —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ `/` |
| ‚ùå –û–±–∏–¥–≤–∞ —Ç–æ–∫–µ–Ω–∏ –Ω–µ–¥—ñ–π—Å–Ω—ñ | üîπ –û—á–∏—â—É—î–º–æ `cookies`, –∑–∞–ª–∏—à–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ `/login` |

---

## ‚úÖ **üìå –ü—ñ–¥—Å—É–º–æ–∫**
‚úî **–î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É `accessTokenEtls` + `refreshTokenEtls` —Ç—ñ–ª—å–∫–∏ –¥–ª—è `/login`.**  
‚úî **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ.**  
‚úî **–†–æ–∑–ª–æ–≥—ñ–Ω—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –æ–±–∏–¥–≤–∞ —Ç–æ–∫–µ–Ω–∏ –Ω–µ–¥—ñ–π—Å–Ω—ñ.**  
‚úî **–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `if (req.nextUrl.pathname === "/login")`, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π `middleware.js`.**  

üöÄ **–¢–µ–ø–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∞ `/login` –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó! üî•**