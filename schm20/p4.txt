### ‚úÖ **üìå –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ `accessToken` –∞–±–æ `login/password`**  
–¶–µ–π –∫–æ–¥:  
‚úî –ü–µ—Ä–µ–≤—ñ—Ä—è—î `accessToken` —ñ–∑ **–∑–∞–≥–æ–ª–æ–≤–∫–∞** –∞–±–æ **GET-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `?t=`**  
‚úî –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î `middleware.js`, —â–æ–± –ø–µ—Ä–µ–¥–∞—Ç–∏ `accessToken` —É `api/auth/login.js`  
‚úî –í–∏–∫–æ–Ω—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É `accessToken` –∞–±–æ `login/password` –Ω–∞ `REMOTE_API /login`  
‚úî –ì–µ–Ω–µ—Ä—É—î –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–æ–∫–µ–Ω–∏ (`accessTokenEtls`, `refreshTokenEtls`) –Ω–∞ **Next.js**  
‚úî –ó–±–µ—Ä—ñ–≥–∞—î **URL, –Ω–∞ —è–∫–∏–π —Ö–æ—Ç—ñ–≤ –∑–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á** –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é  

---

## üîπ **üìå `middleware.js` (–æ–±—Ä–æ–±–∫–∞ `accessToken`)**
```javascript
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import logger from "@/utils/logger";

export async function middleware(req) {
  const { pathname, searchParams } = req.nextUrl;

  // üîπ –Ø–∫—â–æ —Ü–µ `/login`, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ `accessToken`
  if (pathname === "/login") {
    const cookieStore = cookies();
    let accessToken = cookieStore.get("accessTokenEtls")?.value;

    // üîπ –î—ñ—Å—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω —ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization: Bearer ...
    const authHeader = req.headers.get("Authorization");
    if (authHeader?.startsWith("Bearer ")) {
      accessToken = authHeader.split(" ")[1];
    }

    // üîπ –î—ñ—Å—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω —ñ–∑ GET-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `?t=...`
    const tokenFromQuery = searchParams.get("t");
    if (!accessToken && tokenFromQuery) {
      accessToken = tokenFromQuery;
    }

    // üîπ –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ `accessToken`, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ —É `api/auth/login`
    if (accessToken) {
      logger.info("Processing login via accessToken...");

      const loginResponse = await fetch(`${req.nextUrl.origin}/api/auth/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ accessToken, redirectTo: pathname }),
      });

      if (loginResponse.ok) {
        logger.info("User authenticated via accessToken, redirecting...");
        return NextResponse.redirect(new URL("/", req.url));
      } else {
        logger.error("Invalid accessToken, redirecting to login.");
      }
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/login", "/dashboard", "/profile"], // –ó–∞—Ö–∏—â–µ–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
};
```
‚úî **–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–æ–∫–µ–Ω —É `GET` —Ç–∞ `Authorization: Bearer ...`**  
‚úî **–Ø–∫—â–æ `accessToken` —î, –ø–µ—Ä–µ–¥–∞—î –π–æ–≥–æ –≤ `api/auth/login`**  
‚úî **–Ø–∫—â–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ—É—Å–ø—ñ—à–Ω–∞, –∑–∞–ª–∏—à–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ `/login`**  

---

## üîπ **üìå `api/auth/login.js` (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–±–æ –ª–æ–≥—ñ–Ω/–ø–∞—Ä–æ–ª—å)**
```javascript
import { NextResponse } from "next/server";
import { SignJWT } from "jose";
import logger from "@/utils/logger";

const REMOTE_API = process.env.REMOTE_API;
const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);
const EXPIRES_IN_ACCESS_ETLS = 15 * 60; // 15 —Ö–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö
const EXPIRES_IN_REFRESH_ETLS = 7 * 24 * 60 * 60; // 7 –¥–Ω—ñ–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö

export async function POST(req) {
  try {
    const { accessToken, username, password, redirectTo } = await req.json();
    let loginPayload = {};

    if (accessToken) {
      logger.info("Logging in via accessToken...");

      loginPayload = { accessToken }; // üîπ –ü–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–∫–µ–Ω
    } else if (username && password) {
      logger.info("Logging in via username/password...");
      loginPayload = { username, password };
    } else {
      return NextResponse.json({ error: "No credentials provided" }, { status: 400 });
    }

    // üîπ –ó–∞–ø–∏—Ç –¥–æ REMOTE_API /login
    const apiResponse = await fetch(`${REMOTE_API}/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(loginPayload),
    });

    if (!apiResponse.ok) {
      return NextResponse.json({ error: "Invalid credentials" }, { status: 401 });
    }

    // üîπ –û—Ç—Ä–∏–º—É—î–º–æ `userData` —Ç–∞ —Ç–æ–∫–µ–Ω–∏
    const { accessToken: newAccessToken, refreshToken, userData } = await apiResponse.json();

    // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–æ–∫–µ–Ω–∏
    const accessTokenEtls = await new SignJWT(userData)
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    const refreshTokenEtls = await new SignJWT(userData)
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_REFRESH_ETLS)
      .sign(ETLS_REFRESH);

    logger.info(`User ${userData.username} authenticated, setting cookies...`);

    // üîπ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ —É `cookies`
    const response = NextResponse.json({ message: "Login successful", userData });

    response.headers.set(
      "Set-Cookie",
      [
        `accessToken=${newAccessToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshToken=${refreshToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `accessTokenEtls=${accessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshTokenEtls=${refreshTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    // üîπ –ü–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –π–æ–≥–æ —Ü—ñ–ª—å–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    const redirectUrl = redirectTo || "/";
    logger.info(`Redirecting user to ${redirectUrl}`);
    return NextResponse.redirect(new URL(redirectUrl, req.url));
  } catch (error) {
    logger.error("Login error:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
```
‚úî **–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ `accessToken`, –∞–±–æ `username/password`**  
‚úî **–Ø–∫—â–æ —î `accessToken`, –ø–µ—Ä–µ–¥–∞—î –π–æ–≥–æ –≤ `REMOTE_API /login`**  
‚úî **–û—Ç—Ä–∏–º—É—î `userData` —Ç–∞ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î —ó—Ö —É cookies**  
‚úî **–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ `redirectTo` –ø—ñ—Å–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó**  

---

## üîπ **üìå `REMOTE_API /login.js` (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–±–æ –ª–æ–≥—ñ–Ω/–ø–∞—Ä–æ–ª—å)**
```javascript
import jwt from "jsonwebtoken";
import { getUserData } from "./userService"; // –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î

const JWT_SECRET = process.env.JWT_SECRET;

export async function POST(req, res) {
  const { accessToken, username, password } = req.body;

  if (accessToken) {
    try {
      const payload = jwt.verify(accessToken, JWT_SECRET);
      const userData = await getUserData(payload.userId);

      if (!userData) {
        return res.status(401).json({ error: "Invalid accessToken" });
      }

      return res.json({
        accessToken,
        refreshToken: generateRefreshToken(userData),
        userData,
      });
    } catch (error) {
      return res.status(401).json({ error: "Invalid accessToken" });
    }
  }

  if (username && password) {
    const userData = await authenticateUser(username, password);
    if (!userData) {
      return res.status(401).json({ error: "Invalid credentials" });
    }

    return res.json({
      accessToken: generateAccessToken(userData),
      refreshToken: generateRefreshToken(userData),
      userData,
    });
  }

  return res.status(400).json({ error: "No credentials provided" });
}
```

---

## ‚úÖ **üìå –©–æ –∑—Ä–æ–±–ª–µ–Ω–æ?**
‚úî **–ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ `accessToken` –≤ `middleware.js`**  
‚úî **–ó–∞–ø–∏—Ç –¥–æ `api/auth/login.js`, —è–∫—â–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–Ω–∏–π**  
‚úî **–û–±—Ä–æ–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ `accessToken` –∞–±–æ `login/password`**  
‚úî **–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö `accessTokenEtls`, `refreshTokenEtls`**  
‚úî **–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É**  

üöÄ **–¢–µ–ø–µ—Ä –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î —ñ–¥–µ–∞–ª—å–Ω–æ! üî•**