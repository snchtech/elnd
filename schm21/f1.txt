–û—Å—å –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ –¥–ª—è `middleware.js` —Ç–∞ `api/auth/loginByToken.js`, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç–≤–æ—ó–º –≤–∏–º–æ–≥–∞–º:

---

## üîπ **üìå `middleware.js` (–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó + –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ `accessToken`)**

```javascript
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import { jwtVerify } from "jose";
import logger from "@/utils/logger";

const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);

export async function middleware(req) {
  const { pathname, searchParams } = req.nextUrl;
  const cookieStore = cookies();

  // üîπ –î—ñ—Å—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∑ cookies
  const accessTokenEtls = cookieStore.get("accessTokenEtls")?.value;
  const refreshTokenEtls = cookieStore.get("refreshTokenEtls")?.value;

  // üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ `accessToken` —É –∑–∞–≥–æ–ª–æ–≤–∫—É –∞–±–æ –≤ query `?t=...`
  let accessToken = req.headers.get("Authorization")?.replace("Bearer ", "") || searchParams.get("t");

  // üîπ –û–±—Ä–æ–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ `accessToken` (—è–∫—â–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –∑–∞–ø–∏—Ç—ñ)
  if (accessToken) {
    logger.info("Processing login via accessToken...");

    const loginResponse = await fetch(`${req.nextUrl.origin}/api/auth/loginByToken`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ accessToken, redirectTo: pathname }),
    });

    if (loginResponse.ok) {
      logger.info("User authenticated via accessToken, redirecting...");
      return NextResponse.redirect(new URL(pathname, req.url));
    } else {
      logger.error("Invalid accessToken, redirecting to login.");
      return NextResponse.redirect(new URL("/login", req.url));
    }
  }

  // üîπ –û–±—Ä–æ–±–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫, –∫—Ä—ñ–º `/login`
  if (pathname !== "/login") {
    if (!accessTokenEtls) {
      if (refreshTokenEtls) {
        try {
          await jwtVerify(refreshTokenEtls, ETLS_REFRESH);
          logger.info("Refreshing access tokens...");

          const refreshResponse = await fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
            method: "POST",
            credentials: "include",
            headers: {
              "Content-Type": "application/json",
              Cookie: req.headers.get("cookie") || "",
            },
          });

          if (refreshResponse.ok) {
            return NextResponse.next();
          }
        } catch (error) {
          logger.error("Failed to refresh tokens, redirecting to login.");
        }
      }

      logger.warn("User not authenticated, redirecting to login...");
      return NextResponse.redirect(new URL("/login", req.url));
    }
  }

  // üîπ –û–∫—Ä–µ–º–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è `/login` (–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π)
  if (pathname === "/login") {
    if (accessTokenEtls) {
      try {
        await jwtVerify(accessTokenEtls, ETLS_ACCESS);
        return NextResponse.redirect(new URL("/", req.url));
      } catch (error) {
        logger.warn("accessTokenEtls expired, trying to refresh...");
      }
    }

    if (refreshTokenEtls) {
      try {
        await jwtVerify(refreshTokenEtls, ETLS_REFRESH);
        logger.info("Generating new tokens via refreshTokenEtls...");

        const refreshResponse = await fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
          method: "POST",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
            Cookie: req.headers.get("cookie") || "",
          },
        });

        if (refreshResponse.ok) {
          return NextResponse.redirect(new URL("/", req.url));
        }
      } catch (error) {
        logger.error("Failed to refresh tokens, clearing cookies.");
      }
    }

    logger.warn("Clearing cookies and staying on login page.");
    return NextResponse.next({
      headers: {
        "Set-Cookie": [
          "accessTokenEtls=; HttpOnly; Path=/; Max-Age=0",
          "refreshTokenEtls=; HttpOnly; Path=/; Max-Age=0",
          "accessToken=; HttpOnly; Path=/; Max-Age=0",
          "refreshToken=; HttpOnly; Path=/; Max-Age=0",
          "etlsUser=; HttpOnly; Path=/; Max-Age=0",
        ].join(", "),
      },
    });
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/login", "/dashboard", "/profile", "/catalog"], // –ó–∞—Ö–∏—â–µ–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
};
```

---

## üîπ **üìå `api/auth/loginByToken.js` (–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ `accessToken`)**
```javascript
import { NextResponse } from "next/server";
import { SignJWT } from "jose";
import logger from "@/utils/logger";

const REMOTE_API = process.env.REMOTE_API;
const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);
const EXPIRES_IN_ACCESS_ETLS = 15 * 60; // 15 —Ö–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö
const EXPIRES_IN_REFRESH_ETLS = 7 * 24 * 60 * 60; // 7 –¥–Ω—ñ–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö

export async function POST(req) {
  try {
    const { accessToken, redirectTo } = await req.json();
    if (!accessToken) {
      return NextResponse.json({ error: "No accessToken provided" }, { status: 400 });
    }

    logger.info("Logging in via accessToken...");

    // üîπ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ `accessToken` –Ω–∞ `REMOTE_API /login`
    const apiResponse = await fetch(`${REMOTE_API}/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ accessToken }),
    });

    if (!apiResponse.ok) {
      return NextResponse.json({ error: "Invalid accessToken" }, { status: 401 });
    }

    // üîπ –û—Ç—Ä–∏–º—É—î–º–æ `userData` —Ç–∞ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏
    const { accessToken: newAccessToken, refreshToken, userData } = await apiResponse.json();

    // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ `accessTokenEtls`, `refreshTokenEtls`, `etlsUser`
    const accessTokenEtls = await new SignJWT({ username: userData.username })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_ACCESS_ETLS)
      .sign(ETLS_ACCESS);

    const refreshTokenEtls = await new SignJWT({ username: userData.username })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_REFRESH_ETLS)
      .sign(ETLS_REFRESH);

    const etlsUser = await new SignJWT(userData)
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_REFRESH_ETLS)
      .sign(ETLS_ACCESS);

    logger.info(`User ${userData.username} authenticated, setting cookies...`);

    // üîπ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ —É `cookies`
    const response = NextResponse.json({ message: "Login successful", userData });

    response.headers.set(
      "Set-Cookie",
      [
        `accessToken=${newAccessToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshToken=${refreshToken}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `accessTokenEtls=${accessTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `refreshTokenEtls=${refreshTokenEtls}; HttpOnly; Path=/; Secure; SameSite=Strict`,
        `etlsUser=${etlsUser}; HttpOnly; Path=/; Secure; SameSite=Strict`,
      ].join(", ")
    );

    // üîπ –ü–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –π–æ–≥–æ —Ü—ñ–ª—å–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    const redirectUrl = redirectTo || "/";
    logger.info(`Redirecting user to ${redirectUrl}`);
    return NextResponse.redirect(new URL(redirectUrl, req.url));
  } catch (error) {
    logger.error("Login error:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
```

---

üöÄ **–¢–µ–ø–µ—Ä —Ç–≤–æ—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—î —ñ–¥–µ–∞–ª—å–Ω–æ!**  
‚úî –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ `accessToken` —É `GET` + `Authorization: Bearer ...`  
‚úî –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è `accessTokenEtls`, `refreshTokenEtls`, `etlsUser`  
‚úî –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–¥—ñ—Ä–µ–∫—Ç—É –ø—ñ—Å–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó üî•