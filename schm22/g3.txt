### ‚úÖ **üìå –î–æ–æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏–π –∫–æ–¥ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ—Ö –≤–∏–º–æ–≥**

---

### üîπ **üìå –©–æ –∑–º—ñ–Ω–µ–Ω–æ?**
‚úî **–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–≥–∏ 14 –¥–Ω—ñ–≤, –Ω–µ –±—ñ–ª—å—à–µ 5MB –Ω–∞ —Ñ–∞–π–ª (—á–µ—Ä–µ–∑ `winston-daily-rotate-file`)**  
‚úî **–§–æ—Ä–º–∞—Ç —á–∞—Å—É `12.03.2025 12:10:14` —É –∫–æ–∂–Ω–æ–º—É –ª–æ–≥-–∑–∞–ø–∏—Å—ñ**  
‚úî **–û—Ç—Ä–∏–º—É—î–º–æ `jwt token` –∑ cookies, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–µ–∑ `jose`, –¥–æ–¥–∞—î–º–æ `login` —É –ª–æ–≥**  
‚úî **–ê–Ω–∞–ª—ñ–∑ —à–≤–∏–¥–∫–æ–¥—ñ—ó `/api/logs` —É `Edge Runtime` —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó**

---

## ‚úÖ **üìå 1. –û–Ω–æ–≤–ª–µ–Ω–∏–π `logger.js` (–õ–æ–≥—É–≤–∞–Ω–Ω—è —É —Ñ–∞–π–ª–∏)**
üîπ **–û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–≥–µ—Ä –¥–ª—è Node.js Runtime**
```javascript
import { createLogger, format, transports } from "winston";
import DailyRotateFile from "winston-daily-rotate-file";

// üîπ –§–æ—Ä–º–∞—Ç —á–∞—Å—É 12.03.2025 12:10:14
const timeFormat = () => {
  const now = new Date();
  return now.toLocaleString("uk-UA", { timeZone: "Europe/Kiev" }).replace(",", "");
};

// üîπ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
const logFormat = format.printf(({ level, message }) => `[${timeFormat()}] ${level.toUpperCase()}: ${message}`);

// üîπ –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ Next.js –ø—Ä–∞—Ü—é—î –≤ Edge Runtime
const isEdgeRuntime = process.env.NEXT_RUNTIME === "edge";

// üîπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ (14 –¥–Ω—ñ–≤, –º–∞–∫—Å. 5MB)
const fileTransport = new DailyRotateFile({
  filename: "logs/app-%DATE%.log",
  datePattern: "YYYY-MM-DD",
  maxSize: "5m",
  maxFiles: "14d",
});

// üîπ –Ø–∫—â–æ —Ü–µ `Edge Runtime`, –ª–æ–≥–∏ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è —É Next.js API `/api/logs`
const logToApi = async (level, message) => {
  try {
    await fetch("/api/logs", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ level, message }),
    });
  } catch (error) {
    console.error("Failed to send log to API:", error);
  }
};

// üîπ –õ–æ–≥–µ—Ä –¥–ª—è `Node.js Runtime`
const nodeLogger = createLogger({
  level: "info",
  format: format.combine(format.colorize(), logFormat),
  transports: [new transports.Console(), fileTransport],
});

// üîπ –Ø–∫—â–æ Edge Runtime ‚Üí –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API-–∑–∞–ø–∏—Ç, —ñ–Ω–∞–∫—à–µ –ø–∏—à–µ–º–æ —á–µ—Ä–µ–∑ Winston
const logger = {
  info: (message) => (isEdgeRuntime ? logToApi("info", message) : nodeLogger.info(message)),
  error: (message) => (isEdgeRuntime ? logToApi("error", message) : nodeLogger.error(message)),
  warn: (message) => (isEdgeRuntime ? logToApi("warn", message) : nodeLogger.warn(message)),
};

export default logger;
```

---

## ‚úÖ **üìå 2. –û–Ω–æ–≤–ª–µ–Ω–∏–π `api/logs.js` (–ó–∞–ø–∏—Å –ª–æ–≥—ñ–≤ –∑ Edge Runtime —É —Ñ–∞–π–ª)**  
üîπ **–î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É `jwt token` –∑ cookies —á–µ—Ä–µ–∑ `jose`, –æ—Ç—Ä–∏–º—É—î–º–æ `login`**  
üîπ **–î–æ–¥–∞—î–º–æ `login` —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–≥—ñ–≤**  
üîπ **–ó–∞–ø–∏—Å—É—î–º–æ —É —Ñ–∞–π–ª–∏ `logs/app-YYYY-MM-DD.log`**  

**üìç –®–ª—è—Ö: `/pages/api/logs.js`**
```javascript
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";
import { jwtVerify } from "jose";

// üîπ –®–ª—è—Ö –¥–æ –ª–æ–≥-—Ñ–∞–π–ª—É (–¥–∏–Ω–∞–º—ñ—á–Ω–æ –∑–∞ –¥–∞—Ç–æ—é)
const getLogFilePath = () => {
  const today = new Date().toISOString().split("T")[0]; // YYYY-MM-DD
  return path.join(process.cwd(), "logs", `app-${today}.log`);
};

// üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–Ω—É –∑ cookies (JWT)
async function getUserLoginFromCookies(req) {
  try {
    const cookies = req.headers.get("cookie") || "";
    const match = cookies.match(/userDataEtls=([^;]+)/); // –û—Ç—Ä–∏–º—É—î–º–æ JWT —Ç–æ–∫–µ–Ω

    if (!match) return "UnknownUser"; // –Ø–∫—â–æ –Ω–µ–º–∞ —Ç–æ–∫–µ–Ω–∞

    const token = match[1];
    const secretKey = new TextEncoder().encode(process.env.ETLS_ACCESS); // üîπ –ö–ª—é—á –∑ .env
    const { payload } = await jwtVerify(token, secretKey);

    return payload.username || "UnknownUser"; // üîπ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ `username`
  } catch (error) {
    return "UnknownUser"; // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞
  }
}

// üîπ API-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –ª–æ–≥—ñ–≤
export async function POST(req) {
  try {
    const { level, message } = await req.json();
    const login = await getUserLoginFromCookies(req); // üîπ –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    if (!level || !message) {
      return NextResponse.json({ error: "Invalid log format" }, { status: 400 });
    }

    // üîπ –§–æ—Ä–º–∞—Ç —á–∞—Å—É 12.03.2025 12:10:14
    const timeStamp = new Date().toLocaleString("uk-UA", { timeZone: "Europe/Kiev" }).replace(",", "");
    const logMessage = `[${timeStamp}] ${level.toUpperCase()} [${login}]: ${message}\n`;

    // üîπ –ó–∞–ø–∏—Å —É —Ñ–∞–π–ª
    fs.appendFileSync(getLogFilePath(), logMessage, "utf8");

    return NextResponse.json({ message: "Log saved" }, { status: 200 });
  } catch (error) {
    console.error("Error writing log:", error);
    return NextResponse.json({ error: "Failed to write log" }, { status: 500 });
  }
}
```

---

## ‚úÖ **üìå 3. –ß–∏ –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `/api/logs` —É `Edge Runtime`?**
### üìå **–ü—Ä–æ–±–ª–µ–º–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ API —É Edge Runtime**
1. **–î–æ–¥–∞—Ç–∫–æ–≤–∏–π HTTP-–∑–∞–ø–∏—Ç –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ª–æ–≥—É**  
   - –ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –≤–µ–ª–∏–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤.  
   - –ú–æ–∂–µ **—Å–ø–æ–≤—ñ–ª—å–Ω—é–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É** —É –≤–∏—Å–æ–∫–æ–Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫–∞—Ö.  
   - –Ø–∫—â–æ **–ª–æ–≥—ñ–≤ –±–∞–≥–∞—Ç–æ** (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100+ –Ω–∞ —Å–µ–∫—É–Ω–¥—É), —Ü–µ **–Ω–µ–¥–æ—Ü—ñ–ª—å–Ω–æ**.  
   
2. **–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Å–æ–º —Ç–∞ –æ–±—Ä–æ–±–∫–æ—é**  
   - API `/api/logs.js` –ø—Ä–∞—Ü—é—î **–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ**, —Ç–æ–º—É –ª–æ–≥–∏ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é.

---

### ‚úÖ **üìå –ö–æ–ª–∏ API `/api/logs` –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏?**
‚úî –Ø–∫—â–æ **—Ç—Ä–µ–±–∞ –ª–æ–≥—É–≤–∞—Ç–∏ –∑ `middleware.js` –∞–±–æ frontend** (–¥–µ `fs` –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π).  
‚úî –Ø–∫—â–æ **–ª–æ–≥—ñ–≤ –º–∞–ª–æ** (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `10-20` –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É).  

---

### ‚ùå **üìå –ö–æ–ª–∏ –≤–∞—Ä—Ç–æ –≤—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è –≤—ñ–¥ API `/api/logs`?**
üîπ **–Ø–∫—â–æ —Ç—Ä–µ–±–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –±–∞–≥–∞—Ç–æ –ª–æ–≥—ñ–≤** (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `100+` –ª–æ–≥—ñ–≤ –Ω–∞ —Å–µ–∫—É–Ω–¥—É).  
üîπ **–Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π** —á–µ—Ä–µ–∑ API-–∑–∞–ø–∏—Ç–∏.  
üîπ **–Ø–∫—â–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏**:
   - –õ–æ–≥—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —É `Cloud Logging` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, AWS CloudWatch, Google Cloud Logging).  
   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è **–≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ –ª–æ–≥-—Å–µ—Ä–≤–µ—Ä–∞ (ELK, Logstash, Fluentd, Loki).**  

---

## ‚úÖ **üìå –í–∏—Å–Ω–æ–≤–æ–∫**
| **–©–æ –∑—Ä–æ–±–ª–µ–Ω–æ?** | **–†—ñ—à–µ–Ω–Ω—è** |
|------------------|------------------------------|
| **–õ–æ–≥–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è 14 –¥–Ω—ñ–≤** | –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ `winston-daily-rotate-file` |
| **–§–∞–π–ª –ª–æ–≥—ñ–≤ ‚â§ 5MB** | –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–æ–≤–∏–π —Ñ–∞–π–ª |
| **–î–æ–¥–∞—î–º–æ —á–∞—Å `12.03.2025 12:10:14`** | –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–µ—Ä–µ–∑ `toLocaleString("uk-UA")` |
| **–û—Ç—Ä–∏–º—É—î–º–æ `login` –∑ JWT (cookies)** | –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ `jose.jwtVerify()` |
| **–ß–∏ –≤–∞—Ä—Ç–æ `/api/logs` —É Edge Runtime?** | –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ **—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ª–æ–≥—ñ–≤ –º–∞–ª–æ** |

üöÄ **–¢–µ–ø–µ—Ä —Ç–≤–æ—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥—ñ–≤ –ø—Ä–∞—Ü—é—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ —ñ –±–µ–∑–ø–µ—á–Ω–æ! üî•**