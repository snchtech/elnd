### ‚úÖ **üìå –î–æ–æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏–π –∫–æ–¥ `logToFile` –∑ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥—É —Ç–∞ –ª–æ–≥—É –ø–æ–º–∏–ª–æ–∫**
---
‚úî **–õ–æ–≥–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è 14 –¥–Ω—ñ–≤, –∫–æ–∂–µ–Ω —Ñ–∞–π–ª ‚â§5MB**  
‚úî **–§–æ—Ä–º–∞—Ç —á–∞—Å—É `12.03.2025 12:10:14`**  
‚úî **–î–æ–¥–∞—î–º–æ `login` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ `etlsUser` JWT —É cookies (`jose`)**  
‚úî **–†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –ª–æ–≥—ñ–≤:**
   - **–ó–≤–∏—á–∞–π–Ω–∏–π –ª–æ–≥ ‚Üí `logs/app-YYYY-MM-DD.log`**
   - **–õ–æ–≥ –ø–æ–º–∏–ª–æ–∫ ‚Üí `logs/errors-YYYY-MM-DD.log`**

---

## ‚úÖ **üìå 1. –û–Ω–æ–≤–ª–µ–Ω–∏–π `logServerAction.js` (–ó–∞–ø–∏—Å –ª–æ–≥—ñ–≤ —É —Ä—ñ–∑–Ω—ñ —Ñ–∞–π–ª–∏)**
**üìç –®–ª—è—Ö:** `/utils/logServerAction.js`

```javascript
"use server"; // üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ server-side —Ñ—É–Ω–∫—Ü—ñ—é

import fs from "fs";
import path from "path";
import { jwtVerify } from "jose";
import DailyRotateFile from "winston-daily-rotate-file";
import { createLogger, format, transports } from "winston";

// üîπ –§–æ—Ä–º–∞—Ç —á–∞—Å—É 12.03.2025 12:10:14
const timeFormat = () => {
  const now = new Date();
  return now.toLocaleString("uk-UA", { timeZone: "Europe/Kiev" }).replace(",", "");
};

// üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–Ω—É –∑ JWT (–∑ cookies)
async function getUserLoginFromToken(token) {
  try {
    if (!token) return "UnknownUser"; // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ–º–∞

    const secretKey = new TextEncoder().encode(process.env.ETLS_ACCESS);
    const { payload } = await jwtVerify(token, secretKey);

    return payload.username || "UnknownUser"; // üîπ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ `username`
  } catch (error) {
    return "UnknownUser"; // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞
  }
}

// üîπ –û—Å–Ω–æ–≤–Ω–∏–π –ª–æ–≥–µ—Ä (–∑–≤–∏—á–∞–π–Ω—ñ –ª–æ–≥–∏)
const infoLogger = createLogger({
  level: "info",
  format: format.combine(
    format.timestamp({ format: "DD.MM.YYYY HH:mm:ss" }), // –§–æ—Ä–º–∞—Ç —á–∞—Å—É
    format.printf(({ timestamp, level, message }) => `[${timestamp}] ${level.toUpperCase()}: ${message}`)
  ),
  transports: [
    new transports.Console(),
    new DailyRotateFile({
      filename: "logs/app-%DATE%.log",
      datePattern: "YYYY-MM-DD",
      maxSize: "5m",
      maxFiles: "14d",
    }),
  ],
});

// üîπ –õ–æ–≥–µ—Ä –¥–ª—è –ø–æ–º–∏–ª–æ–∫
const errorLogger = createLogger({
  level: "error",
  format: format.combine(
    format.timestamp({ format: "DD.MM.YYYY HH:mm:ss" }),
    format.printf(({ timestamp, level, message }) => `[${timestamp}] ${level.toUpperCase()}: ${message}`)
  ),
  transports: [
    new transports.Console(),
    new DailyRotateFile({
      filename: "logs/errors-%DATE%.log",
      datePattern: "YYYY-MM-DD",
      maxSize: "5m",
      maxFiles: "14d",
    }),
  ],
});

// üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É –ª–æ–≥—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ñ–∞–π–ª
export async function logToFile(level, message, token) {
  try {
    const login = await getUserLoginFromToken(token); // üîπ –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    const logMessage = `[${timeFormat()}] ${level.toUpperCase()} [${login}]: ${message}`;

    if (level === "error") {
      errorLogger.error(logMessage);
    } else {
      infoLogger.info(logMessage);
    }

    return { success: true };
  } catch (error) {
    console.error("Error writing log:", error);
    return { success: false, error: "Failed to write log" };
  }
}
```

---

## ‚úÖ **üìå 2. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `logToFile()` —É `middleware.js`**
üîπ **–õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É + –∑–∞–ø–∏—Å –ø–æ–º–∏–ª–æ–∫**
```javascript
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import { logToFile } from "@/utils/logServerAction"; // üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–µ—Ä–≤–µ—Ä–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é

export async function middleware(req) {
  const { pathname } = req.nextUrl;
  const cookieStore = cookies();
  const userToken = cookieStore.get("etlsUser")?.value; // üîπ –û—Ç—Ä–∏–º—É—î–º–æ JWT —Ç–æ–∫–µ–Ω

  try {
    // üîπ –õ–æ–≥—É—î–º–æ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Ç (–∑–∞–ø–∏—Å —É `logs/app-YYYY-MM-DD.log`)
    await logToFile("info", `Request to ${pathname}`, userToken);
    return NextResponse.next();
  } catch (error) {
    // üîπ –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ–º–∏–ª–∫—É —É `logs/errors-YYYY-MM-DD.log`
    await logToFile("error", `Middleware error: ${error.message}`, userToken);
    return NextResponse.error();
  }
}

export const config = {
  matcher: ["/dashboard", "/profile"], // –ó–∞—Ö–∏—â–µ–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
};
```

---

## ‚úÖ **üìå 3. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `logToFile()` —É API Next.js**
üîπ **üìç –û–Ω–æ–≤–ª–µ–Ω–∏–π API `/api/someEndpoint.js`:**
```javascript
import { NextResponse } from "next/server";
import { logToFile } from "@/utils/logServerAction";
import { cookies } from "next/headers";

export async function POST(req) {
  const cookieStore = cookies();
  const userToken = cookieStore.get("etlsUser")?.value;

  try {
    await logToFile("info", "User triggered API request", userToken);
    return NextResponse.json({ message: "API request received" });
  } catch (error) {
    await logToFile("error", `API error: ${error.message}`, userToken);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
```

---

## ‚úÖ **üìå –í–∏—Å–Ω–æ–≤–æ–∫**
| **–©–æ –∑—Ä–æ–±–ª–µ–Ω–æ?** | **–†—ñ—à–µ–Ω–Ω—è** |
|------------------|------------|
| **–ó–∞–ø–∏—Å —É —Ñ–∞–π–ª–∏ –Ω–∞–ø—Ä—è–º—É (–±–µ–∑ API)** | `logToFile()` –∑ `fs.appendFileSync()` |
| **–õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ JWT —É cookies** | `jwtVerify()` —á–µ—Ä–µ–∑ `jose` |
| **–§–æ—Ä–º–∞—Ç —á–∞—Å—É `12.03.2025 12:10:14`** | `toLocaleString("uk-UA")` |
| **–†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –ª–æ–≥—ñ–≤:** | ‚úÖ –û—Å–Ω–æ–≤–Ω—ñ ‚Üí `logs/app-YYYY-MM-DD.log` |
| | ‚úÖ –ü–æ–º–∏–ª–∫–∏ ‚Üí `logs/errors-YYYY-MM-DD.log` |
| **–®–≤–∏–¥–∫–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤ `middleware.js` —Ç–∞ API** | **–ë–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö API-–∑–∞–ø–∏—Ç—ñ–≤** |
| **–ó–±–µ—Ä—ñ–≥–∞—î–º–æ 14 –¥–Ω—ñ–≤, ‚â§5MB** | `winston-daily-rotate-file` |

üöÄ **–õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–ª–æ —â–µ –Ω–∞–¥—ñ–π–Ω—ñ—à–∏–º! üî•**