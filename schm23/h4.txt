–û—Å—å –ø–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä –æ–Ω–æ–≤–ª–µ–Ω—å –¥–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É **—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–ª—å–±–æ–º—É** —á–µ—Ä–µ–∑ **–º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ**, **–≤–∞–ª–∏–¥–∞—Ü—ñ—é**, **POST-–∑–∞–ø–∏—Ç –¥–æ API Next.js** —ñ **SQL-–∑–∞–ø–∏—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö** —É –±–∞–∑—É.

---

## üîπ **1. SQL-–∑–∞–ø–∏—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –∞–ª—å–±–æ–º—É**
```sql
INSERT INTO ALBUM (
    name, 
    depart_id, 
    unit_id, 
    description, 
    date_create, 
    version, 
    stable, 
    creator_id, 
    last_editor_id
) VALUES (
    :name, 
    :depart_id, 
    :unit_id, 
    :description, 
    SYSDATE, 
    1, 
    1, 
    :creator_id, 
    :creator_id
)
RETURNING id INTO :new_id;
```
- **`SYSDATE`** ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—î –¥–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.
- **`version = 1`** ‚Äî –ø–æ—á–∞—Ç–∫–æ–≤–∞ –≤–µ—Ä—Å—ñ—è –∞–ª—å–±–æ–º—É.
- **`stable = 1`** ‚Äî –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∞–ª—å–±–æ–º —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π.
- **`creator_id` —Ç–∞ `last_editor_id`** ‚Äî –∑–∞–ø–∏—Å—É—î–º–æ ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

---

## üîπ **2. API-–µ–Ω–¥–ø–æ—ñ–Ω—Ç Next.js –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É**  
–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª **`/pages/api/rest/createAlbum.js`**:

```javascript
import { queryDatabase } from "@/utils/db";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  try {
    const { name, depart_id, unit_id, description, creator_id } = req.body;

    if (!name || !depart_id || !unit_id || !creator_id) {
      return res.status(400).json({ error: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è" });
    }

    const sql = `
      INSERT INTO ALBUM (name, depart_id, unit_id, description, date_create, version, stable, creator_id, last_editor_id)
      VALUES (:name, :depart_id, :unit_id, :description, SYSDATE, 1, 1, :creator_id, :creator_id)
      RETURNING id INTO :new_id
    `;

    const params = { name, depart_id, unit_id, description, creator_id, new_id: { dir: "out", type: "NUMBER" } };
    const result = await queryDatabase(sql, params);

    res.status(201).json({ success: true, album_id: result.outBinds.new_id });
  } catch (error) {
    console.error("Error creating album:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
}
```

---

## üîπ **3. –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤ `utils/api.js`**
```javascript
export const createAlbum = async (albumData) => {
  return fetchData("/api/rest/createAlbum", {
    method: "POST",
    body: JSON.stringify(albumData),
  });
};
```

---

## üîπ **4. –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É**
–î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–æ–≤–∏–π –∞–ª—å–±–æ–º", —è–∫–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—î **Material-UI Modal**, –∑ **–≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é** —á–µ—Ä–µ–∑ `Formik` + `Yup`.

### **–û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É `/albums.tsx`**
```javascript
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { fetchDepartments, fetchUnits, fetchAlbums, createAlbum } from "@/utils/api";
import { Container, Grid, Button, TextField, MenuItem, Dialog, DialogTitle, DialogContent, DialogActions } from "@mui/material";
import { Add } from "@mui/icons-material";
import { Formik, Form, Field } from "formik";
import * as Yup from "yup";

export default function AlbumsPage() {
  const router = useRouter();
  const { mode } = router.query;
  const [departments, setDepartments] = useState([]);
  const [units, setUnits] = useState([]);
  const [albums, setAlbums] = useState([]);
  const [openModal, setOpenModal] = useState(false);

  useEffect(() => {
    async function loadData() {
      setDepartments(await fetchDepartments());
      setUnits(await fetchUnits());
      setAlbums(await fetchAlbums());
    }
    loadData();
  }, []);

  // –§–æ—Ä–º–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Yup
  const validationSchema = Yup.object().shape({
    name: Yup.string().required("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É"),
    depart_id: Yup.number().required("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª"),
    unit_id: Yup.number().required("–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª"),
  });

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–ª—å–±–æ–º—É
  const handleSubmit = async (values, { setSubmitting, resetForm }) => {
    try {
      await createAlbum({ ...values, creator_id: 1 }); // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ 1, –ø–æ—Ç—ñ–º –±–µ—Ä–µ–º–æ –∑ —Å–µ—Å—ñ—ó
      setOpenModal(false);
      setAlbums(await fetchAlbums()); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–ª—å–±–æ–º—ñ–≤ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
      resetForm();
    } catch (error) {
      console.error("Error creating album:", error);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Container maxWidth="xl">
      <Grid container spacing={3}>
        {/* –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å */}
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={8}>
            <TextField label="–ü–æ—à—É–∫" variant="outlined" fullWidth />
          </Grid>
          {mode === "editor" && (
            <Grid item xs={4} style={{ textAlign: "right" }}>
              <Button variant="contained" color="success" startIcon={<Add />} onClick={() => setOpenModal(true)}>
                –ù–æ–≤–∏–π –∞–ª—å–±–æ–º
              </Button>
            </Grid>
          )}
        </Grid>

        {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ */}
        <Dialog open={openModal} onClose={() => setOpenModal(false)}>
          <DialogTitle>–ù–æ–≤–∏–π –∞–ª—å–±–æ–º</DialogTitle>
          <Formik
            initialValues={{ name: "", depart_id: "", unit_id: "", description: "" }}
            validationSchema={validationSchema}
            onSubmit={handleSubmit}
          >
            {({ isSubmitting, errors, touched }) => (
              <Form>
                <DialogContent>
                  {/* –í—ñ–¥–¥—ñ–ª */}
                  <Field as={TextField} select label="–í—ñ–¥–¥—ñ–ª" name="depart_id" fullWidth error={touched.depart_id && !!errors.depart_id} helperText={touched.depart_id && errors.depart_id}>
                    {departments.map(dep => (
                      <MenuItem key={dep.id} value={dep.id}>{dep.name}</MenuItem>
                    ))}
                  </Field>

                  {/* –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª */}
                  <Field as={TextField} select label="–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª" name="unit_id" fullWidth error={touched.unit_id && !!errors.unit_id} helperText={touched.unit_id && errors.unit_id}>
                    {units.map(unit => (
                      <MenuItem key={unit.id} value={unit.id}>{unit.name}</MenuItem>
                    ))}
                  </Field>

                  {/* –ù–∞–∑–≤–∞ */}
                  <Field as={TextField} label="–ù–∞–∑–≤–∞" name="name" fullWidth error={touched.name && !!errors.name} helperText={touched.name && errors.name} />

                  {/* –û–ø–∏—Å */}
                  <Field as={TextField} label="–û–ø–∏—Å" name="description" fullWidth multiline rows={3} />

                </DialogContent>
                <DialogActions>
                  <Button onClick={() => setOpenModal(false)} color="secondary">–°–∫–∞—Å—É–≤–∞—Ç–∏</Button>
                  <Button type="submit" color="primary" variant="contained" disabled={isSubmitting}>–î–æ–¥–∞—Ç–∏</Button>
                </DialogActions>
              </Form>
            )}
          </Formik>
        </Dialog>
      </Grid>
    </Container>
  );
}
```

---

## üîπ **–©–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ?**
‚úÖ **–ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ** –∑ —Ñ–æ—Ä–º–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É  
‚úÖ **–í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ `Yup`** (–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è)  
‚úÖ **–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É —á–µ—Ä–µ–∑ API Next.js**  
‚úÖ **–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è**  

–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É! üöÄ