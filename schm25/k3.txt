–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ `/albums.tsx`, –¥–µ **`Grid` –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ `Box` —Ç–∞ `Stack`**, –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ **–Ω–æ–≤–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ Material-UI**.

---

### **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ `/albums.tsx`**
```javascript
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { fetchDepartments, fetchUnits, fetchAlbums, createAlbum } from "@/utils/api";
import { Container, Box, Stack, Button, TextField, MenuItem, Dialog, DialogTitle, DialogContent, DialogActions, Paper } from "@mui/material";
import { Add } from "@mui/icons-material";
import { Formik, Form, Field } from "formik";
import * as Yup from "yup";

export default function AlbumsPage() {
  const router = useRouter();
  const { mode } = router.query;
  const [departments, setDepartments] = useState([]);
  const [units, setUnits] = useState([]);
  const [albums, setAlbums] = useState([]);
  const [openModal, setOpenModal] = useState(false);

  useEffect(() => {
    async function loadData() {
      setDepartments(await fetchDepartments());
      setUnits(await fetchUnits());
      setAlbums(await fetchAlbums());
    }
    loadData();
  }, []);

  // –§–æ—Ä–º–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Yup
  const validationSchema = Yup.object().shape({
    name: Yup.string().required("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É"),
    depart_id: Yup.number().required("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª"),
    unit_id: Yup.number().required("–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª"),
  });

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–ª—å–±–æ–º—É
  const handleSubmit = async (values, { setSubmitting, resetForm }) => {
    try {
      await createAlbum({ ...values, creator_id: 1 }); // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ 1, –ø–æ—Ç—ñ–º –±–µ—Ä–µ–º–æ –∑ —Å–µ—Å—ñ—ó
      setOpenModal(false);
      setAlbums(await fetchAlbums()); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–ª—å–±–æ–º—ñ–≤ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
      resetForm();
    } catch (error) {
      console.error("Error creating album:", error);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Container maxWidth="xl">
      <Box display="flex" flexDirection="column" gap={3}>
        
        {/* –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å */}
        <Stack direction="row" spacing={2} alignItems="center">
          <TextField label="–ü–æ—à—É–∫" variant="outlined" fullWidth />
          {mode === "editor" && (
            <Button variant="contained" color="success" startIcon={<Add />} onClick={() => setOpenModal(true)}>
              –ù–æ–≤–∏–π –∞–ª—å–±–æ–º
            </Button>
          )}
        </Stack>

        {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ */}
        <Dialog open={openModal} onClose={() => setOpenModal(false)}>
          <DialogTitle>–ù–æ–≤–∏–π –∞–ª—å–±–æ–º</DialogTitle>
          <Formik
            initialValues={{ name: "", depart_id: "", unit_id: "", description: "" }}
            validationSchema={validationSchema}
            onSubmit={handleSubmit}
          >
            {({ isSubmitting, errors, touched }) => (
              <Form>
                <DialogContent>
                  <Stack spacing={2}>
                    {/* –í—ñ–¥–¥—ñ–ª */}
                    <Field as={TextField} select label="–í—ñ–¥–¥—ñ–ª" name="depart_id" fullWidth 
                      error={touched.depart_id && !!errors.depart_id} 
                      helperText={touched.depart_id && errors.depart_id}>
                      {departments.map(dep => (
                        <MenuItem key={dep.id} value={dep.id}>{dep.name}</MenuItem>
                      ))}
                    </Field>

                    {/* –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª */}
                    <Field as={TextField} select label="–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª" name="unit_id" fullWidth 
                      error={touched.unit_id && !!errors.unit_id} 
                      helperText={touched.unit_id && errors.unit_id}>
                      {units.map(unit => (
                        <MenuItem key={unit.id} value={unit.id}>{unit.name}</MenuItem>
                      ))}
                    </Field>

                    {/* –ù–∞–∑–≤–∞ */}
                    <Field as={TextField} label="–ù–∞–∑–≤–∞" name="name" fullWidth 
                      error={touched.name && !!errors.name} 
                      helperText={touched.name && errors.name} />

                    {/* –û–ø–∏—Å */}
                    <Field as={TextField} label="–û–ø–∏—Å" name="description" fullWidth multiline rows={3} />
                  </Stack>
                </DialogContent>

                <DialogActions>
                  <Button onClick={() => setOpenModal(false)} color="secondary">–°–∫–∞—Å—É–≤–∞—Ç–∏</Button>
                  <Button type="submit" color="primary" variant="contained" disabled={isSubmitting}>–î–æ–¥–∞—Ç–∏</Button>
                </DialogActions>
              </Form>
            )}
          </Formik>
        </Dialog>
      </Box>
    </Container>
  );
}
```

---

## **üîπ –©–æ –æ–Ω–æ–≤–ª–µ–Ω–æ?**
‚úÖ **–ó–∞–º—ñ–Ω–∏–≤ `Grid` –Ω–∞ `Box` —Ç–∞ `Stack`** (–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–æ–≤–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º MUI).  
‚úÖ **–î–æ–¥–∞–≤ `Stack spacing={2}`** –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.  
‚úÖ **–ó–∞–ª–∏—à–∏–≤ `Container maxWidth="xl"` –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è.**  

üöÄ **–¢–µ–ø–µ—Ä –∫–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º Material-UI —Ç–∞ –≤–∏–≥–ª—è–¥–∞—î –±—ñ–ª—å—à —Å—É—á–∞—Å–Ω–æ!**