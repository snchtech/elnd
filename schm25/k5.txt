–û—Å—å —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –∫–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ **—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ Next.js**:

‚úÖ **–°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ö–µ–º–∏** (`NewSchemeModal.js`).  
‚úÖ **–û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É `/albums/[albumId].js`**, –¥–µ –±—É–¥–µ —Å–ø–∏—Å–æ–∫ —Å—Ö–µ–º —Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è.  
‚úÖ **–í–∏–ø—Ä–∞–≤–ª—è—î–º–æ Grid (–∑–∞–º—ñ–Ω–∞ –Ω–∞ Box + Stack)** –∑–≥—ñ–¥–Ω–æ –∑ –Ω–æ–≤–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ MUI.  
‚úÖ **–û–ø—Ç–∏–º—ñ–∑—É—î–º–æ –∫–æ–¥** –∑–≥—ñ–¥–Ω–æ –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é Next.js.

---

## **üìå 1. –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç `NewSchemeModal.js`**
–¶–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏–º–µ –∑–∞ **—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ö–µ–º–∏**.

### üìÅ **`components/NewSchemeModal.js`**
```javascript
import { useState, useEffect } from "react";
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, MenuItem } from "@mui/material";
import { Formik, Form, Field } from "formik";
import * as Yup from "yup";
import { fetchAlbums, fetchDepartments, fetchUnits, createScheme } from "@/utils/api";
import { useRouter } from "next/router";

export default function NewSchemeModal({ open, onClose, onSchemeCreated }) {
  const [albums, setAlbums] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [units, setUnits] = useState([]);
  const router = useRouter();
  const { albumId } = router.query;

  useEffect(() => {
    async function loadData() {
      setAlbums(await fetchAlbums());
      setDepartments(await fetchDepartments());
      setUnits(await fetchUnits());
    }
    loadData();
  }, []);

  const validationSchema = Yup.object().shape({
    album_id: Yup.number().required("–û–±–µ—Ä—ñ—Ç—å –∞–ª—å–±–æ–º"),
    name: Yup.string().required("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É"),
    depart_id: Yup.number().required("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª"),
    unit_id: Yup.number().required("–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª"),
    format: Yup.string().required("–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç"),
  });

  const handleSubmit = async (values, { setSubmitting, resetForm }) => {
    try {
      const response = await createScheme({ ...values, editor_id: 1 }); // ID —Ç–∏–º—á–∞—Å–æ–≤–æ 1
      onClose();
      onSchemeCreated();
      resetForm();
      router.push(`/editor/${response.scheme_id}`); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ Editor
    } catch (error) {
      console.error("Error creating scheme:", error);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ö–µ–º–∏</DialogTitle>
      <Formik initialValues={{ album_id: albumId || "", name: "", depart_id: "", unit_id: "", format: "A3", description: "" }} validationSchema={validationSchema} onSubmit={handleSubmit}>
        {({ isSubmitting, errors, touched }) => (
          <Form>
            <DialogContent>
              <Field as={TextField} select label="–í–∏–±–µ—Ä—ñ—Ç—å –∞–ª—å–±–æ–º" name="album_id" fullWidth error={touched.album_id && !!errors.album_id} helperText={touched.album_id && errors.album_id}>
                {albums.map(album => (
                  <MenuItem key={album.id} value={album.id}>{album.name}</MenuItem>
                ))}
              </Field>
              <Field as={TextField} select label="–í—ñ–¥–¥—ñ–ª" name="depart_id" fullWidth error={touched.depart_id && !!errors.depart_id} helperText={touched.depart_id && errors.depart_id}>
                {departments.map(dep => (
                  <MenuItem key={dep.id} value={dep.id}>{dep.name}</MenuItem>
                ))}
              </Field>
              <Field as={TextField} select label="–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª" name="unit_id" fullWidth error={touched.unit_id && !!errors.unit_id} helperText={touched.unit_id && errors.unit_id}>
                {units.map(unit => (
                  <MenuItem key={unit.id} value={unit.id}>{unit.name}</MenuItem>
                ))}
              </Field>
              <Field as={TextField} label="–ù–∞–∑–≤–∞" name="name" fullWidth error={touched.name && !!errors.name} helperText={touched.name && errors.name} />
              <Field as={TextField} select label="–§–æ—Ä–º–∞—Ç" name="format" fullWidth error={touched.format && !!errors.format} helperText={touched.format && errors.format}>
                {["A4", "A3", "A2", "A1", "A0"].map(format => (
                  <MenuItem key={format} value={format}>{format}</MenuItem>
                ))}
              </Field>
              <Field as={TextField} label="–û–ø–∏—Å" name="description" fullWidth multiline rows={3} />
            </DialogContent>
            <DialogActions>
              <Button onClick={onClose} color="secondary">–°–∫–∞—Å—É–≤–∞—Ç–∏</Button>
              <Button type="submit" color="primary" variant="contained" disabled={isSubmitting}>–°—Ç–≤–æ—Ä–∏—Ç–∏</Button>
            </DialogActions>
          </Form>
        )}
      </Formik>
    </Dialog>
  );
}
```

---

## **üìå 2. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ `albums/[albumId].js`**
–¶—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –º—ñ—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ö–µ–º + –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Å—Ö–µ–º—É".

### üìÅ **`pages/albums/[albumId].js`**
```javascript
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { fetchSchemes } from "@/utils/api";
import { Container, Box, Stack, Button, Paper } from "@mui/material";
import { Add, ArrowBack } from "@mui/icons-material";
import NavigationTree from "@/components/NavigationTree";
import SearchBar from "@/components/SearchBar";
import NewSchemeModal from "@/components/NewSchemeModal";

export default function AlbumSchemesPage() {
  const router = useRouter();
  const { albumId } = router.query;
  const [schemes, setSchemes] = useState([]);
  const [openModal, setOpenModal] = useState(false);

  useEffect(() => {
    async function loadData() {
      setSchemes(await fetchSchemes());
    }
    loadData();
  }, []);

  return (
    <Container maxWidth="xl">
      <Box display="flex" gap={3}>
        
        {/* –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å (–¥–µ—Ä–µ–≤–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó) */}
        <Box width="25%">
          <Paper sx={{ padding: 2 }}>
            <h3>–ù–∞–≤—ñ–≥–∞—Ü—ñ—è</h3>
            <NavigationTree />
          </Paper>
        </Box>

        {/* –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <Box flex={1}>

          {/* –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å */}
          <Stack direction="row" spacing={2} alignItems="center">
            <Button onClick={() => router.push("/albums")} startIcon={<ArrowBack />}>–ù–∞–∑–∞–¥</Button>
            <SearchBar placeholder="–ü–æ—à—É–∫ —Å—Ö–µ–º" />
            <Button variant="contained" color="success" startIcon={<Add />} onClick={() => setOpenModal(true)}>
              –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Å—Ö–µ–º—É
            </Button>
          </Stack>

          {/* –¢–∞–±–ª–∏—Ü—è —Å—Ö–µ–º */}
          <Paper sx={{ mt: 2, padding: 2 }}>
            <h3>–°–ø–∏—Å–æ–∫ —Å—Ö–µ–º</h3>
            {schemes.length > 0 ? (
              <ul>
                {schemes.map(scheme => (
                  <li key={scheme.id}>{scheme.name}</li>
                ))}
              </ul>
            ) : (
              <p>–ù–µ–º–∞—î —Å—Ö–µ–º</p>
            )}
          </Paper>

          {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ */}
          <NewSchemeModal open={openModal} onClose={() => setOpenModal(false)} onSchemeCreated={() => setSchemes(fetchSchemes())} />

        </Box>
      </Box>
    </Container>
  );
}
```

---

## **üìå –©–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ?**
‚úÖ **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç `NewSchemeModal.js`** –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ö–µ–º–∏.  
‚úÖ **–û–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ `/albums/[albumId].js`** –∑ –∫–Ω–æ–ø–∫–æ—é "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Å—Ö–µ–º—É".  
‚úÖ **–í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ `Grid` (–∑–∞–º—ñ–Ω–∏–≤ –Ω–∞ `Box` + `Stack`)** –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–æ–≤–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º MUI.  
‚úÖ **–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ö–µ–º –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó**.  

üöÄ **–¢–µ–ø–µ—Ä –∫–æ–¥ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î Next.js —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ —Ç–∞ —î –≥–Ω—É—á–∫–∏–º –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è!**