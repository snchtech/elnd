–û—Å—å API –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ö–µ–º–∏ –∑–∞ –∞–Ω–∞–ª–æ–≥—ñ—î—é –∑ –∞–ª—å–±–æ–º–∞–º–∏.

---

### **1. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª** `/pages/api/rest/createScheme.js`
```javascript
import { queryDatabase } from "@/utils/db";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  try {
    const { album_id, name, depart_id, unit_id, format, description, creator_id } = req.body;

    if (!album_id || !name || !depart_id || !unit_id || !creator_id) {
      return res.status(400).json({ error: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è" });
    }

    const sql = `
      INSERT INTO SCHEME (album_id, name, depart_id, unit_id, format, description, status)
      VALUES (:album_id, :name, :depart_id, :unit_id, :format, :description, 1)
      RETURNING id INTO :new_id
    `;

    const params = {
      album_id,
      name,
      depart_id,
      unit_id,
      format,
      description,
      new_id: { dir: "out", type: "NUMBER" }
    };

    const result = await queryDatabase(sql, params);

    res.status(201).json({ success: true, scheme_id: result.outBinds.new_id });
  } catch (error) {
    console.error("Error creating scheme:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
}
```

---

### **2. –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤ `utils/api.js`**
```javascript
export const createScheme = async (schemeData) => {
  return fetchData("/api/rest/createScheme", {
    method: "POST",
    body: JSON.stringify(schemeData),
  });
};
```

---

### **–©–æ –¥–∞–ª—ñ?**
‚úÖ **API —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Å—Ö–µ–º—É** —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—ó `id`.  
‚úÖ **–î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —á–µ—Ä–µ–∑ `POST`** —ñ –≤–∫–ª—é—á–∞—é—Ç—å `album_id`, `–Ω–∞–∑–≤—É`, `–≤—ñ–¥–¥—ñ–ª`, `–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª`, `—Ñ–æ—Ä–º–∞—Ç`, `–æ–ø–∏—Å`.  
‚úÖ **API –ø–æ–≤–µ—Ä—Ç–∞—î `scheme_id`**, —è–∫–∏–π –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ö–µ–º–∏.  

–ì–æ—Ç–æ–≤–æ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –≤ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ **`NewSchemeModal.js`**! üöÄ