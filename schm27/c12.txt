–û–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç **`NewSchemeModal.js`**, –¥–µ **–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç `A3`**.  

–û—Å—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ–¥:
```tsx
import { useState, useEffect } from "react";
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, MenuItem } from "@mui/material";
import { Formik, Form, Field } from "formik";
import * as Yup from "yup";
import { fetchAlbums, fetchDepartments, fetchUnits, createScheme } from "@/utils/api";
import { useRouter } from "next/router";

export default function NewSchemeModal({ open, onClose, onSchemeCreated }) {
  const [albums, setAlbums] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [units, setUnits] = useState([]);
  const router = useRouter();
  const { albumId } = router.query;

  useEffect(() => {
    async function loadData() {
      setAlbums(await fetchAlbums());
      setDepartments(await fetchDepartments());
      setUnits(await fetchUnits());
    }
    loadData();
  }, []);

  const validationSchema = Yup.object().shape({
    album_id: Yup.number().required("–û–±–µ—Ä—ñ—Ç—å –∞–ª—å–±–æ–º"),
    name: Yup.string().required("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É"),
    depart_id: Yup.number().required("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª"),
    unit_id: Yup.number().required("–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª"),
    format: Yup.string().required("–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç"),
  });

  const handleSubmit = async (values, { setSubmitting, resetForm }) => {
    try {
      const response = await createScheme({ ...values, editor_id: 1 }); // ID —Ç–∏–º—á–∞—Å–æ–≤–æ 1
      onClose();
      onSchemeCreated();
      resetForm();
      router.push(`/editor/${response.scheme_id}`); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ Editor
    } catch (error) {
      console.error("Error creating scheme:", error);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ö–µ–º–∏</DialogTitle>
      <Formik
        initialValues={{
          album_id: albumId || "",
          name: "",
          depart_id: "",
          unit_id: "",
          format: "A3", // –§–æ—Ä–º–∞—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º A3
          description: "",
        }}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ isSubmitting, errors, touched }) => (
          <Form>
            <DialogContent>
              <Field
                as={TextField}
                select
                label="–í–∏–±–µ—Ä—ñ—Ç—å –∞–ª—å–±–æ–º"
                name="album_id"
                fullWidth
                error={touched.album_id && !!errors.album_id}
                helperText={touched.album_id && errors.album_id}
              >
                {albums.map((album) => (
                  <MenuItem key={album.id} value={album.id}>
                    {album.name}
                  </MenuItem>
                ))}
              </Field>
              <Field
                as={TextField}
                select
                label="–í—ñ–¥–¥—ñ–ª"
                name="depart_id"
                fullWidth
                error={touched.depart_id && !!errors.depart_id}
                helperText={touched.depart_id && errors.depart_id}
              >
                {departments.map((dep) => (
                  <MenuItem key={dep.id} value={dep.id}>
                    {dep.name}
                  </MenuItem>
                ))}
              </Field>
              <Field
                as={TextField}
                select
                label="–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª"
                name="unit_id"
                fullWidth
                error={touched.unit_id && !!errors.unit_id}
                helperText={touched.unit_id && errors.unit_id}
              >
                {units.map((unit) => (
                  <MenuItem key={unit.id} value={unit.id}>
                    {unit.name}
                  </MenuItem>
                ))}
              </Field>
              <Field
                as={TextField}
                label="–ù–∞–∑–≤–∞"
                name="name"
                fullWidth
                error={touched.name && !!errors.name}
                helperText={touched.name && errors.name}
              />
              <Field
                as={TextField}
                select
                label="–§–æ—Ä–º–∞—Ç"
                name="format"
                fullWidth
                error={touched.format && !!errors.format}
                helperText={touched.format && errors.format}
              >
                {["A4", "A3", "A2", "A1", "A0"].map((format) => (
                  <MenuItem key={format} value={format}>
                    {format}
                  </MenuItem>
                ))}
              </Field>
              <Field as={TextField} label="–û–ø–∏—Å" name="description" fullWidth multiline rows={3} />
            </DialogContent>
            <DialogActions>
              <Button onClick={onClose} color="secondary">
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </Button>
              <Button type="submit" color="primary" variant="contained" disabled={isSubmitting}>
                –°—Ç–≤–æ—Ä–∏—Ç–∏
              </Button>
            </DialogActions>
          </Form>
        )}
      </Formik>
    </Dialog>
  );
}
```

---

### **–©–æ –∑–º—ñ–Ω–∏–ª–æ—Å—å?**
‚úÖ **–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É –ø–æ–ª—ñ "–§–æ—Ä–º–∞—Ç" –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è "A3"**.  
‚úÖ **–ü–µ—Ä–µ–≤—ñ—Ä–∏–≤, —â–æ–± `initialValues` –º—ñ—Å—Ç–∏–≤ `"A3"` —É –ø–æ–ª—ñ `format`**.  
‚úÖ **–í–∏–ø—Ä–∞–≤–∏–≤ –ø–æ–º–∏–ª–∫—É —É `router.push` (–∫–∞–≤–∏–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ä–∞–Ω—ñ—à–µ)**.  

–¢–µ–ø–µ—Ä –Ω–æ–≤—ñ —Å—Ö–µ–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –º–∞—Ç–∏–º—É—Ç—å **—Ñ–æ—Ä–º–∞—Ç "A3"**, –∞–ª–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏ –π–æ–≥–æ –Ω–∞ —ñ–Ω—à–∏–π. üöÄ