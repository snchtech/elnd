–û—Å—å –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥, —è–∫–∏–π **–≤—Å—ñ –∑–∞–ø–∏—Ç–∏ (GET, POST, PUT, DELETE)** –Ω–∞–¥—Å–∏–ª–∞—î —á–µ—Ä–µ–∑ `POST` –¥–æ `customfetch`, –∞ `customfetch` –≤–∂–µ —Å–∞–º –≤–∏—Ä—ñ—à—É—î, —è–∫ –æ–±—Ä–æ–±–ª—è—Ç–∏ –∑–∞–ø–∏—Ç.

---

## **üîπ –û–Ω–æ–≤–ª–µ–Ω–∏–π `customfetch.js` (–≤—Å—ñ –∑–∞–ø–∏—Ç–∏ —á–µ—Ä–µ–∑ POST)**
```javascript
import { NextResponse } from 'next/server';
import { logoutUser } from '../../../utils/auth';

export const runtime = 'edge';
const REMOTE_API = process.env.MAIN_API_URL;

export default async function customFetch(req) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ body-–∑–∞–ø–∏—Ç—É
        const { url, options } = await req.json();
        
        // –û—Ç—Ä–∏–º—É—î–º–æ cookies
        const cookieStore = req.cookies;
        let accessToken = cookieStore.get('accessToken')?.value;
        let refreshToken = cookieStore.get('refreshToken')?.value;
        let etlsUser = cookieStore.get('etlsUser')?.value;

        // –Ø–∫—â–æ –Ω–µ–º–∞—î accessToken, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ —á–µ—Ä–µ–∑ refreshToken
        if (!accessToken) {
            if (!refreshToken) return logoutUser(req);

            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || ''
                }
            });

            if (!refreshedTokens.ok) return logoutUser(req);

            const { newAccessToken } = await refreshedTokens.json();
            accessToken = newAccessToken;
        }

        // –í–∏–∫–æ–Ω—É—î–º–æ POST-–∑–∞–ø–∏—Ç –¥–æ REMOTE_API –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü—ñ—ó
        let fetchOptions = {
            method: 'POST',
            credentials: 'include',
            headers: {
                Authorization: `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                method: options.method || 'GET',  // –í–∫–∞–∑—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–µ—Ç–æ–¥ —É —Ç—ñ–ª—ñ
                data: options.body || {}  // –ü–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–Ω—ñ
            })
        };

        let response = await fetch(`${REMOTE_API}${url}`, fetchOptions);

        // –Ø–∫—â–æ –æ—Ç—Ä–∏–º—É—î–º–æ 401, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –ø–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
        if (response.status === 401) {
            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || ''
                }
            });

            if (!refreshedTokens.ok) return logoutUser(req);

            const refreshData = await refreshedTokens.json();
            accessToken = refreshData.newAccessToken;
            refreshToken = refreshData.newRefreshToken;
            etlsUser = refreshData.newEtlsUser;

            // –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç
            fetchOptions.headers.Authorization = `Bearer ${accessToken}`;
            response = await fetch(`${REMOTE_API}${url}`, fetchOptions);
        }

        // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        const responseResults = NextResponse.json(await response.json());

        // –û–Ω–æ–≤–ª—é—î–º–æ cookies
        responseResults.headers.set(
            'Set-Cookie',
            [
                `accessToken=${accessToken}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshToken=${refreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                `etlsUser=${etlsUser}; HttpOnly; Path=/; Secure; Max-Age=43200`
            ].join(',')
        );

        return responseResults;
    } catch (error) {
        console.error("Error in customFetch:", error);
        return NextResponse.json({ error: 'Request failed' }, { status: 500 });
    }
}
```

---

## **üîπ –û–Ω–æ–≤–ª–µ–Ω–∏–π `fetchData` —É `utils/api.js` (–≤—Å—ñ –∑–∞–ø–∏—Ç–∏ —á–µ—Ä–µ–∑ POST)**
```javascript
export const fetchData = async (url, method = 'GET', data = {}) => {
    try {
        const res = await fetch('/api/rest/customfetch', {
            method: 'POST',
            credentials: 'include',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ url, options: { method, body: data } }),
        });

        if (!res.ok) {
            throw new Error(`Failed to fetch ${url}`);
        }

        return await res.json();
    } catch (error) {
        console.error(`Error fetching ${url}:`, error);
        return null;
    }
};

// **GET-–∑–∞–ø–∏—Ç (–≤—ñ–Ω –≤—Å–µ –æ–¥–Ω–æ –π–¥–µ —á–µ—Ä–µ–∑ POST)**
export const getAlbums = async (filters = {}) => {
    return fetchData('/api/album/list', 'GET', filters);
};

// **POST-–∑–∞–ø–∏—Ç (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É)**
export const createAlbum = async (data) => {
    return fetchData('/api/album/create-album', 'POST', data);
};

// **PUT-–∑–∞–ø–∏—Ç (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É)**
export const updateAlbum = async (albumId, data) => {
    return fetchData(`/api/album/update/${albumId}`, 'PUT', data);
};

// **DELETE-–∑–∞–ø–∏—Ç (–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É)**
export const deleteAlbum = async (albumId) => {
    return fetchData(`/api/album/delete/${albumId}`, 'DELETE');
};
```

---

## **–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î —Ç–µ–ø–µ—Ä?**
‚úÖ **–í—Å–µ —á–µ—Ä–µ–∑ `POST`**, –∞–ª–µ **–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —ñ–º—ñ—Ç—É–≤–∞–Ω–Ω—è–º –º–µ—Ç–æ–¥—ñ–≤ (`GET`, `PUT`, `DELETE`)**.  
‚úÖ –í—Å—ñ –∑–∞–ø–∏—Ç–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —É `body`, –∞ `customfetch` –≤–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –∑–∞–ø–∏—Ç—É (`method: "GET"` –∞–±–æ `method: "DELETE"`, —Ç–æ—â–æ).  
‚úÖ –ú–æ–∂–Ω–∞ —Ä–æ–±–∏—Ç–∏ —è–∫ `GET`, —Ç–∞–∫ —ñ `POST` –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å.  
‚úÖ **–£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥** –±–µ–∑ –∑–º—ñ–Ω–∏ —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–≥–æ API.

---

## **–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è**
```javascript
// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–ª—å–±–æ–º—ñ–≤ (GET)
const albums = await getAlbums({ depart_id: 2, unit_id: 5 });

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É (POST)
const newAlbum = await createAlbum({
    name: "–ù–æ–≤–∏–π –∞–ª—å–±–æ–º",
    depart_id: 2,
    unit_id: 5,
    description: "–û–ø–∏—Å –∞–ª—å–±–æ–º—É",
    creator_id: 10
});

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É (PUT)
const updatedAlbum = await updateAlbum(3, { name: "–û–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞–∑–≤–∞" });

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É (DELETE)
await deleteAlbum(3);
```

---

## **–ü–µ—Ä–µ–≤–∞–≥–∏ —Ü—å–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É**
üîπ –í—Å—ñ –∑–∞–ø–∏—Ç–∏ `GET`, `POST`, `PUT`, `DELETE` –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è —á–µ—Ä–µ–∑ `POST`, —Ç–æ–º—É **–Ω–µ–º–∞—î –ø—Ä–æ–±–ª–µ–º —ñ–∑ `body` –≤ GET**.  
üîπ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ª–µ–≥–∫–æ **–ª–æ–≥—É–≤–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤** (–æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ —Ç–µ–ø–µ—Ä –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –≤ `body`).  
üîπ **–ü—Ä–æ—Å—Ç–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è API** ‚Äì –º–æ–∂–Ω–∞ –ª–µ–≥–∫–æ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–∞–ø–∏—Ç–∏.  
üîπ **–ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ–π API**, –≤—Å–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –Ω–∞ —Ä—ñ–≤–Ω—ñ `customfetch`.

---

### üöÄ **–¢–µ–ø–µ—Ä —É –≤–∞—Å —î —î–¥–∏–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ —á–µ—Ä–µ–∑ POST!**