–¢–∞–∫, —É –≤–∞—à–æ–º—É –∫–æ–¥—ñ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è –¥–æ `customfetch.js` —á–µ—Ä–µ–∑ `POST`, –∞–ª–µ —Å—Ç–æ—Ä–æ–Ω–Ω—î API (`REMOTE_API`) —Ç–µ–∂ –æ—Ç—Ä–∏–º—É—î –ª–∏—à–µ `POST`, —â–æ –Ω–µ —î –∫–æ—Ä–µ–∫—Ç–Ω–∏–º –¥–ª—è RESTful API.  

---

### **üîπ –ß–∏ —Ü–µ –ø—Ä–æ–±–ª–µ–º–∞?**
–¢–∞–∫, —è–∫—â–æ –≤–∞—à `REMOTE_API` (—Å—Ç–æ—Ä–æ–Ω–Ω—ñ–π —Å–µ—Ä–≤–µ—Ä) –æ—á—ñ–∫—É—î `GET`, `PUT`, –∞–±–æ `DELETE`, —Ç–æ –∑–∞—Ä–∞–∑ –≤—ñ–Ω –æ—Ç—Ä–∏–º—É—î —Ç—ñ–ª—å–∫–∏ `POST`, —â–æ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ **–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ API**. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
- `getAlbums()` –Ω–∞–¥—Å–∏–ª–∞—î `POST` –∑–∞–º—ñ—Å—Ç—å `GET`, —ñ API –º–æ–∂–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ü–µ.
- `deleteAlbum()` –Ω–∞–¥—Å–∏–ª–∞—î `POST` –∑–∞–º—ñ—Å—Ç—å `DELETE`, —ñ API –º–æ–∂–µ –Ω–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Ç.

> ‚ùå **–ó–∞—Ä–∞–∑ –≤–∞—à –∫–æ–¥ –ø–æ—Ä—É—à—É—î REST-—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏, –±–æ `REMOTE_API` –æ—á—ñ–∫—É—î —Ä—ñ–∑–Ω—ñ HTTP-–º–µ—Ç–æ–¥–∏, –∞–ª–µ –æ—Ç—Ä–∏–º—É—î –ª–∏—à–µ `POST`.**

---

### **üîπ –Ø–∫ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏?**
–¢—Ä–µ–±–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π `method` —É `fetchOptions.method` –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ `REMOTE_API`.

#### **‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π `customfetch.js`**
```javascript
import { NextResponse } from 'next/server';
import { logoutUser } from '../../../utils/auth';

export const runtime = 'edge';
const REMOTE_API = process.env.MAIN_API_URL;

export default async function customFetch(req) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ body-–∑–∞–ø–∏—Ç—É
        const { url, options } = await req.json();
        
        // –û—Ç—Ä–∏–º—É—î–º–æ cookies
        const cookieStore = req.cookies;
        let accessToken = cookieStore.get('accessToken')?.value;
        let refreshToken = cookieStore.get('refreshToken')?.value;
        let etlsUser = cookieStore.get('etlsUser')?.value;

        // –Ø–∫—â–æ –Ω–µ–º–∞—î accessToken, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ —á–µ—Ä–µ–∑ refreshToken
        if (!accessToken) {
            if (!refreshToken) return logoutUser(req);

            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || ''
                }
            });

            if (!refreshedTokens.ok) return logoutUser(req);

            const { newAccessToken } = await refreshedTokens.json();
            accessToken = newAccessToken;
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Ç—É
        const apiMethod = options.method || 'GET';

        // –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ REMOTE_API –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –º–µ—Ç–æ–¥–æ–º
        let fetchOptions = {
            method: apiMethod, // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π HTTP-–º–µ—Ç–æ–¥
            credentials: 'include',
            headers: {
                Authorization: `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            }
        };

        // –Ø–∫—â–æ –º–µ—Ç–æ–¥ –Ω–µ GET –∞–±–æ DELETE, –¥–æ–¥–∞—î–º–æ body
        if (!['GET', 'DELETE'].includes(apiMethod)) {
            fetchOptions.body = JSON.stringify(options.body || {});
        }

        let response = await fetch(`${REMOTE_API}${url}`, fetchOptions);

        // –Ø–∫—â–æ –æ—Ç—Ä–∏–º—É—î–º–æ 401, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –ø–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
        if (response.status === 401) {
            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || ''
                }
            });

            if (!refreshedTokens.ok) return logoutUser(req);

            const refreshData = await refreshedTokens.json();
            accessToken = refreshData.newAccessToken;
            refreshToken = refreshData.newRefreshToken;
            etlsUser = refreshData.newEtlsUser;

            // –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            fetchOptions.headers.Authorization = `Bearer ${accessToken}`;
            response = await fetch(`${REMOTE_API}${url}`, fetchOptions);
        }

        // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        const responseResults = NextResponse.json(await response.json());

        // –û–Ω–æ–≤–ª—é—î–º–æ cookies
        responseResults.headers.set(
            'Set-Cookie',
            [
                `accessToken=${accessToken}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshToken=${refreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                `etlsUser=${etlsUser}; HttpOnly; Path=/; Secure; Max-Age=43200`
            ].join(',')
        );

        return responseResults;
    } catch (error) {
        console.error("Error in customFetch:", error);
        return NextResponse.json({ error: 'Request failed' }, { status: 500 });
    }
}
```

---

### **üîπ –©–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è –≤ `customfetch.js`?**
‚úÖ **–¢–µ–ø–µ—Ä `REMOTE_API` –æ—Ç—Ä–∏–º—É—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ (`GET`, `POST`, `PUT`, `DELETE`)**.  
‚úÖ **GET —Ç–∞ DELETE-–∑–∞–ø–∏—Ç–∏ –±—ñ–ª—å—à–µ –Ω–µ –º—ñ—Å—Ç—è—Ç—å `body`, –±–æ —Ü–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º.**  
‚úÖ **API –ø—Ä–∞—Ü—é—î –∑–∞ RESTful –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏, –Ω–µ –∑–º—É—à—É—é—á–∏ –≤—Å–µ –π—Ç–∏ —á–µ—Ä–µ–∑ `POST`.**

---

### **üîπ –û–Ω–æ–≤–ª–µ–Ω–∏–π `fetchData` —É `utils/api.js`**
```javascript
export const fetchData = async (url, method = 'GET', data = {}) => {
    try {
        const res = await fetch('/api/rest/customfetch', {
            method: 'POST', // ‚úÖ –£—Å—ñ –∑–∞–ø–∏—Ç–∏ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è —á–µ—Ä–µ–∑ POST
            credentials: 'include',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ url, options: { method, body: data } }),
        });

        if (!res.ok) {
            throw new Error(`Failed to fetch ${url}`);
        }

        return await res.json();
    } catch (error) {
        console.error(`Error fetching ${url}:`, error);
        return null;
    }
};

// **GET-–∑–∞–ø–∏—Ç (—Ç–µ–ø–µ—Ä –≤—ñ–Ω –ø—Ä–∞—Ü—é—î —è–∫ GET –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–º—É API)**
export const getAlbums = async (filters = {}) => {
    return fetchData('/api/album/list', 'GET', filters);
};

// **POST-–∑–∞–ø–∏—Ç (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É)**
export const createAlbum = async (data) => {
    return fetchData('/api/album/create-album', 'POST', data);
};

// **PUT-–∑–∞–ø–∏—Ç (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É)**
export const updateAlbum = async (albumId, data) => {
    return fetchData(`/api/album/update/${albumId}`, 'PUT', data);
};

// **DELETE-–∑–∞–ø–∏—Ç (–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É)**
export const deleteAlbum = async (albumId) => {
    return fetchData(`/api/album/delete/${albumId}`, 'DELETE');
};
```

---

### **üîπ –ü—ñ–¥—Å—É–º–æ–∫**
‚úÖ `fetchData` **–∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î `POST` –¥–æ `customfetch`**, –∞–ª–µ `customfetch` —Ç–µ–ø–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—î –º–µ—Ç–æ–¥ (`GET`, `POST`, `PUT`, `DELETE`) –¥–æ `REMOTE_API`.  
‚úÖ `REMOTE_API` –æ—Ç—Ä–∏–º—É—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ HTTP-–º–µ—Ç–æ–¥–∏, —Ç–æ–º—É –ø—Ä–∞—Ü—é—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ RESTful API.  
‚úÖ **–¢–µ–ø–µ—Ä API-–∫–ª—ñ—î–Ω—Ç –Ω–µ –ø–æ—Ä—É—à—É—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤, —ñ –≤—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ.**

üöÄ **–ó —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —Ç–µ–ø–µ—Ä –≤—Å–µ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!**