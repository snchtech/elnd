### üîπ **–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–±–ª–µ–º–∏**  
–í–∞—à –∫–æ–¥ –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–Ω–æ–≤–ª—é—î —Ç–æ–∫–µ–Ω–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–º—É API (`REMOTE_API`), –∞–ª–µ **–Ω–µ –æ–Ω–æ–≤–ª—é—î cookies –Ω–∞ Next.js —Å–µ—Ä–≤–µ—Ä—ñ** (`customfetch.js`).  

üëâ **–ì–æ–ª–æ–≤–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞:**  
`refreshresttokens.js` –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏, –∞–ª–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—î —ó—Ö –Ω–∞–∑–∞–¥ —É `customfetch.js`, –∞–±–æ –∂ `customfetch.js` –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î –æ–Ω–æ–≤–ª–µ–Ω—ñ —Ç–æ–∫–µ–Ω–∏ —É `Set-Cookie`.

---

### **üîπ –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —ó—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è**
#### **1Ô∏è‚É£ –ü–æ–º–∏–ª–∫–∞ —É `refreshresttokens.js`: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å `Set-Cookie`**
–í–∞—à –∫–æ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫:
```javascript
response.headers.set(
    'Set-Cookie',
    [
        `accessToken=${newAccessToken}; HttpOnly; Path=/; Max-Age=43200`,
        `refreshToken=${newRefreshToken}: HttpOnly; Path=/; Max-Age=43200`, 
        `etlsUser=${newEtlsUser}; HttpOnly; Path=/; Max-Age=43200`,
    ].join(','),
)
```
üî¥ **–ü—Ä–æ–±–ª–µ–º–∏:**
- `refreshToken=${newRefreshToken}: HttpOnly;` ‚Äì –∑–∞–π–≤–∏–π `:` –ø–µ—Ä–µ–¥ `HttpOnly`, —á–µ—Ä–µ–∑ —â–æ —Ü–µ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –ø—Ä–∞—Ü—é—î.  
- –£ `NextResponse.json({...})` –≤–∏ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç–µ JSON, –∞–ª–µ **–Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç–µ —Ç–æ–∫–µ–Ω–∏ —á–µ—Ä–µ–∑ cookies –ø—Ä–∞–≤–∏–ª—å–Ω–æ**.  

‚úÖ **–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:**
```javascript
response.headers.set(
    'Set-Cookie',
    [
        `accessToken=${newAccessToken}; HttpOnly; Path=/; Max-Age=43200`,
        `refreshToken=${newRefreshToken}; HttpOnly; Path=/; Max-Age=43200`, 
        `etlsUser=${newEtlsUser}; HttpOnly; Path=/; Max-Age=43200`,
    ].join(','),
);
```
---

#### **2Ô∏è‚É£ –ü–æ–º–∏–ª–∫–∞ —É `customfetch.js`: –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤, –≤–æ–Ω–∏ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ cookies**
–ö–æ–ª–∏ `accessToken` –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π, –≤–∞—à –∫–æ–¥ –æ—Ç—Ä–∏–º—É—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π `newAccessToken`, `newRefreshToken`, –∞–ª–µ **–Ω–µ –æ–Ω–æ–≤–ª—é—î —ó—Ö —É –±—Ä–∞—É–∑–µ—Ä—ñ**.

üëâ **–£ –∫–æ–¥—ñ `customfetch.js` –ø—ñ—Å–ª—è `refreshresttokens.js` –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Ä—É—á–Ω—É –æ–Ω–æ–≤–∏—Ç–∏ cookies.**  

üî¥ **–ü–æ–º–∏–ª–∫–∞ —É `customfetch.js`:**
```javascript
accessToken = refreshData.newAccessToken;
refreshToken = refreshData.newRefreshToken;
etlsUser = refreshData.newEtlsUser;
```
‚úÖ **–ü–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ `Set-Cookie` —Ç–∞–∫:**  
```javascript
response.headers.set(
    'Set-Cookie',
    [
        `accessToken=${accessToken}; HttpOnly; Path=/; Max-Age=43200`,
        `refreshToken=${refreshToken}; HttpOnly; Path=/; Max-Age=43200`,
        `etlsUser=${etlsUser}; HttpOnly; Path=/; Secure; Max-Age=43200`,
    ].join(',')
);
```

---

## üîπ **–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ `refreshresttokens.js`**
```javascript
import { NextResponse } from 'next/server';
import { SignJWT } from 'jose';

export const runtime = 'edge';

const REMOTE_API = process.env.MAIN_API_URL;
const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const EXPIRES_IN_ACCESS_ETLS = 30 * 60; // 30 —Ö–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö
const EXPIRES_IN_REFRESH_ETLS = 12 * 60 * 60; // 12 –≥–æ–¥–∏–Ω —É —Å–µ–∫—É–Ω–¥–∞—Ö

export default async function refreshRestToken(req) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ cookies
        const cookieStore = req.cookies;
        const refreshToken = cookieStore.get('refreshToken')?.value;

        // –Ø–∫—â–æ –Ω–µ–º–∞—î refresh token
        if (!refreshToken) {
            console.warn('No refresh token available');
            return NextResponse.json({ error: 'No refresh token' }, { status: 401 });
        }

        // –ó–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —É REMOTE_API
        const refreshResponse = await fetch(`${REMOTE_API}/api/auth/refresh`, {
            method: 'GET',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
                Cookie: `refreshToken=${refreshToken}`,
            },
        });

        if (!refreshResponse.ok) {
            console.error('Failed to refresh token');
            return NextResponse.json({ error: 'Failed to refresh token' }, { status: 401 });
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ userData
        const refreshedData = await refreshResponse.json();
        const newAccessToken = refreshedData.accessToken;
        const newRefreshToken = refreshedData.refreshToken;
        const userData = refreshedData.user;

        // –ì–µ–Ω–µ—Ä—É—î–º–æ userDataEtls —á–µ—Ä–µ–∑ "jose"
        const newEtlsUser = await new SignJWT(userData)
            .setProtectedHeader({ alg: 'HS256' })
            .setExpirationTime(Math.floor(Date.now() / 1000) + EXPIRES_IN_REFRESH_ETLS)
            .sign(ETLS_ACCESS);

        // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ–∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ —É "Set-Cookie"
        const response = NextResponse.json({
            newAccessToken,
            newRefreshToken,
            newEtlsUser,
        });

        response.headers.set(
            'Set-Cookie',
            [
                `accessToken=${newAccessToken}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshToken=${newRefreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                `etlsUser=${newEtlsUser}; HttpOnly; Path=/; Secure; Max-Age=43200`,
            ].join(',')
        );

        return response;
    } catch (error) {
        console.error('Error refreshing tokens:', error);
        return NextResponse.json({ error: 'Request failed' }, { status: 500 });
    }
}
```

---

## üîπ **–û–Ω–æ–≤–ª–µ–Ω–∏–π `customfetch.js`**
```javascript
import { NextResponse } from 'next/server';
import { logoutUser } from '../../../utils/auth';

export const runtime = 'edge';
const REMOTE_API = process.env.MAIN_API_URL;

export default async function customFetch(req) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ body-–∑–∞–ø–∏—Ç—É
        const { url, options } = await req.json();
        
        // –û—Ç—Ä–∏–º—É—î–º–æ cookies
        const cookieStore = req.cookies;
        let accessToken = cookieStore.get('accessToken')?.value;
        let refreshToken = cookieStore.get('refreshToken')?.value;
        let etlsUser = cookieStore.get('etlsUser')?.value;

        // –Ø–∫—â–æ –Ω–µ–º–∞—î accessToken, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ —á–µ—Ä–µ–∑ refreshToken
        if (!accessToken) {
            if (!refreshToken) return logoutUser(req);

            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || ''
                }
            });

            if (!refreshedTokens.ok) return logoutUser(req);

            const refreshData = await refreshedTokens.json();
            accessToken = refreshData.newAccessToken;
            refreshToken = refreshData.newRefreshToken;
            etlsUser = refreshData.newEtlsUser;
        }

        // –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ REMOTE_API –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –º–µ—Ç–æ–¥–æ–º
        let fetchOptions = {
            method: options.method || 'GET',
            credentials: 'include',
            headers: {
                Authorization: `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            }
        };

        if (!['GET', 'DELETE'].includes(options.method)) {
            fetchOptions.body = JSON.stringify(options.body || {});
        }

        let response = await fetch(`${REMOTE_API}${url}`, fetchOptions);

        // –Ø–∫—â–æ –æ—Ç—Ä–∏–º—É—î–º–æ 401, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –ø–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
        if (response.status === 401) {
            return logoutUser(req);
        }

        // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        const responseResults = NextResponse.json(await response.json());

        // –û–Ω–æ–≤–ª—é—î–º–æ cookies
        responseResults.headers.set(
            'Set-Cookie',
            [
                `accessToken=${accessToken}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshToken=${refreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                `etlsUser=${etlsUser}; HttpOnly; Path=/; Secure; Max-Age=43200`,
            ].join(',')
        );

        return responseResults;
    } catch (error) {
        console.error("Error in customFetch:", error);
        return NextResponse.json({ error: 'Request failed' }, { status: 500 });
    }
}
```

üöÄ **–¢–µ–ø–µ—Ä —Ç–æ–∫–µ–Ω–∏ –±—É–¥—É—Ç—å –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!**