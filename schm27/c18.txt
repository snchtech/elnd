### üîπ **–©–æ –æ–∑–Ω–∞—á–∞—î —Ü—è –ø–æ–º–∏–ª–∫–∞?**
–¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ —É –≤–∞—à–æ–º—É `customfetch.js` –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –∑—Ä–æ–±–∏—Ç–∏ `await response.json()` —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î **–Ω–µ JSON, –∞ HTML**.  
–í –¥–∞–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É, –π–º–æ–≤—ñ—Ä–Ω–æ, —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ **HTML-–ø–æ–º–∏–ª–∫–æ—é** (`<!DOCTYPE html>`), —è–∫–∞ –≤–∫–∞–∑—É—î –Ω–∞ **–ø–æ–º–∏–ª–∫–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞**.

---

### **üîπ –ü—Ä–∏—á–∏–Ω–∏ –ø–æ–º–∏–ª–∫–∏**
1. **–ó–∞–ø–∏—Ç –¥–æ `refreshresttokens.js` –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –∞–ª–µ –ø–æ–≤–µ—Ä—Ç–∞—î HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ–º–∏–ª–∫–∏** (–∑–∞–º—ñ—Å—Ç—å JSON).  
2. **–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î 500 –∞–±–æ —ñ–Ω—à–∏–π –∫–æ–¥ –ø–æ–º–∏–ª–∫–∏**, —ñ Next.js –Ω–µ –æ–±—Ä–æ–±–ª—è—î —Ü—é –ø–æ–º–∏–ª–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ.  
3. **–ü—Ä–æ–±–ª–µ–º–∏ –∑ CORS –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Content-Type** ‚Äì —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î `text/html` –∑–∞–º—ñ—Å—Ç—å `application/json`.

---

### **üîπ –Ø–∫ –∑–Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É?**
–î–æ–¥–∞–π—Ç–µ **–ø–µ—Ä–µ–≤—ñ—Ä–∫—É `response.headers.get('content-type')`**, —â–æ–± –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —â–æ —Å–∞–º–µ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–µ—Ä–≤–µ—Ä.

üîπ **–û–Ω–æ–≤–ª–µ–Ω–∏–π `customfetch.js` –∑ –ª–æ–≥–∞–º–∏:**
```javascript
import { NextResponse } from 'next/server';
import { logoutUser } from '../../../utils/auth';

export const runtime = 'edge';
const REMOTE_API = process.env.MAIN_API_URL;

export default async function customFetch(req) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ body-–∑–∞–ø–∏—Ç—É
        const { url, options } = await req.json();
        
        // –û—Ç—Ä–∏–º—É—î–º–æ cookies
        const cookieStore = req.cookies;
        let accessToken = cookieStore.get('accessToken')?.value;
        let refreshToken = cookieStore.get('refreshToken')?.value;
        let etlsUser = cookieStore.get('etlsUser')?.value;

        // –Ø–∫—â–æ –Ω–µ–º–∞—î accessToken, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ —á–µ—Ä–µ–∑ refreshToken
        if (!accessToken) {
            if (!refreshToken) return logoutUser(req);

            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || ''
                }
            });

            // **–î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç—É**
            const contentType = refreshedTokens.headers.get('content-type') || 'unknown';
            console.log(`üî¥ Refresh token response content-type: ${contentType}`);

            if (!refreshedTokens.ok) {
                console.error('üî¥ Refresh token request failed with status:', refreshedTokens.status);
                return logoutUser(req);
            }

            // **–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å–µ—Ä–≤–µ—Ä —É JSON-—Ñ–æ—Ä–º–∞—Ç—ñ**
            if (!contentType.includes('application/json')) {
                console.error('üî¥ Server did not return JSON, possible error page:', await refreshedTokens.text());
                return logoutUser(req);
            }

            const refreshData = await refreshedTokens.json();
            accessToken = refreshData.newAccessToken;
            refreshToken = refreshData.newRefreshToken;
            etlsUser = refreshData.newEtlsUser;
        }

        // –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ REMOTE_API –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –º–µ—Ç–æ–¥–æ–º
        let fetchOptions = {
            method: options.method || 'GET',
            credentials: 'include',
            headers: {
                Authorization: `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            }
        };

        if (!['GET', 'DELETE'].includes(options.method)) {
            fetchOptions.body = JSON.stringify(options.body || {});
        }

        let response = await fetch(`${REMOTE_API}${url}`, fetchOptions);

        // **–î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ —Ç–µ, —â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ JSON**
        const contentType = response.headers.get('content-type') || 'unknown';
        console.log(`üîµ API response content-type: ${contentType}`);

        if (!response.ok) {
            console.error(`üî¥ API request failed with status ${response.status}`);
        }

        if (!contentType.includes('application/json')) {
            console.error('üî¥ Server did not return JSON, possible error page:', await response.text());
            return NextResponse.json({ error: 'Invalid response format' }, { status: 500 });
        }

        // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        const responseResults = NextResponse.json(await response.json());

        // –û–Ω–æ–≤–ª—é—î–º–æ cookies
        responseResults.headers.set(
            'Set-Cookie',
            [
                `accessToken=${accessToken}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshToken=${refreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                `etlsUser=${etlsUser}; HttpOnly; Path=/; Secure; Max-Age=43200`,
            ].join(',')
        );

        return responseResults;
    } catch (error) {
        console.error("‚ùå Error in customFetch:", error);
        return NextResponse.json({ error: 'Request failed' }, { status: 500 });
    }
}
```

---

### üîπ **–©–æ —Ä–æ–±–∏—Ç—å —Ü–µ–π –∫–æ–¥?**
‚úÖ **–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î `application/json`**, –∞ –Ω–µ HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ–º–∏–ª–∫–∏.  
‚úÖ **–í–∏–≤–æ–¥–∏—Ç—å `content-type` —É –ª–æ–≥–∞—Ö**, —â–æ–± –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —á–æ–º—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—å HTML.  
‚úÖ **–Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ HTML –∞–±–æ —ñ–Ω—à–∏–π —Ñ–æ—Ä–º–∞—Ç, –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ —É `console.error`.**  

---

### üîπ **–©–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?**
1Ô∏è‚É£ **–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å Next.js —Ç–∞ –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è `accessToken`.**  
2Ô∏è‚É£ –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è **–∫–æ–Ω—Å–æ–ª—å –ª–æ–≥—ñ–≤** ‚Äì —á–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î HTML?  
3Ô∏è‚É£ –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î **HTML-–ø–æ–º–∏–ª–∫—É**, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ `refreshresttokens.js`.

---

## üîπ **–û–Ω–æ–≤–ª–µ–Ω–∏–π `refreshresttokens.js`**
```javascript
import { NextResponse } from 'next/server';
import { SignJWT } from 'jose';

export const runtime = 'edge';

const REMOTE_API = process.env.MAIN_API_URL;
const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const EXPIRES_IN_ACCESS_ETLS = 30 * 60; // 30 —Ö–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö
const EXPIRES_IN_REFRESH_ETLS = 12 * 60 * 60; // 12 –≥–æ–¥–∏–Ω —É —Å–µ–∫—É–Ω–¥–∞—Ö

export default async function refreshRestToken(req) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ cookies
        const cookieStore = req.cookies;
        const refreshToken = cookieStore.get('refreshToken')?.value;

        if (!refreshToken) {
            console.warn('üî¥ No refresh token available');
            return NextResponse.json({ error: 'No refresh token' }, { status: 401 });
        }

        // –ó–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —É REMOTE_API
        const refreshResponse = await fetch(`${REMOTE_API}/api/auth/refresh`, {
            method: 'GET',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
                Cookie: `refreshToken=${refreshToken}`,
            },
        });

        // **–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Content-Type**
        const contentType = refreshResponse.headers.get('content-type') || 'unknown';
        console.log(`üîµ Refresh response content-type: ${contentType}`);

        if (!refreshResponse.ok) {
            console.error('üî¥ Failed to refresh token:', refreshResponse.status);
            return NextResponse.json({ error: 'Failed to refresh token' }, { status: 401 });
        }

        if (!contentType.includes('application/json')) {
            console.error('üî¥ Refresh API returned non-JSON response:', await refreshResponse.text());
            return NextResponse.json({ error: 'Invalid response format' }, { status: 500 });
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏
        const refreshedData = await refreshResponse.json();
        const newAccessToken = refreshedData.accessToken;
        const newRefreshToken = refreshedData.refreshToken;

        // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ–∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ —É "Set-Cookie"
        const response = NextResponse.json({
            newAccessToken,
            newRefreshToken,
        });

        response.headers.set(
            'Set-Cookie',
            [
                `accessToken=${newAccessToken}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshToken=${newRefreshToken}; HttpOnly; Path=/; Max-Age=43200`,
            ].join(',')
        );

        return response;
    } catch (error) {
        console.error('‚ùå Error refreshing tokens:', error);
        return NextResponse.json({ error: 'Request failed' }, { status: 500 });
    }
}
```

---

### üîπ **–ü—ñ—Å–ª—è –∑–º—ñ–Ω:**
1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ API –ø–æ–≤–µ—Ä—Ç–∞—î **JSON**  
2Ô∏è‚É£ –õ–æ–≥—É—î **—Ç–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (`content-type`)**  
3Ô∏è‚É£ –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î HTML, —Ç–µ–ø–µ—Ä —Ü–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —ñ –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –≤ `console.error`.

üöÄ **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥ —ñ –¥–∞–π—Ç–µ –º–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–≤–µ—Ä—Ç–∞—î —Å–µ—Ä–≤–µ—Ä.**