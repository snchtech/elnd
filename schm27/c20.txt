### üîπ **–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ `customFetch.js` –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è cookies**

‚úÖ **–©–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ?**
1. **–¢–µ–ø–µ—Ä cookies –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –≤ `Set-Cookie` –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.**
2. **–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ, —á–∏ API –ø–æ–≤–µ—Ä—Ç–∞—î JSON –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –π–æ–≥–æ –ø–∞—Ä—Å–∏—Ç–∏ (`response.json()`).**
3. **–Ø–∫—â–æ –æ—Ç—Ä–∏–º—É—î–º–æ 401 –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ ‚Äì –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ cookies —Ç–∞ –≤–∏–∫–æ–Ω—É—î–º–æ `logoutUser(req)`.**
4. **–î–æ–¥–∞–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–º–∏–ª–∫—É –∞–±–æ HTML –∑–∞–º—ñ—Å—Ç—å JSON.**

---

### **üõ† –û–Ω–æ–≤–ª–µ–Ω–∏–π `customFetch.js`**
```javascript
import { NextResponse } from 'next/server';
import { logoutUser } from '../../../utils/auth';

export const runtime = 'edge';
const REMOTE_API = process.env.MAIN_API_URL;

export default async function customFetch(req) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ body-–∑–∞–ø–∏—Ç—É
        const { url, options } = await req.json();
        
        // –û—Ç—Ä–∏–º—É—î–º–æ cookies
        const cookieStore = req.cookies;
        let accessToken = cookieStore.get('accessToken')?.value;
        let refreshToken = cookieStore.get('refreshToken')?.value;
        let etlsUser = cookieStore.get('etlsUser')?.value;

        // –Ø–∫—â–æ –Ω–µ–º–∞—î accessToken, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ —á–µ—Ä–µ–∑ refreshToken
        if (!accessToken) {
            if (!refreshToken) return logoutUser(req);

            console.log('üîÑ Access token expired, refreshing...');
            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || ''
                }
            });

            if (!refreshedTokens.ok) {
                console.error('üî¥ Failed to refresh token:', refreshedTokens.status);
                return logoutUser(req);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î JSON
            const contentType = refreshedTokens.headers.get('content-type') || '';
            if (!contentType.includes('application/json')) {
                console.error('üî¥ Refresh response is not JSON:', await refreshedTokens.text());
                return logoutUser(req);
            }

            const refreshData = await refreshedTokens.json();
            accessToken = refreshData.newAccessToken;
            refreshToken = refreshData.newRefreshToken;
            etlsUser = refreshData.newEtlsUser;
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Ç—É
        const apiMethod = options.method || 'GET';

        // –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ REMOTE_API –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –º–µ—Ç–æ–¥–æ–º
        let fetchOptions = {
            method: apiMethod,
            credentials: 'include',
            headers: {
                Authorization: `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            }
        };

        // –Ø–∫—â–æ –º–µ—Ç–æ–¥ –Ω–µ GET –∞–±–æ DELETE, –¥–æ–¥–∞—î–º–æ body
        if (!['GET', 'DELETE'].includes(apiMethod)) {
            fetchOptions.body = JSON.stringify(options.body || {});
        }

        let response = await fetch(`${REMOTE_API}${url}`, fetchOptions);

        // –Ø–∫—â–æ –æ—Ç—Ä–∏–º—É—î–º–æ 401, –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç
        if (response.status === 401) {
            console.log('üîÑ Received 401, trying to refresh tokens...');

            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || ''
                }
            });

            if (!refreshedTokens.ok) {
                console.error('üî¥ Failed to refresh token:', refreshedTokens.status);
                return logoutUser(req);
            }

            const refreshData = await refreshedTokens.json();
            accessToken = refreshData.newAccessToken;
            refreshToken = refreshData.newRefreshToken;
            etlsUser = refreshData.newEtlsUser;

            // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Ç —ñ–∑ –Ω–æ–≤–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            fetchOptions.headers.Authorization = `Bearer ${accessToken}`;
            response = await fetch(`${REMOTE_API}${url}`, fetchOptions);

            // –Ø–∫—â–æ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –º–∏ –≤—Å–µ —â–µ –æ—Ç—Ä–∏–º—É—î–º–æ 401 ‚Äì –≤–∏—Ö—ñ–¥ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏
            if (response.status === 401) {
                console.error('üî¥ Still getting 401 after refresh, logging out...');
                return logoutUser(req);
            }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å API –º–∞—î JSON
        const apiContentType = response.headers.get('content-type') || '';
        if (!apiContentType.includes('application/json')) {
            console.error('üî¥ API response is not JSON:', await response.text());
            return NextResponse.json({ error: 'Invalid response format' }, { status: 500 });
        }

        // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        const responseResults = NextResponse.json(await response.json());

        // –û–Ω–æ–≤–ª—é—î–º–æ cookies
        responseResults.headers.set(
            'Set-Cookie',
            [
                `accessToken=${accessToken}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshToken=${refreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                `etlsUser=${etlsUser}; HttpOnly; Path=/; Secure; Max-Age=43200`
            ].join(',')
        );

        console.log('‚úÖ Tokens updated successfully.');
        return responseResults;
    } catch (error) {
        console.error("‚ùå Error in customFetch:", error);
        return NextResponse.json({ error: 'Request failed' }, { status: 500 });
    }
}
```

---

### üîπ **–©–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–æ?**
‚úÖ **–¢–µ–ø–µ—Ä cookies –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.**  
‚úÖ **–Ø–∫—â–æ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –≤—Å–µ —â–µ 401 ‚Äì –≤–∏—Ö—ñ–¥ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏ (logout).**  
‚úÖ **–î–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É `content-type`, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫ `SyntaxError: Unexpected token '<'`.**  
‚úÖ **–î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è ‚Äì —Ç–µ–ø–µ—Ä –±—É–¥–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ, —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –µ—Ç–∞–ø—ñ.**

---

### üîπ **–Ø–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î?**
1Ô∏è‚É£ –ó–∞–ø—É—Å—Ç—ñ—Ç—å Next.js —Å–µ—Ä–≤–µ—Ä:  
   ```bash
   npm run dev
   ```
2Ô∏è‚É£ –í–∏–∫–æ–Ω–∞–π—Ç–µ –∑–∞–ø–∏—Ç **–∑ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–º `accessToken`**.
3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ **–ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞** ‚Äì —Ç–µ–ø–µ—Ä –≤–∏ –ø–æ–±–∞—á–∏—Ç–µ:
   - üîÑ **Access token expired, refreshing...**
   - ‚úÖ **Tokens updated successfully.**
4Ô∏è‚É£ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ **cookies —É –±—Ä–∞—É–∑–µ—Ä—ñ –æ–Ω–æ–≤–∏–ª–∏—Å—è**.

---

### üöÄ **–¢–µ–ø–µ—Ä –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —Ç–∞ cookies –ø—Ä–∞—Ü—é—î –±–µ–∑ –ø—Ä–æ–±–ª–µ–º!**  
–Ø–∫—â–æ —â–µ –±—É–¥—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è ‚Äì –ø–∏—Ç–∞–π, —è –¥–æ–ø–æ–º–æ–∂—É! üòä