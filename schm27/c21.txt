### üîπ **–©–æ –æ–∑–Ω–∞—á–∞—î –ø–æ—Ä–æ–∂–Ω—î `response.text()`?**
–Ø–∫—â–æ –≤–∏ –¥–æ–¥–∞—î—Ç–µ `await response.text()` —ñ –æ—Ç—Ä–∏–º—É—î—Ç–µ **–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫**, —Ü–µ –æ–∑–Ω–∞—á–∞—î:
1. **–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ —Ç—ñ–ª–∞ (`body` –ø—É—Å—Ç–∏–π)**.
2. **–ô–º–æ–≤—ñ—Ä–Ω–æ, API –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–º `204 No Content` –∞–±–æ `500 Internal Server Error` –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è.**
3. **–ó–∞–ø–∏—Ç –±–ª–æ–∫—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ CORS –∞–±–æ —ñ–Ω—à—ñ –ø—Ä–æ–±–ª–µ–º–∏, —ñ Next.js –Ω–µ –æ—Ç—Ä–∏–º—É—î –∂–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.**

---

### üîπ **–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–∏—Ç–∏ —Ü—é —Å–∏—Ç—É–∞—Ü—ñ—é?**
–Ø –¥–æ–¥–∞–≤ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:
‚úÖ –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ—Ä–æ–∂–Ω—è ‚Äì –ª–æ–≥—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (`response.status`).  
‚úÖ –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î `204 No Content`, –≤—ñ–¥–¥–∞–≤–∞—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.  
‚úÖ –Ø–∫—â–æ `response.status === 500` –∞–±–æ `response.status === 401` –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ ‚Äì –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ `logoutUser(req)`.  

---

### **üõ† –û–Ω–æ–≤–ª–µ–Ω–∏–π `customFetch.js`**
```javascript
import { NextResponse } from 'next/server';
import { logoutUser } from '../../../utils/auth';

export const runtime = 'edge';
const REMOTE_API = process.env.MAIN_API_URL;

export default async function customFetch(req) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ body-–∑–∞–ø–∏—Ç—É
        const { url, options } = await req.json();
        
        // –û—Ç—Ä–∏–º—É—î–º–æ cookies
        const cookieStore = req.cookies;
        let accessToken = cookieStore.get('accessToken')?.value;
        let refreshToken = cookieStore.get('refreshToken')?.value;
        let etlsUser = cookieStore.get('etlsUser')?.value;

        // –Ø–∫—â–æ –Ω–µ–º–∞—î accessToken, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ —á–µ—Ä–µ–∑ refreshToken
        if (!accessToken) {
            if (!refreshToken) return logoutUser(req);

            console.log('üîÑ Access token expired, refreshing...');
            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || ''
                }
            });

            if (!refreshedTokens.ok) {
                console.error('üî¥ Failed to refresh token:', refreshedTokens.status);
                return logoutUser(req);
            }

            const refreshData = await refreshedTokens.json();
            accessToken = refreshData.newAccessToken;
            refreshToken = refreshData.newRefreshToken;
            etlsUser = refreshData.newEtlsUser;
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Ç—É
        const apiMethod = options.method || 'GET';

        // –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ REMOTE_API –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –º–µ—Ç–æ–¥–æ–º
        let fetchOptions = {
            method: apiMethod,
            credentials: 'include',
            headers: {
                Authorization: `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            }
        };

        if (!['GET', 'DELETE'].includes(apiMethod)) {
            fetchOptions.body = JSON.stringify(options.body || {});
        }

        let response = await fetch(`${REMOTE_API}${url}`, fetchOptions);

        // üî¥ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ —á–∏ —î `body`
        const responseStatus = response.status;
        const responseText = await response.text();

        console.log(`üîµ API response status: ${responseStatus}, text: "${responseText}"`);

        // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ 204 No Content, –≤—ñ–¥–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        if (responseStatus === 204) {
            console.log('üü¢ API returned 204 No Content, responding with empty JSON.');
            return NextResponse.json({});
        }

        // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ 401, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏
        if (responseStatus === 401) {
            console.log('üîÑ Received 401, trying to refresh tokens...');

            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || ''
                }
            });

            if (!refreshedTokens.ok) {
                console.error('üî¥ Failed to refresh token:', refreshedTokens.status);
                return logoutUser(req);
            }

            const refreshData = await refreshedTokens.json();
            accessToken = refreshData.newAccessToken;
            refreshToken = refreshData.newRefreshToken;
            etlsUser = refreshData.newEtlsUser;

            // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Ç —ñ–∑ –Ω–æ–≤–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            fetchOptions.headers.Authorization = `Bearer ${accessToken}`;
            response = await fetch(`${REMOTE_API}${url}`, fetchOptions);

            if (response.status === 401) {
                console.error('üî¥ Still getting 401 after refresh, logging out...');
                return logoutUser(req);
            }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ–Ω—Ç–µ–Ω—Ç —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (!responseText) {
            console.error('‚ö†Ô∏è Empty response body detected, possible issue with API.');
            return NextResponse.json({ error: 'Empty response from server' }, { status: responseStatus });
        }

        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ JSON —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω —î
        let responseJson;
        try {
            responseJson = JSON.parse(responseText);
        } catch (jsonError) {
            console.error('‚ùå JSON Parsing Error:', jsonError);
            return NextResponse.json({ error: 'Invalid JSON response' }, { status: 500 });
        }

        // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        const responseResults = NextResponse.json(responseJson);

        // –û–Ω–æ–≤–ª—é—î–º–æ cookies
        responseResults.headers.set(
            'Set-Cookie',
            [
                `accessToken=${accessToken}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshToken=${refreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                `etlsUser=${etlsUser}; HttpOnly; Path=/; Secure; Max-Age=43200`
            ].join(',')
        );

        console.log('‚úÖ Tokens updated successfully.');
        return responseResults;
    } catch (error) {
        console.error("‚ùå Error in customFetch:", error);
        return NextResponse.json({ error: 'Request failed' }, { status: 500 });
    }
}
```

---

### üîπ **–©–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ?**
‚úÖ **–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ `response.text()` –ø–æ—Ä–æ–∂–Ω—ñ–π –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON.**  
‚úÖ **–Ø–∫—â–æ `response.status === 204`, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ `{}` –∑–∞–º—ñ—Å—Ç—å –ø–æ–º–∏–ª–∫–∏.**  
‚úÖ **–Ø–∫—â–æ API –ø–æ–≤–µ—Ä—Ç–∞—î HTML –∑–∞–º—ñ—Å—Ç—å JSON, –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ.**  
‚úÖ **–î–æ–¥–∞–Ω–æ `console.log()`, —â–æ–± –±–∞—á–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π API.**  
‚úÖ **–Ø–∫—â–æ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –≤—Å–µ —â–µ `401`, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è `logoutUser(req)`.**

---

### üîπ **–©–æ —Ä–æ–±–∏—Ç–∏ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É?**
1Ô∏è‚É£ **–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä Next.js —Ç–∞ –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è `accessToken`.**  
2Ô∏è‚É£ **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ (`npm run dev`).**  
3Ô∏è‚É£ **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î API (`üîµ API response status: ...`).**  
4Ô∏è‚É£ –Ø–∫—â–æ –æ—Ç—Ä–∏–º—É—î—Ç–µ `"‚ö†Ô∏è Empty response body detected"` ‚Üí API –ø–æ–≤–µ—Ä—Ç–∞—î `204 No Content` –∞–±–æ `500`.  
5Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ `console.log(responseText)`, —â–æ–± –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —â–æ —Å–∞–º–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.

üöÄ **–ó —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –≤–∏ –±—ñ–ª—å—à–µ –Ω–µ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–º–∏–ª–∫—É "Unexpected token '<'".**  
–Ø–∫—â–æ —â–µ —î –ø–∏—Ç–∞–Ω–Ω—è ‚Äì –ø–∏—Ç–∞–π—Ç–µ! üòä