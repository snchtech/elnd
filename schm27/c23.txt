### üîπ **–Ø–∫ –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –∑–∞—Ü–∏–∫–ª—é–≤–∞–Ω–Ω—é, —è–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ—Å—Ç—ñ–π–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î 401?**  

üëâ **–ü—Ä–æ–±–ª–µ–º–∞:**  
–Ø–∫—â–æ `REMOTE_API` –ø–æ—Å—Ç—ñ–π–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î `401`, `customFetch.js` –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è **—Ä–µ—Ñ—Ä–µ—à–∏—Ç–∏ —Ç–æ–∫–µ–Ω**, –∞–ª–µ —è–∫—â–æ —Ä–µ—Ñ—Ä–µ—à –Ω–µ –≤–¥–∞—î—Ç—å—Å—è ‚Äì —Ü–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è –∑–Ω–æ–≤—É —ñ –∑–Ω–æ–≤—É.  

üëâ **–†—ñ—à–µ–Ω–Ω—è:**  
1. **–î–æ–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± (`retryCount`)**  
2. **–Ø–∫—â–æ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —â–µ —Ä–∞–∑ –æ—Ç—Ä–∏–º–∞—î–º–æ `401` ‚Äì –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Å–∏—Å—Ç–µ–º–∏ (`logoutUser(req)`)**  
3. **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± ‚Äì 1 —Ä–∞–∑ (—Ç–æ–±—Ç–æ 2 –∑–∞–ø–∏—Ç–∏: –ø–æ—á–∞—Ç–∫–æ–≤–∏–π + –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤)**  

---

### **üõ† –û–Ω–æ–≤–ª–µ–Ω–∏–π `customFetch.js` –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—Ä–æ–±**
```javascript
import { NextResponse } from 'next/server';
import { logoutUser } from '../../../utils/auth';

export const runtime = 'edge';
const REMOTE_API = process.env.MAIN_API_URL;

export default async function customFetch(req) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ body-–∑–∞–ø–∏—Ç—É
        const { url, options, retryCount = 0 } = await req.json();
        
        // –û—Ç—Ä–∏–º—É—î–º–æ cookies
        const cookieStore = req.cookies;
        let accessToken = cookieStore.get('accessToken')?.value;
        let refreshToken = cookieStore.get('refreshToken')?.value;
        let etlsUser = cookieStore.get('etlsUser')?.value;

        // –Ø–∫—â–æ –Ω–µ–º–∞—î accessToken, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ —á–µ—Ä–µ–∑ refreshToken
        if (!accessToken && refreshToken && retryCount === 0) {
            console.log('üîÑ Access token expired, refreshing...');

            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/rest/refreshresttokens`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || ''
                }
            });

            if (!refreshedTokens.ok) {
                console.error('üî¥ Failed to refresh token:', refreshedTokens.status);
                return logoutUser(req);
            }

            const refreshData = await refreshedTokens.json();
            accessToken = refreshData.newAccessToken;
            refreshToken = refreshData.newRefreshToken;
            etlsUser = refreshData.newEtlsUser;
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Ç—É
        const apiMethod = options.method || 'GET';

        // –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ REMOTE_API –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –º–µ—Ç–æ–¥–æ–º
        let fetchOptions = {
            method: apiMethod,
            credentials: 'include',
            headers: {
                Authorization: `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            }
        };

        if (!['GET', 'DELETE'].includes(apiMethod)) {
            fetchOptions.body = JSON.stringify(options.body || {});
        }

        let response = await fetch(`${REMOTE_API}${url}`, fetchOptions);

        // –Ø–∫—â–æ –æ—Ç—Ä–∏–º—É—î–º–æ 401, –ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏ –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑
        if (response.status === 401 && retryCount === 0) {
            console.warn('üîÑ Received 401, retrying request after refreshing tokens...');

            return fetch('/api/rest/customfetch', {
                method: 'POST',
                credentials: 'include',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ url, options, retryCount: 1 }), // ‚úÖ –ü–µ—Ä–µ–¥–∞—î–º–æ retryCount, —â–æ–± –Ω–µ –∑–∞—Ü–∏–∫–ª—é–≤–∞—Ç–∏—Å—è
            });
        }

        // –Ø–∫—â–æ –ø—ñ—Å–ª—è —Ä–µ—Ñ—Ä–µ—à—É –≤—Å–µ —â–µ 401 ‚Äì –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Å–∏—Å—Ç–µ–º–∏
        if (response.status === 401 && retryCount === 1) {
            console.error('üî¥ Still getting 401 after refresh, logging out...');
            return logoutUser(req);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ–Ω—Ç–µ–Ω—Ç —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const responseText = await response.text();
        if (!responseText) {
            console.warn('‚ö†Ô∏è Empty response body detected, possible issue with API.');
            return NextResponse.json({ error: 'Empty response from server' }, { status: response.status });
        }

        let responseJson;
        try {
            responseJson = JSON.parse(responseText);
        } catch (jsonError) {
            console.error('‚ùå JSON Parsing Error:', jsonError);
            return NextResponse.json({ error: 'Invalid JSON response' }, { status: 500 });
        }

        // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        const responseResults = NextResponse.json(responseJson);

        // –û–Ω–æ–≤–ª—é—î–º–æ cookies
        responseResults.headers.set(
            'Set-Cookie',
            [
                `accessToken=${accessToken}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshToken=${refreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                `etlsUser=${etlsUser}; HttpOnly; Path=/; Secure; Max-Age=43200`
            ].join(',')
        );

        console.log('‚úÖ Tokens updated successfully.');
        return responseResults;
    } catch (error) {
        console.error("‚ùå Error in customFetch:", error);
        return NextResponse.json({ error: 'Request failed' }, { status: 500 });
    }
}
```

---

## üîπ **–Ø–∫ –ø—Ä–∞—Ü—é—î –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∑–∞—Ü–∏–∫–ª—é–≤–∞–Ω–Ω—è?**
‚úÖ **`retryCount = 0`** (–ø–µ—Ä—à–∞ —Å–ø—Ä–æ–±–∞) ‚Üí —è–∫—â–æ `401`, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –ø–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç.  
‚úÖ **`retryCount = 1`** (–¥—Ä—É–≥–∞ —Å–ø—Ä–æ–±–∞) ‚Üí —è–∫—â–æ **–∑–Ω–æ–≤—É `401`**, –≤–∏–∫–æ–Ω—É—î–º–æ `logoutUser(req)`.  
‚úÖ **–ó–∞–ø–æ–±—ñ–≥–∞—î –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É `401 ‚Üí refresh ‚Üí 401 ‚Üí refresh...`**  

---

## üîπ **–©–æ –∑–º—ñ–Ω–µ–Ω–æ —É —Ü—å–æ–º—É –∫–æ–¥—ñ?**
‚úÖ **–î–æ–¥–∞–Ω–æ `retryCount`, —è–∫–∏–π –æ–±–º–µ–∂—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –¥–æ 1**  
‚úÖ **–Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø—ñ—Å–ª—è —Ä–µ—Ñ—Ä–µ—à—É –∑–Ω–æ–≤—É –ø–æ–≤–µ—Ä—Ç–∞—î `401` ‚Üí –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Å–∏—Å—Ç–µ–º–∏**  
‚úÖ **–ó–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ `retryCount === 0`**  

---

## üîπ **–Ø–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ –∑–∞—Ü–∏–∫–ª—é–≤–∞–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î?**
1Ô∏è‚É£ **–¢–µ—Å—Ç 1: –û—á–∏—Å—Ç—ñ—Ç—å cookies —ñ –∑—Ä–æ–±—ñ—Ç—å –∑–∞–ø–∏—Ç –∑ `401`**  
   - –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: **–ó–∞–ø–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è 1 —Ä–∞–∑, –ø–æ—Ç—ñ–º –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è `logoutUser(req)`.**  
2Ô∏è‚É£ **–¢–µ—Å—Ç 2: –î–æ–∑–≤–æ–ª—å—Ç–µ `refreshresttokens.js` –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ `200`, –∞ –Ω–µ `401`**  
   - –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: **–ü—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ `401`, —Ç–æ–∫–µ–Ω –æ–Ω–æ–≤–∏—Ç—å—Å—è, —ñ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç –±—É–¥–µ —É—Å–ø—ñ—à–Ω–∏–º.**  
3Ô∏è‚É£ **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —É DevTools (F12 ‚Üí Network)**  
   - –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ **–∫–æ–∂–µ–Ω –∑–∞–ø–∏—Ç `/api/rest/customfetch` –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–µ –±—ñ–ª—å—à–µ 2 —Ä–∞–∑—ñ–≤.**  

---

üöÄ **–ó —Ü–∏–º –∫–æ–¥–æ–º –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ –∑–∞—Ü–∏–∫–ª—é–≤–∞–Ω–Ω—è –ø—Ä–∏ 401!**  
–Ø–∫—â–æ —â–µ —î –ø–∏—Ç–∞–Ω–Ω—è ‚Äì –∑–∞–ø–∏—Ç—É–π—Ç–µ, —è –¥–æ–ø–æ–º–æ–∂—É! üòä