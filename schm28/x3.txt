### üîπ **–û–Ω–æ–≤–ª–µ–Ω–∏–π `middleware.js` –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º `tokenRefreshingPromise`**
‚úÖ **–î–æ–¥–∞—î –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É `tokenRefreshingPromise`**, —è–∫–∞ –¥–æ–∑–≤–æ–ª—è—î **—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏** –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.  
‚úÖ **–Ø–∫—â–æ `middleware.js` –≤–∂–µ –æ–Ω–æ–≤–ª—é—î —Ç–æ–∫–µ–Ω–∏**, —ñ–Ω—à—ñ –∑–∞–ø–∏—Ç–∏ **—á–µ–∫–∞—é—Ç—å** –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ü—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É.  
‚úÖ **–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –≤ `middleware.js` —Ç–∞ `customFetch.js`**, —â–æ —É–Ω–µ–º–æ–∂–ª–∏–≤–ª—é—î –ø–æ–º–∏–ª–∫—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Å—Ç–∞—Ä–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤.  

---

### **üõ† –û–Ω–æ–≤–ª–µ–Ω–∏–π `middleware.js`**
```javascript
import { NextResponse } from 'next/server';
import * as jose from 'jose';
import { logoutUser } from '@/utils/auth';

// –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤
const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
let tokenRefreshingPromise = null;

export async function middleware(req) {
    const { pathname, searchParams } = req.nextUrl;
    const cookieStore = req.cookies;
    console.log('MW _WORKS');

    // –î—ñ—Å—Ç–∞—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–æ–∫–µ–Ω–∏ –∑ cookies
    let accessTokenEtls = cookieStore.get('accessTokenEtls')?.value;
    let refreshTokenEtls = cookieStore.get('refreshTokenEtls')?.value;
    let etlsUser = cookieStore.get('etlsUser')?.value;

    // –î—ñ—Å—Ç–∞—î–º–æ accessToken –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–±–æ query
    let accessToken = req.headers.get('Authorization')?.replace('Bearer ', '') || searchParams.get('t');

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ accessToken (—è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –≤ –∑–∞–ø–∏—Ç—ñ)
    if (accessToken) {
        const loginResponse = await fetch(`${req.nextUrl.origin}/api/auth/loginByToken`, {
            method: 'POST',
            credentials: 'include',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ accessToken, redirectTo: pathname }),
        });

        if (loginResponse.ok) {
            const responseData = await loginResponse.json();

            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏
            accessToken = responseData.newAccessToken;
            let refreshToken = responseData.refreshToken;
            accessTokenEtls = responseData.accessTokenEtls;
            refreshTokenEtls = responseData.refreshTokenEtls;
            let etlsUser = responseData.etlsUser;

            // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ cookies
            const respLogin = NextResponse.redirect(new URL(pathname, req.url));
            respLogin.headers.set(
                'Set-Cookie',
                [
                    `accessToken=${accessToken}; HttpOnly; Path=/; Max-Age=43200`,
                    `refreshToken=${refreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                    `accessTokenEtls=${accessTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                    `refreshTokenEtls=${refreshTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                    `etlsUser=${etlsUser}; HttpOnly; Path=/; Max-Age=43200`,
                ].join(', ')
            );

            return respLogin;
        } else {
            return NextResponse.redirect(new URL('/login', req.url));
        }
    }

    // –û–±—Ä–æ–±–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫, –∫—Ä—ñ–º /login
    if (pathname !== '/login') {
        if (!accessTokenEtls && !refreshTokenEtls) {
            return logoutUser(req);
        }

        try {
            await jose.jwtVerify(accessTokenEtls, ETLS_ACCESS);
            return NextResponse.next();
        } catch (error) {
            try {
                await jose.jwtVerify(refreshTokenEtls, ETLS_REFRESH);

                // **–ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—é —Ç–æ–∫–µ–Ω—ñ–≤**
                if (!tokenRefreshingPromise) {
                    tokenRefreshingPromise = fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
                        method: 'POST',
                        credentials: 'include',
                        headers: {
                            'Content-Type': 'application/json',
                            Cookie: req.headers.get('cookie') || '',
                        },
                    }).then(async (res) => {
                        tokenRefreshingPromise = null;
                        if (!res.ok) throw new Error('Failed to refresh tokens');
                        return res.json();
                    }).catch((err) => {
                        tokenRefreshingPromise = null;
                        throw err;
                    });
                }

                const refreshData = await tokenRefreshingPromise;

                const response = NextResponse.next();
                response.headers.set(
                    'Set-Cookie',
                    [
                        `accessTokenEtls=${refreshData.newAccessTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                        `refreshTokenEtls=${refreshData.newRefreshTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                        `accessToken=${refreshData.newAccessToken}; HttpOnly; Path=/; Max-Age=43200`,
                        `refreshToken=${refreshData.newRefreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                        `etlsUser=${refreshData.newEtlsUser}; HttpOnly; Path=/; Max-Age=43200`,
                    ].join(', ')
                );

                return response;
            } catch (error) {
                console.error('refreshTokenEtls invalid:', error);
                return logoutUser(req);
            }
        }
    }

    // –û–±—Ä–æ–±–∫–∞ –ª–æ–≥—ñ–∫–∏ –¥–ª—è /login
    if (pathname === '/login') {
        if (accessTokenEtls) {
            try {
                await jose.jwtVerify(accessTokenEtls, ETLS_ACCESS);
                return NextResponse.redirect(new URL('/', req.url));
            } catch (error) {
                console.log(error);
            }
        }

        if (refreshTokenEtls) {
            try {
                await jose.jwtVerify(refreshTokenEtls, ETLS_REFRESH);

                // **–ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—é —Ç–æ–∫–µ–Ω—ñ–≤**
                if (!tokenRefreshingPromise) {
                    tokenRefreshingPromise = fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
                        method: 'POST',
                        credentials: 'include',
                        headers: {
                            'Content-Type': 'application/json',
                            Cookie: req.headers.get('cookie') || '',
                        },
                    }).then(async (res) => {
                        tokenRefreshingPromise = null;
                        if (!res.ok) throw new Error('Failed to refresh tokens');
                        return res.json();
                    }).catch((err) => {
                        tokenRefreshingPromise = null;
                        throw err;
                    });
                }

                const refreshData = await tokenRefreshingPromise;

                // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ cookies
                const response = NextResponse.redirect(new URL('/', req.url));
                response.headers.set(
                    'Set-Cookie',
                    [
                        `accessTokenEtls=${refreshData.newAccessTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                        `refreshTokenEtls=${refreshData.newRefreshTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                        `accessToken=${refreshData.newAccessToken}; HttpOnly; Path=/; Max-Age=43200`,
                        `refreshToken=${refreshData.newRefreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                        `etlsUser=${refreshData.newEtlsUser}; HttpOnly; Path=/; Max-Age=43200`,
                    ].join(', ')
                );

                return response;
            } catch (error) {
                console.error('Error refreshing tokens on /login:', error);
            }
        }

        return logoutUser(req);
    }

    return NextResponse.next();
}

// –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ middleware
export const config = {
    matcher: ['/login', '/', '/editor', '/test'],
};
```

---

### üîπ **–©–æ –∑–º—ñ–Ω–µ–Ω–æ?**
‚úÖ **–î–æ–¥–∞–Ω–æ `tokenRefreshingPromise`, —â–æ–± —É—Å—ñ –∑–∞–ø–∏—Ç–∏ —á–µ–∫–∞–ª–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.**  
‚úÖ **–Ø–∫—â–æ `middleware.js` –≤–∂–µ –æ–Ω–æ–≤–ª—é—î —Ç–æ–∫–µ–Ω–∏, –Ω–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ –Ω–µ —ñ–Ω—ñ—Ü—ñ—é—é—Ç—å —â–µ –æ–¥–∏–Ω `refresh`.**  
‚úÖ **–í–∏–∫–ª—é—á–µ–Ω–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —É `/login`, `/`, `/editor`, `/test`.**  
‚úÖ **–£–Ω–µ–º–æ–∂–ª–∏–≤–ª–µ–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `customFetch.js` —ñ–∑ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏.**  

üöÄ **–ó —Ü–∏–º –∫–æ–¥–æ–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –ø—Ä–∞—Ü—é—î —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤!**  
–Ø–∫—â–æ —î —â–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äì –∑–∞–ø–∏—Ç—É–π! üòä