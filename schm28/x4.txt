### üîπ **–û–Ω–æ–≤–ª–µ–Ω–∏–π `customFetch.js` –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º `tokenRefreshingPromise`**
‚úÖ **–î–æ–¥–∞—î –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É `tokenRefreshingPromise`, —è–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –º—ñ–∂ `customFetch.js` —ñ `middleware.js`.**  
‚úÖ **–Ø–∫—â–æ —Ç–æ–∫–µ–Ω–∏ –≤–∂–µ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è `middleware.js`, `customFetch.js` –±—É–¥–µ —á–µ–∫–∞—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –∑–∞–º—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ `refresh` –∑–∞–ø–∏—Ç—É.**  
‚úÖ **–ó–∞–±–µ–∑–ø–µ—á—É—î –∫–æ—Ä–µ–∫—Ç–Ω—É –ª–æ–≥—ñ–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.**  

---

### **üõ† –û–Ω–æ–≤–ª–µ–Ω–∏–π `customFetch.js`**
```javascript
import { NextResponse } from 'next/server';
import { logoutUser } from '../../utils/auth';
export const runtime = 'edge';

const REMOTE_API = process.env.MAIN_API_URL;

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
let tokenRefreshingPromise = null;

export default async function customFetch(req) {
    try {
        // –î—ñ—Å—Ç–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        const { url, options } = await req.json();
        let retryCount = 0;

        // –û—Ç—Ä–∏–º—É—î–º–æ cookies
        const cookieStore = req.cookies;
        let accessToken = cookieStore.get('accessToken')?.value;
        let refreshToken = cookieStore.get('refreshToken')?.value;
        let accessTokenEtls = cookieStore.get('accessTokenEtls')?.value;
        let refreshTokenEtls = cookieStore.get('refreshTokenEtls')?.value;
        let etlsUser = cookieStore.get('etlsUser')?.value;

        // **–ß–µ–∫–∞—î–º–æ, —è–∫—â–æ —Ç–æ–∫–µ–Ω–∏ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –≤ `middleware.js`**
        if (tokenRefreshingPromise) {
            console.log('üîÑ Waiting for token refresh...');
            await tokenRefreshingPromise;
        }

        // –Ø–∫—â–æ `accessToken` –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π, –ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏
        if (!accessToken) {
            if (!refreshToken) return logoutUser(req);

            console.log('üîÑ Access token expired, refreshing tokens...');

            if (!tokenRefreshingPromise) {
                tokenRefreshingPromise = fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json',
                        Cookie: req.headers.get('cookie') || '',
                    },
                }).then(async (res) => {
                    tokenRefreshingPromise = null;
                    if (!res.ok) throw new Error('Failed to refresh tokens');
                    return res.json();
                }).catch((err) => {
                    tokenRefreshingPromise = null;
                    throw err;
                });
            }

            const refreshData = await tokenRefreshingPromise;

            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏
            accessToken = refreshData.newAccessToken;
            refreshToken = refreshData.newRefreshToken;
            accessTokenEtls = refreshData.newAccessTokenEtls;
            refreshTokenEtls = refreshData.newRefreshTokenEtls;
            etlsUser = refreshData.newEtlsUser;
        }

        // –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ REMOTE_API
        let fetchOptions = {
            method: options.method || 'GET',
            credentials: 'include',
            headers: {
                Authorization: `Bearer ${accessToken}`,
                'Content-Type': 'application/json',
            },
        };

        if (!['GET', 'DELETE'].includes(options.method)) {
            fetchOptions.body = JSON.stringify(options.body || {});
        }

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        let response = await fetch(`${REMOTE_API}${url}`, fetchOptions);

        // –Ø–∫—â–æ –æ—Ç—Ä–∏–º—É—î–º–æ 401 ‚Äì –ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏ –æ–¥–∏–Ω —Ä–∞–∑
        if (response.status === 401 && retryCount === 0) {
            console.warn('üîÑ Received 401, retrying request after refreshing tokens...');

            if (!tokenRefreshingPromise) {
                tokenRefreshingPromise = fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json',
                        Cookie: req.headers.get('cookie') || '',
                    },
                }).then(async (res) => {
                    tokenRefreshingPromise = null;
                    if (!res.ok) throw new Error('Failed to refresh tokens');
                    return res.json();
                }).catch((err) => {
                    tokenRefreshingPromise = null;
                    throw err;
                });
            }

            const refreshData = await tokenRefreshingPromise;

            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
            accessToken = refreshData.newAccessToken;
            refreshToken = refreshData.newRefreshToken;
            accessTokenEtls = refreshData.newAccessTokenEtls;
            refreshTokenEtls = refreshData.newRefreshTokenEtls;
            etlsUser = refreshData.newEtlsUser;

            fetchOptions.headers.Authorization = `Bearer ${accessToken}`;

            // –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –Ω–æ–≤–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            response = await fetch(`${REMOTE_API}${url}`, fetchOptions);
            retryCount = 1;
        } else if (response.status === 401 && retryCount === 1) {
            return logoutUser(req);
        }

        const responseResults = NextResponse.json(await response.json());

        // –û–Ω–æ–≤–ª—é—î–º–æ cookies
        responseResults.headers.set(
            'Set-Cookie',
            [
                `accessToken=${accessToken}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshToken=${refreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                `accessTokenEtls=${accessTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshTokenEtls=${refreshTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                `etlsUser=${etlsUser}; HttpOnly; Path=/; Max-Age=43200`,
            ].join(', ')
        );

        return responseResults;
    } catch (error) {
        console.error("‚ùå Error in customFetch:", error);
        return NextResponse.json({ error: 'Request failed' }, { status: 500 });
    }
}
```

---

### üîπ **–©–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è?**
‚úÖ **–î–æ–¥–∞–Ω–æ `tokenRefreshingPromise`, —è–∫–∏–π –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ —á–µ–∫–∞—é—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤, –∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—å –Ω–æ–≤—ñ `refresh`-–∑–∞–ø–∏—Ç–∏.**  
‚úÖ **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `tokenRefreshingPromise` –≤ `401` –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∑–∞–ø–∏—Ç—ñ, —â–æ–± —É–Ω–µ–º–æ–∂–ª–∏–≤–∏—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.**  
‚úÖ **–ó–∞–ø–∏—Ç–∏ –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Å—Ç–∞—Ä—ñ —Ç–æ–∫–µ–Ω–∏, –ø–æ–∫–∏ `middleware.js` –æ–Ω–æ–≤–ª—é—î —ó—Ö.**  

üöÄ **–ó —Ü–∏–º –∫–æ–¥–æ–º `customFetch.js` –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ –±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∑ `middleware.js`!**  
–Ø–∫—â–æ —î —â–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äì –∑–∞–ø–∏—Ç—É–π! üòä