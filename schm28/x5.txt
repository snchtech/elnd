import { NextResponse } from 'next/server';
import * as jose from 'jose';
import { logoutUser } from '@/utils/auth';

// –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤
const ETLS_ACCESS = new TextEncoder().encode(process.env.ETLS_ACCESS);
const ETLS_REFRESH = new TextEncoder().encode(process.env.ETLS_REFRESH);

export async function middleware(req) {
    const { pathname, searchParams } = req.nextUrl;
    const cookieStore = req.cookies;
    console.log('MW _WORKS');

    // –î—ñ—Å—Ç–∞—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–æ–∫–µ–Ω–∏ –∑ cookies
    let accessTokenEtls = cookieStore.get('accessTokenEtls')?.value;
    let refreshTokenEtls = cookieStore.get('refreshTokenEtls')?.value;
    let etlsUser = cookieStore.get('etlsUser')?.value;
    let refreshingToken = cookieStore.get('refreshingToken')?.value; // üîπ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤

    // –î—ñ—Å—Ç–∞—î–º–æ accessToken –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–±–æ query
    let accessToken = req.headers.get('Authorization')?.replace('Bearer ', '') || searchParams.get('t');

    // üîπ –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ accessToken —É –∑–∞–ø–∏—Ç—ñ, –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è —É–≤—ñ–π—Ç–∏
    if (accessToken) {
        const loginResponse = await fetch(`${req.nextUrl.origin}/api/auth/loginByToken`, {
            method: 'POST',
            credentials: 'include',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ accessToken, redirectTo: pathname }),
        });

        if (loginResponse.ok) {
            const responseData = await loginResponse.json();

            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏
            accessToken = responseData.newAccessToken;
            let refreshToken = responseData.refreshToken;
            accessTokenEtls = responseData.accessTokenEtls;
            refreshTokenEtls = responseData.refreshTokenEtls;
            let etlsUser = responseData.etlsUser;

            // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ cookies
            const respLogin = NextResponse.redirect(new URL(pathname, req.url));
            respLogin.headers.set(
                'Set-Cookie',
                [
                    `accessToken=${accessToken}; HttpOnly; Path=/; Max-Age=43200`,
                    `refreshToken=${refreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                    `accessTokenEtls=${accessTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                    `refreshTokenEtls=${refreshTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                    `etlsUser=${etlsUser}; HttpOnly; Path=/; Max-Age=43200`,
                ].join(', ')
            );

            return respLogin;
        } else {
            return NextResponse.redirect(new URL('/login', req.url));
        }
    }

    // üîπ –û–±—Ä–æ–±–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫, –∫—Ä—ñ–º /login
    if (pathname !== '/login') {
        if (!accessTokenEtls && !refreshTokenEtls) {
            return logoutUser(req);
        }

        try {
            await jose.jwtVerify(accessTokenEtls, ETLS_ACCESS);
            return NextResponse.next();
        } catch (error) {
            try {
                await jose.jwtVerify(refreshTokenEtls, ETLS_REFRESH);

                // üîπ –Ø–∫—â–æ `refreshingToken=1`, —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
                if (refreshingToken === '1') {
                    console.log('üîÑ Waiting for token refresh...');
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    return NextResponse.next();
                }

                // üîπ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Cookie `refreshingToken=1`, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
                const response = NextResponse.next();
                response.headers.set('Set-Cookie', `refreshingToken=1; Path=/; HttpOnly`);

                console.log('üîÑ Refreshing tokens...');
                const refreshResponse = await fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json',
                        Cookie: req.headers.get('cookie') || '',
                    },
                });

                if (!refreshResponse.ok) {
                    throw new Error('Failed to refresh tokens');
                }

                const refreshResponseData = await refreshResponse.json();

                // üîπ –í–∏–¥–∞–ª—è—î–º–æ `refreshingToken=1`, –±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                response.headers.set(
                    'Set-Cookie',
                    [
                        `refreshingToken=; Path=/; HttpOnly; Max-Age=0`, // –í–∏–¥–∞–ª—è—î–º–æ
                        `accessTokenEtls=${refreshResponseData.newAccessTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                        `refreshTokenEtls=${refreshResponseData.newRefreshTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                        `accessToken=${refreshResponseData.newAccessToken}; HttpOnly; Path=/; Max-Age=43200`,
                        `refreshToken=${refreshResponseData.newRefreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                    ].join(', ')
                );

                return response;
            } catch (error) {
                console.error('refreshTokenEtls invalid:', error);
                return logoutUser(req);
            }
        }
    }

    // üîπ –û–±—Ä–æ–±–∫–∞ –ª–æ–≥—ñ–∫–∏ –¥–ª—è /login
    if (pathname === '/login') {
        if (accessTokenEtls) {
            try {
                await jose.jwtVerify(accessTokenEtls, ETLS_ACCESS);
                return NextResponse.redirect(new URL('/', req.url));
            } catch (error) {
                console.log(error);
            }
        }

        if (refreshTokenEtls) {
            try {
                await jose.jwtVerify(refreshTokenEtls, ETLS_REFRESH);

                // **–û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Ä–µ–¥—ñ—Ä–µ–∫—Ç–æ–º**
                const refreshResponse = await fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json',
                        Cookie: req.headers.get('cookie') || '',
                    },
                });

                if (!refreshResponse.ok) {
                    throw new Error('Failed to refresh tokens');
                }

                const refreshResponseData = await refreshResponse.json();

                // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ cookies
                const response = NextResponse.redirect(new URL('/', req.url));
                response.headers.set(
                    'Set-Cookie',
                    [
                        `accessTokenEtls=${refreshResponseData.newAccessTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                        `refreshTokenEtls=${refreshResponseData.newRefreshTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                        `accessToken=${refreshResponseData.newAccessToken}; HttpOnly; Path=/; Max-Age=43200`,
                        `refreshToken=${refreshResponseData.newRefreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                        `etlsUser=${refreshResponseData.newEtlsUser}; HttpOnly; Path=/; Max-Age=43200`,
                    ].join(', ')
                );

                return response;
            } catch (error) {
                console.error('Error refreshing tokens on /login:', error);
            }
        }

        return logoutUser(req);
    }

    return NextResponse.next();
}

// üîπ –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ middleware
export const config = {
    matcher: ['/login', '/', '/editor', '/test'],
};
