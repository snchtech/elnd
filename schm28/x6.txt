// üîπ –û–±—Ä–æ–±–∫–∞ –ª–æ–≥—ñ–∫–∏ –¥–ª—è /login
if (pathname === '/login') {
    if (accessTokenEtls) {
        try {
            await jose.jwtVerify(accessTokenEtls, ETLS_ACCESS);
            return NextResponse.redirect(new URL('/', req.url));
        } catch (error) {
            console.log(error);
        }
    }

    if (refreshTokenEtls) {
        try {
            await jose.jwtVerify(refreshTokenEtls, ETLS_REFRESH);

            // üîπ –Ø–∫—â–æ –≤–∂–µ —Ç—Ä–∏–≤–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤, —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            if (refreshingToken === '1') {
                console.log('üîÑ Waiting for token refresh on /login...');
                await new Promise(resolve => setTimeout(resolve, 2000));
                return NextResponse.redirect(new URL('/', req.url));
            }

            // üîπ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ `refreshingToken=1`, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            const response = NextResponse.next();
            response.headers.set('Set-Cookie', `refreshingToken=1; Path=/; HttpOnly`);

            console.log('üîÑ Refreshing tokens on /login...');
            const refreshResponse = await fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || '',
                },
            });

            if (!refreshResponse.ok) {
                throw new Error('Failed to refresh tokens');
            }

            const refreshResponseData = await refreshResponse.json();

            // üîπ –í–∏–¥–∞–ª—è—î–º–æ `refreshingToken=1`, –±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            response.headers.set(
                'Set-Cookie',
                [
                    `refreshingToken=; Path=/; HttpOnly; Max-Age=0`, // –í–∏–¥–∞–ª—è—î–º–æ
                    `accessTokenEtls=${refreshResponseData.newAccessTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                    `refreshTokenEtls=${refreshResponseData.newRefreshTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                    `accessToken=${refreshResponseData.newAccessToken}; HttpOnly; Path=/; Max-Age=43200`,
                    `refreshToken=${refreshResponseData.newRefreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                    `etlsUser=${refreshResponseData.newEtlsUser}; HttpOnly; Path=/; Max-Age=43200`,
                ].join(', ')
            );

            return NextResponse.redirect(new URL('/', req.url));
        } catch (error) {
            console.error('Error refreshing tokens on /login:', error);
        }
    }

    return logoutUser(req);
}
