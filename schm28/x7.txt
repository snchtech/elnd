–û–Ω–æ–≤–ª–µ–Ω–∏–π `customFetch.js`, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î **refreshingToken —É Cookies** –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —É –¥–≤–æ—Ö –º—ñ—Å—Ü—è—Ö:  
1. –ü–µ—Ä–µ–¥ —Å–ø—Ä–æ–±–æ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤, —è–∫—â–æ `accessToken` –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.  
2. –ü–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º, —è–∫—â–æ –æ—Ç—Ä–∏–º–∞–Ω–æ `401`.  

---

### **üõ† –û–Ω–æ–≤–ª–µ–Ω–∏–π `customFetch.js`**
```javascript
import { NextResponse } from 'next/server';
import { logoutUser } from '../../utils/auth';
export const runtime = 'edge';

const REMOTE_API = process.env.MAIN_API_URL;

export default async function customFetch(req) {
    try {
        // –î—ñ—Å—Ç–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        const { url, options } = await req.json();
        let retryCount = 0;

        // –û—Ç—Ä–∏–º—É—î–º–æ cookies
        const cookieStore = req.cookies;
        let accessToken = cookieStore.get('accessToken')?.value;
        let refreshToken = cookieStore.get('refreshToken')?.value;
        let accessTokenEtls = cookieStore.get('accessTokenEtls')?.value;
        let refreshTokenEtls = cookieStore.get('refreshTokenEtls')?.value;
        let etlsUser = cookieStore.get('etlsUser')?.value;
        let refreshingToken = cookieStore.get('refreshingToken')?.value; // üîπ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

        // üîπ –Ø–∫—â–æ –≤–∂–µ —Ç—Ä–∏–≤–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤, —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        if (refreshingToken === '1') {
            console.log('üîÑ Waiting for token refresh in customFetch...');
            await new Promise(resolve => setTimeout(resolve, 2000));
        }

        // üîπ –Ø–∫—â–æ accessToken –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –∞–ª–µ —î refreshToken ‚Äì –ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏
        if (!accessToken) {
            if (!refreshToken) return logoutUser(req);

            console.log('üîÑ Access token expired, refreshing tokens...');

            // üîπ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ `refreshingToken=1`, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
            const responseHeaders = new Headers();
            responseHeaders.set('Set-Cookie', `refreshingToken=1; Path=/; HttpOnly`);

            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || '',
                },
            });

            if (!refreshedTokens.ok) {
                console.error('üî¥ Failed to refresh tokens');
                return logoutUser(req);
            }

            const refreshData = await refreshedTokens.json();
            accessToken = refreshData.newAccessToken;
            refreshToken = refreshData.newRefreshToken;
            accessTokenEtls = refreshData.newAccessTokenEtls;
            refreshTokenEtls = refreshData.newRefreshTokenEtls;
            etlsUser = refreshData.newEtlsUser;

            // üîπ –í–∏–¥–∞–ª—è—î–º–æ `refreshingToken=1`, –±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            responseHeaders.set('Set-Cookie', `refreshingToken=; Path=/; HttpOnly; Max-Age=0`);
        }

        // üîπ –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ REMOTE_API –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –º–µ—Ç–æ–¥–æ–º
        let fetchOptions = {
            method: options.method || 'GET',
            credentials: 'include',
            headers: {
                Authorization: `Bearer ${accessToken}`,
                'Content-Type': 'application/json',
            },
        };

        if (!['GET', 'DELETE'].includes(options.method)) {
            fetchOptions.body = JSON.stringify(options.body || {});
        }

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        let response = await fetch(`${REMOTE_API}${url}`, fetchOptions);

        // üîπ –Ø–∫—â–æ –æ—Ç—Ä–∏–º—É—î–º–æ 401 ‚Äì –ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏ –æ–¥–∏–Ω —Ä–∞–∑
        if (response.status === 401 && retryCount === 0) {
            console.warn('üîÑ Received 401, retrying request after refreshing tokens...');

            // üîπ –Ø–∫—â–æ –≤–∂–µ —Ç—Ä–∏–≤–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤, —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            if (refreshingToken === '1') {
                console.log('üîÑ Waiting for token refresh in retry...');
                await new Promise(resolve => setTimeout(resolve, 2000));
            }

            // üîπ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ `refreshingToken=1`, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
            const responseHeaders = new Headers();
            responseHeaders.set('Set-Cookie', `refreshingToken=1; Path=/; HttpOnly`);

            const refreshedTokens = await fetch(`${req.nextUrl.origin}/api/auth/refreshtoken`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    Cookie: req.headers.get('cookie') || '',
                },
            });

            if (!refreshedTokens.ok) {
                console.error('üî¥ Failed to refresh tokens');
                return logoutUser(req);
            }

            const refreshData = await refreshedTokens.json();

            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
            const newAccessToken = refreshData.newAccessToken;
            const newRefreshToken = refreshData.newRefreshToken;
            const newAccessTokenEtls = refreshData.newAccessTokenEtls;
            const newRefreshTokenEtls = refreshData.newRefreshTokenEtls;
            const newEtlsUser = refreshData.newEtlsUser;

            fetchOptions.headers.Authorization = `Bearer ${newAccessToken}`;

            // üîπ –í–∏–¥–∞–ª—è—î–º–æ `refreshingToken=1`, –±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            responseHeaders.set('Set-Cookie', `refreshingToken=; Path=/; HttpOnly; Max-Age=0`);

            // –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –Ω–æ–≤–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            response = await fetch(`${REMOTE_API}${url}`, fetchOptions);

            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏ –≤ cookies
            accessToken = newAccessToken;
            refreshToken = newRefreshToken;
            accessTokenEtls = newAccessTokenEtls;
            refreshTokenEtls = newRefreshTokenEtls;
            etlsUser = newEtlsUser;
            retryCount = 1;
        } else if (response.status === 401 && retryCount === 1) {
            return logoutUser(req);
        }

        const responseResults = NextResponse.json(await response.json());

        // –û–Ω–æ–≤–ª—é—î–º–æ cookies
        responseResults.headers.set(
            'Set-Cookie',
            [
                `accessToken=${accessToken}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshToken=${refreshToken}; HttpOnly; Path=/; Max-Age=43200`,
                `accessTokenEtls=${accessTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                `refreshTokenEtls=${refreshTokenEtls}; HttpOnly; Path=/; Max-Age=43200`,
                `etlsUser=${etlsUser}; HttpOnly; Path=/; Max-Age=43200`,
            ].join(', ')
        );

        return responseResults;
    } catch (error) {
        console.error("‚ùå Error in customFetch:", error);
        return NextResponse.json({ error: 'Request failed' }, { status: 500 });
    }
}
```

---

## üî• **–©–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ?**
‚úÖ **–î–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É `refreshingToken` –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º —Ç–æ–∫–µ–Ω—ñ–≤.**  
‚úÖ **–Ø–∫—â–æ `refreshingToken=1`, `customFetch.js` —á–µ–∫–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤.**  
‚úÖ **–¢–µ–ø–µ—Ä –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è `refreshingToken=1`, –∞ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ‚Äî –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è.**  
‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ `middleware.js`, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤!**  

---

## üìå **–ü—ñ–¥—Å—É–º–æ–∫**
üîπ **–†–∞–Ω—ñ—à–µ `customFetch.js` –º—ñ–≥ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Ç–æ–∫–µ–Ω–∏ –∑ `middleware.js`, –≤–∏–∫–ª–∏–∫–∞—é—á–∏ –∑–∞–π–≤—ñ –∑–∞–ø–∏—Ç–∏.**  
üîπ **–¢–µ–ø–µ—Ä `refreshingToken` –∫–æ–Ω—Ç—Ä–æ–ª—é—î –ø—Ä–æ—Ü–µ—Å, –∑–∞–ø–æ–±—ñ–≥–∞—é—á–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.**  
üîπ **–¶–µ –≥–∞—Ä–∞–Ω—Ç—É—î —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ —ñ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ä–æ–±–æ—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.**  

üöÄ **–¢–µ–ø–µ—Ä `customFetch.js` —ñ `middleware.js` –ø—Ä–∞—Ü—é—é—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ!**  
–Ø–∫—â–æ —î —â–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äì –∑–∞–ø–∏—Ç—É–π! üòä