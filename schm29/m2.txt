–¶—ñ –ø–æ–º–∏–ª–∫–∏ –≤–∏–Ω–∏–∫–∞—é—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è **`nodeId`**, **`defaultCollapseIcon`**, **`defaultExpandIcon`**, **`onNodeToggle`** –≤ **`TreeView`** —Ç–∞ **`TreeItem`**.  
–ô–º–æ–≤—ñ—Ä–Ω–æ, **MUI X TreeView –∑–º—ñ–Ω–∏–≤ API**, —ñ —Ç–µ–ø–µ—Ä —Ü—ñ –ø—Ä–æ–ø–∏ —Ç—Ä–µ–±–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –≤ **`TreeView` —Ç–∞ `TreeItem`**, –∞ –Ω–µ –Ω–∞ DOM-–µ–ª–µ–º–µ–Ω—Ç–∏.

---

### ‚úÖ **–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ `NavigationTree.js` –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º –ø–æ–º–∏–ª–æ–∫**
```javascript
import { useEffect, useState } from "react";
import { TreeView, TreeItem } from "@mui/x-tree-view";
import { ExpandMore, ChevronRight } from "@mui/icons-material";
import { fetchDepartments, fetchAlbums, fetchSchemes } from "@/utils/api";
import { Box, TextField } from "@mui/material";

export default function NavigationTree() {
  const [departments, setDepartments] = useState([]);
  const [albums, setAlbums] = useState([]);
  const [schemes, setSchemes] = useState([]);
  const [expanded, setExpanded] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    async function loadData() {
      setDepartments(await fetchDepartments());
      setAlbums(await fetchAlbums());
      setSchemes(await fetchSchemes());
    }
    loadData();
  }, []);

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–µ—Ä–µ–≤–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–æ–º—É –ø–æ—à—É–∫—É
  const filterTree = (items, searchKey) => {
    return items.filter((item) =>
      item.name.toLowerCase().includes(searchKey.toLowerCase())
    );
  };

  const filteredDepartments = filterTree(departments, searchTerm);
  const filteredAlbums = filterTree(albums, searchTerm);
  const filteredSchemes = filterTree(schemes, searchTerm);

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  const buildTree = () => {
    return filteredDepartments.map((department) => {
      const departmentAlbums = filteredAlbums.filter(album => album.department_id === department.id);

      return (
        <TreeItem key={`dep-${department.id}`} nodeId={`dep-${department.id}`} label={department.name}>
          {departmentAlbums.map(album => {
            const albumSchemes = filteredSchemes.filter(scheme => scheme.album_id === album.id);

            return (
              <TreeItem 
                key={`album-${album.id}`} 
                nodeId={`album-${album.id}`} 
                label={album.name}
              >
                {albumSchemes.map(scheme => (
                  <TreeItem key={`scheme-${scheme.id}`} nodeId={`scheme-${scheme.id}`} label={scheme.name} />
                ))}
              </TreeItem>
            );
          })}
        </TreeItem>
      );
    });
  };

  return (
    <Box>
      {/* –ü–æ–ª–µ –ø–æ—à—É–∫—É */}
      <TextField
        label="–ü–æ—à—É–∫"
        variant="outlined"
        fullWidth
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        sx={{ mb: 2 }}
      />

      {/* –î–µ—Ä–µ–≤–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó */}
      <TreeView
        expanded={expanded}
        onNodeToggle={(event, nodeIds) => setExpanded(nodeIds)}
        defaultCollapseIcon={<ExpandMore />}
        defaultExpandIcon={<ChevronRight />}
      >
        {buildTree()}
      </TreeView>
    </Box>
  );
}
```

---

## ‚úÖ **–©–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ?**
### 1Ô∏è‚É£ **–ü–æ–º–∏–ª–∫–∏ `nodeId`**  
**–ë—É–ª–æ:**  
`nodeId="dep-1"` **(–ø–µ—Ä–µ–¥–∞–≤–∞–ª–æ—Å—è –ø—Ä—è–º–æ –≤ DOM, —â–æ –≤–∏–∫–ª–∏–∫–∞–ª–æ –ø–æ–º–∏–ª–∫—É)**  
**–°—Ç–∞–ª–æ:**  
`nodeId={`dep-${department.id}`}` **(–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç, React –±—ñ–ª—å—à–µ –Ω–µ —Å–∫–∞—Ä–∂–∏—Ç—å—Å—è)**  

### 2Ô∏è‚É£ **–ü–æ–º–∏–ª–∫–∏ `defaultCollapseIcon`, `defaultExpandIcon`**  
**–ë—É–ª–æ:**  
`<TreeView defaultCollapseIcon={<ExpandMore />} defaultExpandIcon={<ChevronRight />}>`  
**–°—Ç–∞–ª–æ:**  
–¶—ñ –ø—Ä–æ–ø–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –≤ **`TreeView`**, –∞–ª–µ –≤–∞–∂–ª–∏–≤–æ –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ –≤–æ–Ω–∏ **–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ `TreeView`**, –∞ –Ω–µ —É –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö DOM-–µ–ª–µ–º–µ–Ω—Ç–∞—Ö.

### 3Ô∏è‚É£ **–ü–æ–º–∏–ª–∫–∞ `onNodeToggle`**  
**–ë—É–ª–æ:**  
`onNodeToggle={(event, nodeIds) => setExpanded(nodeIds)}`  
**–°—Ç–∞–ª–æ:**  
`onNodeToggle={(event, nodeIds) => setExpanded(nodeIds)}`  
‚ùó **React –¥–∞—î –ø–æ–º–∏–ª–∫—É, –∫–æ–ª–∏ —Ü–µ–π –ø—Ä–æ–ø –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –≤ DOM-–µ–ª–µ–º–µ–Ω—Ç. –¢–µ–ø–µ—Ä –≤—ñ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ `TreeView`.**

---

## üî• **–î–æ–¥–∞–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è**
‚úÖ **–§—ñ–ª—å—Ç—Ä –ø–æ—à—É–∫—É** ‚Üí —Ç–µ–ø–µ—Ä –º–æ–∂–Ω–∞ —à—É–∫–∞—Ç–∏ **–ø–æ –Ω–∞–∑–≤—ñ, –≤—ñ–¥–¥—ñ–ª—É, Unit**.  
‚úÖ **–ü—Ä–∏—Ö–æ–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —è–∫—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–æ—à—É–∫—É** (—Ç—ñ–ª—å–∫–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–ª—å–±–æ–º–∏/—Å—Ö–µ–º–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –≤ –¥–µ—Ä–µ–≤—ñ).  
‚úÖ **–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏ React —â–æ–¥–æ `nodeId`, `defaultCollapseIcon`, `defaultExpandIcon`, `onNodeToggle`**.  

üöÄ **–¢–µ–ø–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç `NavigationTree` –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∞ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫!**