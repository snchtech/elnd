To create a **reference point** on a Konva element and display it when the user clicks on the element, you can follow these steps:

---

### **Steps to Implement**

1. **Track the Selected Element:**
   - Use `useState` to store the ID of the currently selected element.

2. **Add a Reference Point:**
   - Use a `Circle` to represent the reference point.
   - Position the reference point relative to the selected element.

3. **Show the Reference Point:**
   - Conditionally render the `Circle` only when an element is clicked (i.e., itâ€™s selected).

---

### **Code Example**

Here is an example of how to implement this functionality:

```javascript
import React, { useState, useRef, useEffect } from 'react';
import { Stage, Layer, Rect, Circle, Transformer } from 'react-konva';

const SchemeEditor = () => {
  const [elements, setElements] = useState([
    { id: '1', type: 'rect', x: 100, y: 100, width: 150, height: 100, fill: 'red' },
    { id: '2', type: 'rect', x: 300, y: 200, width: 150, height: 100, fill: 'blue' },
  ]);
  const [selectedId, setSelectedId] = useState(null); // Track selected element
  const [referencePoint, setReferencePoint] = useState(null); // Reference point position
  const stageRef = useRef(null);
  const transformerRef = useRef(null);

  // Attach transformer to the selected shape
  useEffect(() => {
    if (selectedId) {
      const node = stageRef.current.findOne(`#${selectedId}`);
      transformerRef.current.nodes([node]);
      transformerRef.current.getLayer().batchDraw();
    } else {
      transformerRef.current.nodes([]);
    }
  }, [selectedId]);

  // Handle element selection
  const handleElementClick = (el) => {
    setSelectedId(el.id);
    // Set the reference point to the center of the element
    setReferencePoint({
      x: el.x + el.width / 2,
      y: el.y + el.height / 2,
    });
  };

  // Clear selection and hide reference point when clicking outside
  const handleStageClick = (e) => {
    if (e.target === e.target.getStage()) {
      setSelectedId(null);
      setReferencePoint(null);
    }
  };

  return (
    <div>
      <Stage
        ref={stageRef}
        width={window.innerWidth}
        height={window.innerHeight}
        onClick={handleStageClick} // Clear selection when clicking outside
        style={{ border: '1px solid black' }}
      >
        <Layer>
          {elements.map((el) => (
            <Rect
              key={el.id}
              id={el.id}
              x={el.x}
              y={el.y}
              width={el.width}
              height={el.height}
              fill={el.fill}
              draggable
              onClick={() => handleElementClick(el)}
              stroke={selectedId === el.id ? 'blue' : 'black'}
              strokeWidth={selectedId === el.id ? 2 : 1}
            />
          ))}

          {/* Reference Point */}
          {referencePoint && (
            <Circle
              x={referencePoint.x}
              y={referencePoint.y}
              radius={5}
              fill="yellow"
              stroke="black"
              strokeWidth={1}
            />
          )}

          {/* Transformer for resizing */}
          <Transformer ref={transformerRef} />
        </Layer>
      </Stage>
    </div>
  );
};

export default SchemeEditor;
```

---

### **How It Works**

1. **Track Selected Element:**
   - When a user clicks on an element, the `handleElementClick` function sets the `selectedId` and calculates the reference point based on the elementâ€™s position and dimensions.

   ```javascript
   const handleElementClick = (el) => {
     setSelectedId(el.id);
     setReferencePoint({
       x: el.x + el.width / 2,
       y: el.y + el.height / 2,
     });
   };
   ```

2. **Render the Reference Point:**
   - The `Circle` representing the reference point is conditionally rendered only when a reference point exists.

   ```javascript
   {referencePoint && (
     <Circle
       x={referencePoint.x}
       y={referencePoint.y}
       radius={5}
       fill="yellow"
       stroke="black"
       strokeWidth={1}
     />
   )}
   ```

3. **Clear Selection:**
   - Clicking outside of the elements clears the `selectedId` and hides the reference point.

   ```javascript
   const handleStageClick = (e) => {
     if (e.target === e.target.getStage()) {
       setSelectedId(null);
       setReferencePoint(null);
     }
   };
   ```

4. **Transformer for Visual Feedback:**
   - A `Transformer` is attached to the selected element to provide visual feedback for selection.

---

### **Enhancements**

1. **Dynamic Position Adjustment:**
   - Allow the reference point to be repositioned using dragging.

   ```javascript
   <Circle
     x={referencePoint.x}
     y={referencePoint.y}
     draggable
     onDragEnd={(e) => setReferencePoint({ x: e.target.x(), y: e.target.y() })}
     radius={5}
     fill="yellow"
     stroke="black"
     strokeWidth={1}
   />
   ```

2. **Tooltips:**
   - Show additional information (like coordinates) near the reference point.

   ```javascript
   <Text
     x={referencePoint.x + 10}
     y={referencePoint.y - 10}
     text={`(${referencePoint.x.toFixed(0)}, ${referencePoint.y.toFixed(0)})`}
     fontSize={12}
     fill="black"
   />
   ```

3. **Save Reference Point Data:**
   - Save the reference point position in the `elements` array and persist it when saving the scheme.

---

### **Behavior**

1. **Select an Element:**
   - Click on a `Rect` to select it.
   - A yellow circle appears at its center (reference point).

2. **Clear Selection:**
   - Clicking outside the canvas clears the selection and hides the reference point.

3. **Highlight:**
   - The selected element is highlighted with a blue border.

---

This approach provides a flexible and reusable way to manage reference points for elements on a **Konva canvas**. Let me know if you need further enhancements! ðŸ˜Š