### **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π `AlbumsReport.js`**
–¢–µ–ø–µ—Ä –∫–Ω–æ–ø–∫–∞ **–ü–µ—Ä–µ–≥–ª—è–¥—É (`View`)** –≤—ñ–¥–∫—Ä–∏–≤–∞—î **—Å—Ç–∞–±—ñ–ª—å–Ω—É –≤–µ—Ä—Å—ñ—é** –∞–ª—å–±–æ–º—É, –∞ –∫–Ω–æ–ø–∫–∞ **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (`Edit`)** –≤—ñ–¥–∫—Ä–∏–≤–∞—î **–æ—Å—Ç–∞–Ω–Ω—é —Ä–µ–¥–∞–≥–æ–≤–∞–Ω—É –≤–µ—Ä—Å—ñ—é**.

```javascript
import { useState } from "react";
import { useRouter } from "next/router";
import {
  Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, IconButton,
  Dialog, DialogTitle, DialogContent, DialogActions, Button, TablePagination
} from "@mui/material";
import { Visibility, Edit, Delete } from "@mui/icons-material";
import { getStableAlbumVersion, getLatestAlbumVersion, updateAlbumStatus } from "@/utils/api";

export default function AlbumsReport({ albums, statuses, mode }) {
  const router = useRouter();
  const [selectedAlbum, setSelectedAlbum] = useState(null);
  const [isArchiveModalOpen, setIsArchiveModalOpen] = useState(false);
  const [page, setPage] = useState(0);
  const rowsPerPage = 15;

  // –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—É –≤–µ—Ä—Å—ñ—é –∞–ª—å–±–æ–º—É
  const handleViewClick = async (albumId) => {
    try {
      const stableVersion = await getStableAlbumVersion(albumId);
      if (stableVersion?.version_id) {
        router.push(`/albums/${albumId}/versions/${stableVersion.version_id}?mode=viewer`);
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó:", error);
    }
  };

  // –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—é —Ä–µ–¥–∞–≥–æ–≤–∞–Ω—É –≤–µ—Ä—Å—ñ—é –∞–ª—å–±–æ–º—É
  const handleEditClick = async (albumId) => {
    try {
      const latestVersion = await getLatestAlbumVersion(albumId);
      if (latestVersion?.version_id) {
        router.push(`/albums/${albumId}/versions/${latestVersion.version_id}?mode=editor`);
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó:", error);
    }
  };

  // –í—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó
  const handleArchiveClick = (album) => {
    setSelectedAlbum(album);
    setIsArchiveModalOpen(true);
  };

  // –ó–∞–ø–∏—Ç –¥–æ API –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–ª—å–±–æ–º—É –Ω–∞ "–ê—Ä—Ö—ñ–≤"
  const confirmArchiveAlbum = async () => {
    if (!selectedAlbum) return;

    try {
      await updateAlbumStatus(selectedAlbum.id, "–ê—Ä—Ö—ñ–≤"); // –ó–∞–ø–∏—Ç –¥–æ API
      setIsArchiveModalOpen(false);
      router.reload(); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—ñ—Å–ª—è –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó
    } catch (error) {
      console.error("Error archiving album:", error);
    }
  };

  // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  // –í—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∞–ª—å–±–æ–º–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  const paginatedAlbums = albums.slice(page * rowsPerPage, (page + 1) * rowsPerPage);

  return (
    <>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>–ü–µ—Ä–µ–≥–ª—è–¥</TableCell>
              <TableCell>ID</TableCell>
              <TableCell>–í—ñ–¥–¥—ñ–ª</TableCell>
              <TableCell>Unit</TableCell>
              <TableCell>–ù–∞–∑–≤–∞</TableCell>
              <TableCell>–û–ø–∏—Å</TableCell>
              <TableCell>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è</TableCell>
              {mode === "editor" && <TableCell>–î—ñ—ó</TableCell>}
            </TableRow>
          </TableHead>
          <TableBody>
            {paginatedAlbums.map((album) => (
              <TableRow key={album.id}>
                {/* –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó */}
                <TableCell>
                  <IconButton color="primary" onClick={() => handleViewClick(album.id)}>
                    <Visibility />
                  </IconButton>
                </TableCell>
                <TableCell>{album.id}</TableCell>
                <TableCell>{album.department_name}</TableCell>
                <TableCell>{album.unit_name}</TableCell>
                <TableCell>{album.name}</TableCell>
                <TableCell>{album.description}</TableCell>
                <TableCell>{album.date_update || album.date_create}</TableCell>

                {/* –î—ñ—ó –¥–ª—è —Ä–æ–ª—ñ editor */}
                {mode === "editor" && (
                  <TableCell>
                    <IconButton color="warning" onClick={() => handleEditClick(album.id)}>
                      <Edit />
                    </IconButton>
                    <IconButton color="error" onClick={() => handleArchiveClick(album)}>
                      <Delete />
                    </IconButton>
                  </TableCell>
                )}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      {/* –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è (–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±—ñ–ª—å—à–µ 15 –∞–ª—å–±–æ–º—ñ–≤) */}
      {albums.length > rowsPerPage && (
        <TablePagination
          component="div"
          count={albums.length}
          page={page}
          rowsPerPage={rowsPerPage}
          rowsPerPageOptions={[rowsPerPage]}
          onPageChange={handleChangePage}
        />
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó */}
      <Dialog open={isArchiveModalOpen} onClose={() => setIsArchiveModalOpen(false)}>
        <DialogTitle>–ê—Ä—Ö—ñ–≤–∞—Ü—ñ—è –∞–ª—å–±–æ–º—É</DialogTitle>
        <DialogContent>
          –í–∏ —Ç–æ—á–Ω–æ –±–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –∞–ª—å–±–æ–º <b>{selectedAlbum?.name}</b> –≤ –∞—Ä—Ö—ñ–≤?
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsArchiveModalOpen(false)} color="secondary">
            –í—ñ–¥–º—ñ–Ω–∏—Ç–∏
          </Button>
          <Button onClick={confirmArchiveAlbum} color="primary" variant="contained">
            –¢–∞–∫
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
}
```

---

## **üìå SQL-–∑–∞–ø–∏—Ç–∏ –¥–ª—è API**
–°—Ç–≤–æ—Ä—é—î–º–æ –¥–≤–∞ **endpoint-–∏** –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ–π.

### **üìÅ `pages/api/rest/getStableAlbumVersion.js`**
```javascript
import { queryDatabase } from "@/utils/db";

export default async function handler(req, res) {
  if (req.method !== "GET") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  const { albumId } = req.query;

  try {
    const sql = `
      SELECT version_id
      FROM ALBUM_VERSION
      WHERE album_id = :albumId AND stable = 1
      ORDER BY date_update DESC
      FETCH FIRST 1 ROWS ONLY
    `;
    const result = await queryDatabase(sql, { albumId });

    if (result.length > 0) {
      res.status(200).json(result[0]);
    } else {
      res.status(404).json({ error: "Stable version not found" });
    }
  } catch (error) {
    console.error("Error fetching stable album version:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
}
```

### **üìÅ `pages/api/rest/getLatestAlbumVersion.js`**
```javascript
import { queryDatabase } from "@/utils/db";

export default async function handler(req, res) {
  if (req.method !== "GET") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  const { albumId } = req.query;

  try {
    const sql = `
      SELECT version_id
      FROM ALBUM_VERSION
      WHERE album_id = :albumId
      ORDER BY date_update DESC
      FETCH FIRST 1 ROWS ONLY
    `;
    const result = await queryDatabase(sql, { albumId });

    if (result.length > 0) {
      res.status(200).json(result[0]);
    } else {
      res.status(404).json({ error: "Latest version not found" });
    }
  } catch (error) {
    console.error("Error fetching latest album version:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
}
```

---

## **üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤ —É `utils/api.js`**
```javascript
export const getStableAlbumVersion = async (albumId) => {
  return fetchData(`/api/rest/getStableAlbumVersion?albumId=${albumId}`, { method: "GET" });
};

export const getLatestAlbumVersion = async (albumId) => {
  return fetchData(`/api/rest/getLatestAlbumVersion?albumId=${albumId}`, { method: "GET" });
};
```

---

## **üîπ –©–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ?**
‚úÖ **–ü–µ—Ä–µ–≥–ª—è–¥** ‚Üí –≤—ñ–¥–∫—Ä–∏–≤–∞—î **—Å—Ç–∞–±—ñ–ª—å–Ω—É –≤–µ—Ä—Å—ñ—é**.  
‚úÖ **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è** ‚Üí –≤—ñ–¥–∫—Ä–∏–≤–∞—î **–æ—Å—Ç–∞–Ω–Ω—é —Ä–µ–¥–∞–≥–æ–≤–∞–Ω—É –≤–µ—Ä—Å—ñ—é**.  
‚úÖ **–î–æ–¥–∞–Ω–æ SQL —Ç–∞ API-–∑–∞–ø–∏—Ç–∏** –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è **—Å—Ç–∞–±—ñ–ª—å–Ω–æ—ó —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó –∞–ª—å–±–æ–º—É**.  

üöÄ **–¢–µ–ø–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∞ `AlbumsReport.js` –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!**