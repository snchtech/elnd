### **üìå –û–Ω–æ–≤–ª–µ–Ω–∏–π `NavigationTree.js` –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏**
‚úÖ –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ `SCHEME`  
‚úÖ –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ **–í—ñ–¥–¥—ñ–ª ‚Üí –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª ‚Üí –ê–ª—å–±–æ–º ‚Üí –°—Ö–µ–º–∞**  
‚úÖ –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –ø—Ä–∏ –∫–ª—ñ–∫—É  
‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è **`mode`** –¥–æ `URL` (`viewer/editor`)

```javascript
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { TreeView } from "@mui/x-tree-view/TreeView";
import { TreeItem } from "@mui/x-tree-view/TreeItem";
import { ExpandMore, ChevronRight } from "@mui/icons-material";
import { fetchNavigationTree } from "@/utils/api";
import { Box, TextField, Paper } from "@mui/material";

export default function NavigationTree() {
  const router = useRouter();
  const { mode } = router.query; // –û—Ç—Ä–∏–º–∞–Ω–Ω—è mode (viewer/editor)
  const [treeData, setTreeData] = useState([]);
  const [expanded, setExpanded] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    async function loadData() {
      setTreeData(await fetchNavigationTree());
    }
    loadData();
  }, []);

  // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤ –ø–æ –∞–ª—å–±–æ–º—É —Ç–∞ —Å—Ö–µ–º—ñ
  const handleNodeClick = (type, id) => {
    const baseUrl = type === "album" ? `/album/${id}` : `/scheme/${id}`;
    const url = mode ? `${baseUrl}?mode=${mode}` : baseUrl;
    router.push(url);
  };

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –≤–≤–µ–¥–µ–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
  const filterTree = (items, searchKey) => {
    return items.filter((item) =>
      item.name.toLowerCase().includes(searchKey.toLowerCase())
    );
  };

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  const buildTree = () => {
    return treeData.map((department) => (
      <TreeItem key={`dep-${department.id}`} itemId={`dep-${department.id}`} label={department.name}>
        {department.units.map((unit) => (
          <TreeItem key={`unit-${unit.id}`} itemId={`unit-${unit.id}`} label={unit.name}>
            {unit.albums.map((album) => (
              <TreeItem
                key={`album-${album.id}`}
                itemId={`album-${album.id}`}
                label={album.name}
                onClick={() => handleNodeClick("album", album.id)}
              >
                {album.schemes.map((scheme) => (
                  <TreeItem
                    key={`scheme-${scheme.id}`}
                    itemId={`scheme-${scheme.id}`}
                    label={scheme.name}
                    onClick={() => handleNodeClick("scheme", scheme.id)}
                  />
                ))}
              </TreeItem>
            ))}
          </TreeItem>
        ))}
      </TreeItem>
    ));
  };

  return (
    <Paper sx={{ padding: 2 }}>
      {/* –ü–æ–ª–µ –ø–æ—à—É–∫—É */}
      <TextField
        label="–ü–æ—à—É–∫"
        variant="outlined"
        fullWidth
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        sx={{ mb: 2 }}
      />

      {/* –î–µ—Ä–µ–≤–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó */}
      <TreeView
        expanded={expanded}
        onNodeToggle={(event, nodeIds) => setExpanded(nodeIds)}
        defaultCollapseIcon={<ExpandMore />}
        defaultExpandIcon={<ChevronRight />}
      >
        {buildTree()}
      </TreeView>
    </Paper>
  );
}
```

---

## **üìå SQL –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó**
–°—Ç–≤–æ—Ä—é—î–º–æ **API** `/pages/api/rest/getNavigationTree.js`, —è–∫–µ –æ—Ç—Ä–∏–º—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ.

```javascript
import { queryDatabase } from "@/utils/db";

export default async function handler(req, res) {
  if (req.method !== "GET") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  try {
    const sql = `
      SELECT 
        s.id AS scheme_id,
        s.name AS scheme_name,
        a.id AS album_id,
        a.name AS album_name,
        d.id AS department_id,
        d.name AS department_name,
        u.id AS unit_id,
        u.name AS unit_name
      FROM SCHEME s
      JOIN ALBUM a ON s.album_id = a.id
      JOIN DEPARTMENT d ON s.depart_id = d.id
      JOIN UNIT u ON s.unit_id = u.id
      ORDER BY d.name, u.name, a.name, s.name
    `;

    const rows = await queryDatabase(sql);

    // –ì—Ä—É–ø—É—î–º–æ –¥–∞–Ω—ñ —É –¥–µ—Ä–µ–≤–æ
    const tree = [];
    const departmentMap = new Map();
    const unitMap = new Map();
    const albumMap = new Map();

    rows.forEach(row => {
      if (!departmentMap.has(row.department_id)) {
        departmentMap.set(row.department_id, {
          id: row.department_id,
          name: row.department_name,
          units: [],
        });
        tree.push(departmentMap.get(row.department_id));
      }

      if (!unitMap.has(row.unit_id)) {
        const unitObj = {
          id: row.unit_id,
          name: row.unit_name,
          albums: [],
        };
        unitMap.set(row.unit_id, unitObj);
        departmentMap.get(row.department_id).units.push(unitObj);
      }

      if (!albumMap.has(row.album_id)) {
        const albumObj = {
          id: row.album_id,
          name: row.album_name,
          schemes: [],
        };
        albumMap.set(row.album_id, albumObj);
        unitMap.get(row.unit_id).albums.push(albumObj);
      }

      albumMap.get(row.album_id).schemes.push({
        id: row.scheme_id,
        name: row.scheme_name,
      });
    });

    res.status(200).json(tree);
  } catch (error) {
    console.error("Error fetching navigation tree:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
}
```

---

## **üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è `utils/api.js` –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ä–µ–≤–∞**
```javascript
export const fetchNavigationTree = async () => {
  return fetchData("/api/rest/getNavigationTree", { method: "GET" });
};
```

---

## **üìå –©–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ?**
‚úÖ **–§–æ—Ä–º—É–≤–∞–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ `SCHEME`**  
‚úÖ **–ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –í—ñ–¥–¥—ñ–ª ‚Üí –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª ‚Üí –ê–ª—å–±–æ–º ‚Üí –°—Ö–µ–º–∞**  
‚úÖ **–ö–ª—ñ–∫ –Ω–∞ –∞–ª—å–±–æ–º ‚Üí –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ `/album/ID` –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º `mode`**  
‚úÖ **–ö–ª—ñ–∫ –Ω–∞ —Å—Ö–µ–º—É ‚Üí –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ `/scheme/ID` –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º `mode`**  
‚úÖ **SQL-–∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—î—ó —ñ—î—Ä–∞—Ä—Ö—ñ—ó**  
‚úÖ **API-–∑–∞–ø–∏—Ç `fetchNavigationTree()`**  

üöÄ **–¢–µ–ø–µ—Ä `NavigationTree.js` –∫–æ—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º—É—î –¥–µ—Ä–µ–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ `SCHEME`!**