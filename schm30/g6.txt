### **üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è `NavigationTree.js` –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –ø–æ—à—É–∫–æ–º**
‚úÖ –ü–æ—à—É–∫ **–ø–æ –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—è—Ö**: –í—ñ–¥–¥—ñ–ª ‚Üí –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª ‚Üí –ê–ª—å–±–æ–º ‚Üí –°—Ö–µ–º–∞  
‚úÖ –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –≤—É–∑–ª—ñ–≤ –ø—Ä–∏ –ø–æ—à—É–∫—É  
‚úÖ **–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤** —É –¥–µ—Ä–µ–≤—ñ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É  

```javascript
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { TreeView } from "@mui/x-tree-view/TreeView";
import { TreeItem } from "@mui/x-tree-view/TreeItem";
import { ExpandMore, ChevronRight } from "@mui/icons-material";
import { fetchNavigationTree } from "@/utils/api";
import { Box, TextField, Paper } from "@mui/material";

export default function NavigationTree() {
  const router = useRouter();
  const { mode } = router.query; // –û—Ç—Ä–∏–º–∞–Ω–Ω—è mode (viewer/editor)
  const [treeData, setTreeData] = useState([]);
  const [expanded, setExpanded] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredTree, setFilteredTree] = useState([]);

  useEffect(() => {
    async function loadData() {
      const data = await fetchNavigationTree();
      setTreeData(data);
      setFilteredTree(data);
    }
    loadData();
  }, []);

  // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤ –ø–æ –∞–ª—å–±–æ–º—É —Ç–∞ —Å—Ö–µ–º—ñ
  const handleNodeClick = (type, id) => {
    const baseUrl = type === "album" ? `/album/${id}` : `/scheme/${id}`;
    const url = mode ? `${baseUrl}?mode=${mode}` : baseUrl;
    router.push(url);
  };

  // –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –ø–æ –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—è—Ö (–í—ñ–¥–¥—ñ–ª ‚Üí –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª ‚Üí –ê–ª—å–±–æ–º ‚Üí –°—Ö–µ–º–∞)
  const searchTree = (items, searchKey) => {
    if (!searchKey) {
      setFilteredTree(treeData);
      setExpanded([]);
      return;
    }

    const lowerSearchKey = searchKey.toLowerCase();
    const expandedNodes = new Set();

    const filterItems = (items) => {
      return items
        .map((department) => {
          const filteredUnits = department.units
            .map((unit) => {
              const filteredAlbums = unit.albums
                .map((album) => {
                  const filteredSchemes = album.schemes.filter((scheme) =>
                    scheme.name.toLowerCase().includes(lowerSearchKey)
                  );

                  if (filteredSchemes.length > 0 || album.name.toLowerCase().includes(lowerSearchKey)) {
                    expandedNodes.add(`album-${album.id}`);
                    return { ...album, schemes: filteredSchemes };
                  }
                  return null;
                })
                .filter(Boolean);

              if (filteredAlbums.length > 0 || unit.name.toLowerCase().includes(lowerSearchKey)) {
                expandedNodes.add(`unit-${unit.id}`);
                return { ...unit, albums: filteredAlbums };
              }
              return null;
            })
            .filter(Boolean);

          if (filteredUnits.length > 0 || department.name.toLowerCase().includes(lowerSearchKey)) {
            expandedNodes.add(`dep-${department.id}`);
            return { ...department, units: filteredUnits };
          }
          return null;
        })
        .filter(Boolean);
    };

    const filteredResults = filterItems(treeData);
    setFilteredTree(filteredResults);
    setExpanded([...expandedNodes]);
  };

  // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  const buildTree = () => {
    return filteredTree.map((department) => (
      <TreeItem key={`dep-${department.id}`} nodeId={`dep-${department.id}`} label={department.name}>
        {department.units.map((unit) => (
          <TreeItem key={`unit-${unit.id}`} nodeId={`unit-${unit.id}`} label={unit.name}>
            {unit.albums.map((album) => (
              <TreeItem
                key={`album-${album.id}`}
                nodeId={`album-${album.id}`}
                label={album.name}
                onClick={() => handleNodeClick("album", album.id)}
              >
                {album.schemes.map((scheme) => (
                  <TreeItem
                    key={`scheme-${scheme.id}`}
                    nodeId={`scheme-${scheme.id}`}
                    label={scheme.name}
                    onClick={() => handleNodeClick("scheme", scheme.id)}
                  />
                ))}
              </TreeItem>
            ))}
          </TreeItem>
        ))}
      </TreeItem>
    ));
  };

  return (
    <Paper sx={{ padding: 2 }}>
      {/* –ü–æ–ª–µ –ø–æ—à—É–∫—É */}
      <TextField
        label="–ü–æ—à—É–∫"
        variant="outlined"
        fullWidth
        value={searchTerm}
        onChange={(e) => {
          setSearchTerm(e.target.value);
          searchTree(treeData, e.target.value);
        }}
        sx={{ mb: 2 }}
      />

      {/* –î–µ—Ä–µ–≤–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó */}
      <TreeView
        expanded={expanded}
        onNodeToggle={(event, nodeIds) => setExpanded(nodeIds)}
        defaultCollapseIcon={<ExpandMore />}
        defaultExpandIcon={<ChevronRight />}
      >
        {buildTree()}
      </TreeView>
    </Paper>
  );
}
```

---

## **üìå –©–æ –ø–æ–∫—Ä–∞—â–µ–Ω–æ?**
‚úÖ **–ü–æ—à—É–∫ –ø–æ –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—è—Ö:** `Department`, `Unit`, `Album`, `Scheme`  
‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –≤—É–∑–ª—ñ–≤ –¥–µ—Ä–µ–≤–∞**  
‚úÖ **–ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –ø–æ—à—É–∫—É –ø—ñ–¥—Å–≤—ñ—á—É—é—Ç—å—Å—è –ª–∏—à–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –≤—É–∑–ª–∏, –±–µ–∑ –≤—Ç—Ä–∞—Ç–∏ –≤–∫–ª–∞–¥–µ–Ω–æ—Å—Ç—ñ**  
‚úÖ **–Ø–∫—â–æ –ø–æ—à—É–∫ –æ—á–∏—â–µ–Ω–æ, –¥–µ—Ä–µ–≤–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —É –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω**  

üöÄ **–¢–µ–ø–µ—Ä `NavigationTree.js` –ø—Ä–∞—Ü—é—î –Ω–∞–±–∞–≥–∞—Ç–æ –∫—Ä–∞—â–µ –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º –ø–æ—à—É–∫–æ–º —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏!**