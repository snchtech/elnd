–û—Å—å –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥, —è–∫–∏–π –≤–∫–ª—é—á–∞—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:

‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ä–µ–≤–∞ –ø—Ä–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–ª—å–±–æ–º—É –∞–±–æ —Å—Ö–µ–º–∏.**  
‚úÖ **–ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤—ñ.**  
‚úÖ **–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ "–ê–ª—å–±–æ–º–∏:" —ñ "–°—Ö–µ–º–∏:".**  
‚úÖ **–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –¥–æ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É + –ø—ñ–¥—Å–≤—ñ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.**  
‚úÖ **–ó–º—ñ–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ "+" (—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è, –∞ –Ω–µ –ø–µ—Ä–µ—Ö—ñ–¥).**  

### üîΩ –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥:
```jsx
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { TreeView } from "@mui/x-tree-view/TreeView";
import { TreeItem } from "@mui/x-tree-view/TreeItem";
import { ExpandMore, ChevronRight } from "@mui/icons-material";
import { fetchNavigationTree } from "@/utils/api";
import { Box, TextField, Paper, Typography } from "@mui/material";

export default function NavigationTree() {
  const router = useRouter();
  const { mode, albumId, schemeId } = router.query; // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
  const [treeData, setTreeData] = useState([]);
  const [expanded, setExpanded] = useState([]);
  const [selected, setSelected] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredTree, setFilteredTree] = useState([]);

  useEffect(() => {
    async function loadData() {
      const data = await fetchNavigationTree();
      setTreeData(data);
      setFilteredTree(data);
      expandTreeByRoute(data);
    }
    loadData();
  }, [albumId, schemeId]); // –í–∏–∫–ª–∏–∫–∞—Ç–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ URL

  // –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ URL
  const expandTreeByRoute = (data) => {
    const expandedNodes = new Set();
    let selectedNode = null;

    data.forEach((department) => {
      department.units.forEach((unit) => {
        unit.albums.forEach((album) => {
          if (albumId && album.id == albumId) {
            expandedNodes.add(`dep-${department.id}`);
            expandedNodes.add(`unit-${unit.id}`);
            expandedNodes.add(`album-${album.id}`);
            selectedNode = `album-${album.id}`;
          }
          album.schemes.forEach((scheme) => {
            if (schemeId && scheme.id == schemeId) {
              expandedNodes.add(`dep-${department.id}`);
              expandedNodes.add(`unit-${unit.id}`);
              expandedNodes.add(`album-${album.id}`);
              expandedNodes.add(`scheme-${scheme.id}`);
              selectedNode = `scheme-${scheme.id}`;
            }
          });
        });
      });
    });

    setExpanded([...expandedNodes]);
    setSelected(selectedNode);
  };

  // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤
  const handleNodeClick = (type, id, event) => {
    event.stopPropagation(); // –ó–∞–ø–æ–±—ñ–≥–∞—î –≤—ñ–¥–∫—Ä–∏—Ç—Ç—é –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø—Ä–∏ –∫–ª—ñ–∫—É
    const baseUrl = type === "album" ? `/album/${id}` : `/scheme/${id}`;
    const url = mode ? `${baseUrl}?mode=${mode}` : baseUrl;
    setSelected(`${type}-${id}`);
    router.push(url);
  };

  // –ü–æ—à—É–∫ + —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –¥–æ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  const searchTree = (items, searchKey) => {
    if (!searchKey) {
      setFilteredTree(treeData);
      setExpanded([]);
      setSelected(null);
      return;
    }

    const lowerSearchKey = searchKey.toLowerCase();
    const expandedNodes = new Set();
    const matchedNodes = new Set();

    const filterItems = (items) =>
      items
        .map((department) => {
          const filteredUnits = department.units
            .map((unit) => {
              const filteredAlbums = unit.albums
                .map((album) => {
                  const filteredSchemes = album.schemes.filter((scheme) => {
                    if (scheme.name.toLowerCase().includes(lowerSearchKey)) {
                      expandedNodes.add(`album-${album.id}`);
                      matchedNodes.add(`scheme-${scheme.id}`);
                      return true;
                    }
                    return false;
                  });

                  if (filteredSchemes.length > 0 || album.name.toLowerCase().includes(lowerSearchKey)) {
                    expandedNodes.add(`unit-${unit.id}`);
                    matchedNodes.add(`album-${album.id}`);
                    return { ...album, schemes: filteredSchemes };
                  }
                  return null;
                })
                .filter(Boolean);

              if (filteredAlbums.length > 0 || unit.name.toLowerCase().includes(lowerSearchKey)) {
                expandedNodes.add(`dep-${department.id}`);
                matchedNodes.add(`unit-${unit.id}`);
                return { ...unit, albums: filteredAlbums };
              }
              return null;
            })
            .filter(Boolean);

          if (filteredUnits.length > 0 || department.name.toLowerCase().includes(lowerSearchKey)) {
            matchedNodes.add(`dep-${department.id}`);
            return { ...department, units: filteredUnits };
          }
          return null;
        })
        .filter(Boolean);

    setFilteredTree(filterItems(treeData));
    setExpanded([...expandedNodes]);
    setSelected([...matchedNodes][0] || null);
  };

  // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –∑ –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
  const buildTree = () =>
    filteredTree.map((department) => (
      <TreeItem key={`dep-${department.id}`} nodeId={`dep-${department.id}`} label={department.name}>
        {department.units.map((unit) => (
          <TreeItem key={`unit-${unit.id}`} nodeId={`unit-${unit.id}`} label={unit.name}>
            <Typography sx={{ color: "gray", pl: 2 }}>–ê–ª—å–±–æ–º–∏:</Typography>
            {unit.albums.map((album) => (
              <TreeItem
                key={`album-${album.id}`}
                nodeId={`album-${album.id}`}
                label={album.name}
                onClick={(e) => handleNodeClick("album", album.id, e)}
                sx={{
                  fontWeight: selected === `album-${album.id}` ? "bold" : "normal",
                  bgcolor: selected === `album-${album.id}` ? "lightgray" : "inherit",
                }}
              >
                <Typography sx={{ color: "gray", pl: 2 }}>–°—Ö–µ–º–∏:</Typography>
                {album.schemes.map((scheme) => (
                  <TreeItem
                    key={`scheme-${scheme.id}`}
                    nodeId={`scheme-${scheme.id}`}
                    label={scheme.name}
                    onClick={(e) => handleNodeClick("scheme", scheme.id, e)}
                    sx={{
                      fontWeight: selected === `scheme-${scheme.id}` ? "bold" : "normal",
                      bgcolor: selected === `scheme-${scheme.id}` ? "lightgray" : "inherit",
                    }}
                  />
                ))}
              </TreeItem>
            ))}
          </TreeItem>
        ))}
      </TreeItem>
    ));

  return (
    <Paper sx={{ padding: 2 }}>
      <TextField
        label="–ü–æ—à—É–∫"
        variant="outlined"
        fullWidth
        value={searchTerm}
        onChange={(e) => {
          setSearchTerm(e.target.value);
          searchTree(treeData, e.target.value);
        }}
        sx={{ mb: 2 }}
      />

      <TreeView
        expanded={expanded}
        onNodeToggle={(event, nodeIds) => setExpanded(nodeIds)}
        defaultCollapseIcon={<ExpandMore />}
        defaultExpandIcon={<ChevronRight />}
      >
        {buildTree()}
      </TreeView>
    </Paper>
  );
}
```

### ‚ú® –©–æ –ø–æ–∫—Ä–∞—â–µ–Ω–æ:
1. **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –≤—É–∑–ª—ñ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É.**
2. **–ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤—ñ.**
3. **–î–æ–¥–∞–≤–∞–Ω—ñ –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ "–ê–ª—å–±–æ–º–∏:" —ñ "–°—Ö–µ–º–∏:".**
4. **–ü–æ—à—É–∫ —Ç–µ–ø–µ—Ä —Ä–æ–∑–≥–æ—Ä—Ç–∞—î –¥–µ—Ä–µ–≤–æ –¥–æ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ + –ø—ñ–¥—Å–≤—ñ—á—É—î —ó—Ö.**
5. **–ó–º—ñ–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –∫–Ω–æ–ø–∫–∏ `+`: –≤–æ–Ω–∞ —Ç–µ–ø–µ—Ä –ª–∏—à–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—î –≤–∫–ª–∞–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, –∞ –Ω–µ –ø–µ—Ä–µ–º—ñ—â—É—î –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É.**

–¶–µ —Ä–æ–±–∏—Ç—å –¥–µ—Ä–µ–≤–æ –±—ñ–ª—å—à —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º —ñ –∑—Ä—É—á–Ω–∏–º —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ! üöÄ