To show **rotate buttons** only when a specific element is selected (i.e., clicked), and avoid dynamically creating buttons for every element in the panel, you can manage this behavior using state. Here's how you can implement it:

---

### **Steps to Implement**

1. **Track the Selected Element:**
   - Use `useState` to store the ID of the currently selected element.

2. **Conditionally Show Rotate Buttons:**
   - Render the rotate buttons only when an element is selected.

3. **Attach the Rotation Logic:**
   - Use `handleRotate` to rotate the selected element based on button clicks.

---

### **Updated Code**

Here’s the refactored implementation:

```javascript
import React, { useState } from 'react';
import { Stage, Layer, Rect, Circle, Text } from 'react-konva';

const SchemeEditor = () => {
  const [elements, setElements] = useState([
    { id: '1', type: 'rect', x: 100, y: 100, width: 100, height: 50, fill: 'red', rotation: 0 },
    { id: '2', type: 'circle', x: 300, y: 200, radius: 50, fill: 'blue', rotation: 0 },
  ]);
  const [selectedId, setSelectedId] = useState(null); // Track selected element

  // Handle element selection
  const handleSelect = (id) => {
    setSelectedId(id);
  };

  // Handle element rotation
  const handleRotate = (angle) => {
    setElements((prevElements) =>
      prevElements.map((el) =>
        el.id === selectedId ? { ...el, rotation: (el.rotation + angle) % 360 } : el
      )
    );
  };

  return (
    <div style={{ display: 'flex' }}>
      {/* Canvas Area */}
      <div style={{ flex: 1, border: '1px solid black', position: 'relative' }}>
        <Stage width={800} height={600}>
          <Layer>
            {elements.map((el) => {
              if (el.type === 'rect') {
                return (
                  <Rect
                    key={el.id}
                    id={el.id}
                    x={el.x}
                    y={el.y}
                    width={el.width}
                    height={el.height}
                    fill={el.fill}
                    draggable
                    rotation={el.rotation}
                    onClick={() => handleSelect(el.id)} // Select element on click
                  />
                );
              } else if (el.type === 'circle') {
                return (
                  <Circle
                    key={el.id}
                    id={el.id}
                    x={el.x}
                    y={el.y}
                    radius={el.radius}
                    fill={el.fill}
                    draggable
                    rotation={el.rotation}
                    onClick={() => handleSelect(el.id)} // Select element on click
                  />
                );
              }
              return null;
            })}
          </Layer>
        </Stage>
      </div>

      {/* Rotation Controls */}
      <div
        style={{
          width: '200px',
          padding: '10px',
          backgroundColor: '#eee',
          borderLeft: '1px solid #ccc',
        }}
      >
        <h3>Rotate Element</h3>
        {selectedId ? (
          <div>
            <span>Element {selectedId}:</span>
            <button
              onClick={() => handleRotate(-15)}
              style={{ margin: '5px', padding: '5px 10px' }}
            >
              Rotate Left
            </button>
            <button
              onClick={() => handleRotate(15)}
              style={{ margin: '5px', padding: '5px 10px' }}
            >
              Rotate Right
            </button>
          </div>
        ) : (
          <p>Select an element to rotate</p>
        )}
      </div>
    </div>
  );
};

export default SchemeEditor;
```

---

### **Key Changes**

1. **Track Selected Element:**
   - The `selectedId` state tracks which element is currently selected.

   ```javascript
   const [selectedId, setSelectedId] = useState(null);
   ```

   - Clicking on an element sets its ID as the `selectedId`:

   ```javascript
   onClick={() => handleSelect(el.id)}
   ```

2. **Show Rotate Buttons Conditionally:**
   - Rotate buttons are rendered only when an element is selected:

   ```javascript
   {selectedId ? (
     <div>
       <span>Element {selectedId}:</span>
       <button onClick={() => handleRotate(-15)}>Rotate Left</button>
       <button onClick={() => handleRotate(15)}>Rotate Right</button>
     </div>
   ) : (
     <p>Select an element to rotate</p>
   )}
   ```

3. **Update Element Rotation:**
   - The `handleRotate` function updates the `rotation` of the currently selected element.

   ```javascript
   const handleRotate = (angle) => {
     setElements((prevElements) =>
       prevElements.map((el) =>
         el.id === selectedId ? { ...el, rotation: (el.rotation + angle) % 360 } : el
       )
     );
   };
   ```

---

### **Behavior**

1. **Click to Select:**
   - Click on a rectangle or circle to select it.
   - The ID of the selected element is displayed in the rotation panel.

2. **Rotate Buttons:**
   - The buttons for "Rotate Left" and "Rotate Right" appear only when an element is selected.

3. **Rotation Updates:**
   - Clicking the buttons rotates the selected element by 15 degrees in the respective direction.

4. **Deselect:**
   - Clicking outside the shapes clears the selection and hides the rotation buttons.

---

### **Enhancements**

1. **Deselect on Background Click:**
   - Add an `onClick` handler to the stage to clear the selection when clicking outside elements.

   ```javascript
   const handleDeselect = (e) => {
     if (e.target === e.target.getStage()) {
       setSelectedId(null);
     }
   };
   ```

   Attach it to the `Stage`:
   ```javascript
   <Stage width={800} height={600} onClick={handleDeselect}>
   ```

2. **Visual Feedback:**
   - Highlight the selected element with a border or shadow:

   ```javascript
   stroke={selectedId === el.id ? 'blue' : null}
   strokeWidth={selectedId === el.id ? 2 : 0}
   ```

3. **Keyboard Shortcuts:**
   - Add keyboard shortcuts (`←`, `→`) for rotation when an element is selected.

   ```javascript
   useEffect(() => {
     const handleKeyDown = (e) => {
       if (!selectedId) return;
       if (e.key === 'ArrowLeft') handleRotate(-15);
       if (e.key === 'ArrowRight') handleRotate(15);
     };

     window.addEventListener('keydown', handleKeyDown);
     return () => window.removeEventListener('keydown', handleKeyDown);
   }, [selectedId]);
   ```

---

This implementation ensures that the rotation controls are simple, intuitive, and context-sensitive. Let me know if you need further customization! 😊