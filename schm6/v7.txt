Here’s the updated code for your **scheme creation page** with the new features:

1. **Album Selection:**
   - Added a select input for choosing an album (`albumId`).
   - If an album is selected, a button appears to view all schemes in the album in a modal popup.

2. **Department Validation:**
   - The department field is required, and validation is performed on clicking the **Save** button.

3. **Dynamic Save Path:**
   - If an album is selected, the scheme is saved to the album's folder; otherwise, it's saved to the root folder.

---

### **Updated Code**

```javascript
'use client';
import React, { useRef, useState, useEffect } from 'react';
import { Stage, Layer } from 'react-konva';
import ToolPanel from '../interface/ToolPanel';
import { v4 as uuidv4 } from 'uuid';
import TopNavBar from '../interface/headerLine/TopHeaderLine';
import GraphLibrary from '../../components/graph';
import {
  Button,
  Select,
  MenuItem,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  List,
  ListItem,
  ListItemText,
  Typography,
} from '@mui/material';

// Page formats in mm (converted to pixels at 72 DPI)
const pageFormats = {
  A4: { width: 1123, height: 794 },
  A3: { width: 1587, height: 1123 },
  A2: { width: 2245, height: 1587 },
  A1: { width: 3179, height: 2245 },
  A0: { width: 4494, height: 3179 },
};

const Creator = () => {
  const stageRef = useRef(null); // Reference to the stage
  const [elements, setElements] = useState([]); // React state for rendering elements
  const [selectedElId, setSelectedElId] = useState(null); // Currently selected element
  const [selectedFormat, setSelectedFormat] = useState('A4'); // Default format
  const [canvasSize, setCanvasSize] = useState(pageFormats[selectedFormat]);
  const [schemeName, setSchemeName] = useState(''); // Controlled input for scheme_name
  const [schemeDepartment, setSchemeDepartment] = useState(''); // Controlled select for scheme_department
  const [selectedAlbum, setSelectedAlbum] = useState(''); // Selected album
  const [albums, setAlbums] = useState([]); // List of available albums
  const [isModalOpen, setModalOpen] = useState(false); // Modal visibility
  const [modalSchemes, setModalSchemes] = useState([]); // Schemes in the selected album

  const departmentOptions = ['ТЦ', 'РЦ']; // List of departments

  useEffect(() => {
    // Fetch albums
    const fetchAlbums = async () => {
      try {
        const response = await fetch('/api/albums'); // Endpoint to get albums
        const data = await response.json();
        setAlbums(data.albums);
      } catch (error) {
        console.error('Error fetching albums:', error);
      }
    };

    fetchAlbums();
  }, []);

  useEffect(() => {
    setCanvasSize(pageFormats[selectedFormat]);
  }, [selectedFormat]);

  const handleFormatChange = (format) => {
    setSelectedFormat(format);
  };

  const handleSelectElement = (id) => {
    setSelectedElId(id);
  };

  const deleteElement = () => {
    if (selectedElId === null) {
      alert('No element selected to delete.');
      return;
    }
    const updatedElements = elements.filter((el) => el.id !== selectedElId);
    setElements(updatedElements);
    setSelectedElId(null);
  };

  const addElement = (type) => {
    const newElement = {
      id: uuidv4(),
      type,
      x: Math.random() * 300,
      y: Math.random() * 300,
      width: 100,
      height: 100,
      radius: 50,
      text: 'Text',
      points: [0, 0, 100, 100],
      fill: 'gray',
      draggable: true,
      rotation: 0,
    };
    setElements((prevElements) => [...prevElements, newElement]);
  };

  const handleDragEnd = (id, e) => {
    setElements((prevElements) =>
      prevElements.map((el) =>
        el.id === id ? { ...el, x: e.target.x(), y: e.target.y() } : el
      )
    );
  };

  const saveStateToServer = async () => {
    if (!schemeDepartment) {
      alert('Please select a department.');
      return;
    }

    try {
      const schmId = uuidv4();
      const schemeDataToSave = {
        scheme_id: schmId,
        scheme_name: schemeName || `Схема_${schmId}`,
        department: schemeDepartment,
        scheme_format: selectedFormat,
        scheme_data: elements,
        album_id: selectedAlbum || null,
      };

      const endpoint = selectedAlbum
        ? `/api/savescheme?album=${selectedAlbum}`
        : '/api/savescheme';

      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(schemeDataToSave),
      });

      const result = await response.json();
      alert(result.message);
    } catch (error) {
      alert('Error saving scheme.');
      console.error(error);
    }
  };

  const handleViewAlbum = async () => {
    try {
      const response = await fetch(`/api/albums/${selectedAlbum}`);
      const data = await response.json();
      setModalSchemes(data.schemes);
      setModalOpen(true);
    } catch (error) {
      console.error('Error fetching album schemes:', error);
    }
  };

  return (
    <div style={{ paddingTop: '60px' }}>
      <TopNavBar />
      <div style={{ padding: '20px' }}>
        <Typography variant="h5">Create New Scheme</Typography>

        <TextField
          label="Scheme Name"
          value={schemeName}
          onChange={(e) => setSchemeName(e.target.value)}
          fullWidth
          margin="normal"
        />

        <Select
          value={schemeDepartment}
          onChange={(e) => setSchemeDepartment(e.target.value)}
          displayEmpty
          fullWidth
          style={{ marginBottom: '20px' }}
        >
          <MenuItem value="">Select Department (Required)</MenuItem>
          {departmentOptions.map((dep) => (
            <MenuItem key={dep} value={dep}>
              {dep}
            </MenuItem>
          ))}
        </Select>

        <Select
          value={selectedAlbum}
          onChange={(e) => setSelectedAlbum(e.target.value)}
          displayEmpty
          fullWidth
          style={{ marginBottom: '20px' }}
        >
          <MenuItem value="">Select Album (Optional)</MenuItem>
          {albums.map((album) => (
            <MenuItem key={album.album_id} value={album.album_id}>
              {album.album_name}
            </MenuItem>
          ))}
        </Select>

        {selectedAlbum && (
          <Button
            variant="outlined"
            onClick={handleViewAlbum}
            style={{ marginBottom: '20px' }}
          >
            View Album Schemes
          </Button>
        )}

        <Button variant="contained" color="primary" onClick={saveStateToServer}>
          Save
        </Button>
      </div>

      <ToolPanel addElement={addElement} />
      <div style={{ flex: 1, margin: '20px auto', background: '#F0F0F0' }}>
        <Stage
          width={canvasSize.width}
          height={canvasSize.height}
          style={{ border: '2px solid black', background: '#fff' }}
          ref={stageRef}
        >
          <Layer>
            {elements.map((el) => {
              const ElementComponent = GraphLibrary[el.type];
              if (!ElementComponent) return null;
              return (
                <ElementComponent
                  key={el.id}
                  el={el}
                  onDragEnd={(e) => handleDragEnd(el.id, e)}
                  onClickEl={() => handleSelectElement(el.id)}
                />
              );
            })}
          </Layer>
        </Stage>
      </div>

      {/* Modal for viewing album schemes */}
      <Dialog open={isModalOpen} onClose={() => setModalOpen(false)} fullWidth>
        <DialogTitle>Album Schemes</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Schemes in the album:
          </DialogContentText>
          <List>
            {modalSchemes.map((scheme) => (
              <ListItem key={scheme.scheme_id}>
                <ListItemText primary={scheme.scheme_name} />
              </ListItem>
            ))}
          </List>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setModalOpen(false)} color="primary">
            Close
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default Creator;
```

---

### **Key Features**

1. **Album Selection:**
   - Dropdown for selecting an album.
   - "View Album Schemes" button opens a modal popup to display all schemes in the selected album.

2. **Validation:**
   - Department selection is required. Validation prevents saving without selecting a department.

3. **Dynamic Save Path:**
   - If an album is selected, the scheme is saved to the album folder. Otherwise, it's saved to the root folder.

4. **Material-UI Components:**
   - Clean and modern UI using Material-UI for dropdowns, buttons, and modal dialogs.