–¢–∞–∫, —É **Next.js** —ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º **React** —ñ **Konva** –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫—ñ–ª—å–∫–æ—Ö —Å—Ö–µ–º –≤ —Ç–∞–±–∞—Ö –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ **Editor**. –¶–µ –¥—É–∂–µ –∑—Ä—É—á–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –¥–µ–∫—ñ–ª—å–∫–æ–º–∞ —Å—Ö–µ–º–∞–º–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.

### üìå **–ó–∞–≥–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ä–æ–±–æ—Ç–∏**
1. **–¢–∞–±–∏** –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö —Å—Ö–µ–º.  
2. **–î–∏–Ω–∞–º—ñ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö** –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ö–µ–º–∏.  
3. **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è** –∫–æ–∂–Ω–æ—ó —Å—Ö–µ–º–∏ –æ–∫—Ä–µ–º–æ –≤ —Ç–∞–±–∞—Ö.  
4. –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å **–∑–∞–∫—Ä–∏–≤–∞—Ç–∏** —Ç–∞–±–∏.

---

## 1Ô∏è‚É£ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤**

```
components/
‚îú‚îÄ‚îÄ Editor/
‚îÇ   ‚îú‚îÄ‚îÄ EditorTabs.js        // –¢–∞–±-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ö–µ–º
‚îÇ   ‚îî‚îÄ‚îÄ EditorTabContent.js  // –í–º—ñ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—Ö–µ–º–∏
```

---

## 2Ô∏è‚É£ **EditorTabs.js** (–¢–∞–±–∏ –¥–ª—è —Å—Ö–µ–º)

```javascript
import React, { useState } from 'react';
import { Tabs, Tab, Box, IconButton } from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import EditorTabContent from './EditorTabContent';

const EditorTabs = () => {
  const [openTabs, setOpenTabs] = useState([]);
  const [activeTab, setActiveTab] = useState(0);

  // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Å—Ö–µ–º—É –≤ —Ç–∞–±
  const handleAddTab = (scheme) => {
    const exists = openTabs.find((tab) => tab.scheme_id === scheme.scheme_id);
    if (!exists) {
      setOpenTabs([...openTabs, scheme]);
      setActiveTab(openTabs.length); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –Ω–æ–≤–∏–π —Ç–∞–±
    } else {
      setActiveTab(openTabs.indexOf(exists)); // –Ø–∫—â–æ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞, –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ—Å—å
    }
  };

  // –ó–∞–∫—Ä–∏—Ç–∏ —Ç–∞–±
  const handleCloseTab = (index) => {
    const newTabs = openTabs.filter((_, i) => i !== index);
    setOpenTabs(newTabs);
    if (index === activeTab) setActiveTab(0);
  };

  return (
    <Box sx={{ width: '100%' }}>
      <Tabs value={activeTab} onChange={(_, newValue) => setActiveTab(newValue)}>
        {openTabs.map((tab, index) => (
          <Tab
            key={tab.scheme_id}
            label={
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                {tab.scheme_name}
                <IconButton size="small" onClick={() => handleCloseTab(index)}>
                  <CloseIcon fontSize="small" />
                </IconButton>
              </Box>
            }
          />
        ))}
      </Tabs>

      {openTabs.map((tab, index) => (
        <Box key={tab.scheme_id} hidden={activeTab !== index} sx={{ p: 2 }}>
          <EditorTabContent schemeId={tab.scheme_id} />
        </Box>
      ))}
    </Box>
  );
};

export default EditorTabs;
```

---

## 3Ô∏è‚É£ **EditorTabContent.js** (–í–º—ñ—Å—Ç —Ç–∞–±–∞)

```javascript
import React, { useEffect, useState, useRef } from 'react';
import { Stage, Layer } from 'react-konva';
import { CircularProgress, Box, Typography } from '@mui/material';

const EditorTabContent = ({ schemeId }) => {
  const [loading, setLoading] = useState(true);
  const [schemeData, setSchemeData] = useState(null);
  const stageRef = useRef();

  useEffect(() => {
    const fetchScheme = async () => {
      try {
        const response = await fetch(`/api/scheme/${schemeId}`);
        const data = await response.json();
        setSchemeData(data);
      } catch (error) {
        console.error('Error fetching scheme:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchScheme();
  }, [schemeId]);

  if (loading) {
    return <CircularProgress />;
  }

  if (!schemeData) {
    return <Typography>–°—Ö–µ–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</Typography>;
  }

  return (
    <Stage
      width={window.innerWidth - 250}
      height={window.innerHeight - 100}
      ref={stageRef}
      style={{ backgroundColor: '#f0f0f0', border: '1px solid black' }}
    >
      <Layer>
        {schemeData.scheme_data.map((el) => {
          switch (el.type) {
            case 'rect':
              return (
                <Rect
                  key={el.id}
                  x={el.x}
                  y={el.y}
                  width={el.width}
                  height={el.height}
                  fill={el.fill}
                  draggable
                />
              );
            case 'circle':
              return (
                <Circle
                  key={el.id}
                  x={el.x}
                  y={el.y}
                  radius={el.radius}
                  fill={el.fill}
                  draggable
                />
              );
            default:
              return null;
          }
        })}
      </Layer>
    </Stage>
  );
};

export default EditorTabContent;
```

---

## 4Ô∏è‚É£ **API –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ö–µ–º–∏** (`/api/scheme/[id].js`)

```javascript
import oracledb from 'oracledb';
import dbConfig from '../../../config/dbConfig';

export default async function handler(req, res) {
  const { id } = req.query;

  try {
    const connection = await oracledb.getConnection(dbConfig);
    const result = await connection.execute(
      `SELECT * FROM scheme WHERE scheme_id = :id`,
      [id],
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ message: '–°—Ö–µ–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.status(200).json(result.rows[0]);
  } catch (error) {
    console.error('DB Error:', error);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}
```

---

## 5Ô∏è‚É£ **Editor.js** (–û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞)

```javascript
import React from 'react';
import EditorTabs from '../../components/Editor/EditorTabs';
import TopNavBar from '../../components/interface/headerLine/TopHeaderLine';

const Editor = () => {
  return (
    <div>
      <TopNavBar />
      <EditorTabs />
    </div>
  );
};

export default Editor;
```

---

## ‚úÖ **–ü–æ—è—Å–Ω–µ–Ω–Ω—è**

1. **–¢–∞–±–∏** –¥–∏–Ω–∞–º—ñ—á–Ω–æ –¥–æ–¥–∞—é—Ç—å—Å—è –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —Å—Ö–µ–º.  
2. **EditorTabContent** –ø—ñ–¥—Ç—è–≥—É—î –¥–∞–Ω—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—Ö–µ–º–∏ —á–µ—Ä–µ–∑ API.  
3. **Konva** –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ö–µ–º–∏.  
4. **–ó–∞–∫—Ä–∏—Ç—Ç—è —Ç–∞–±—ñ–≤** –≤–∏–¥–∞–ª—è—î —Å—Ö–µ–º—É –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É, –∞–ª–µ –Ω–µ –∑ –ë–î.  
5. –î–∞–Ω—ñ –ø—ñ–¥—Ç—è–≥—É—é—Ç—å—Å—è **–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ** –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏.

---

‚ùì –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –∞–±–æ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ —â–µ —â–æ—Å—å ‚Äî —Å–∫–∞–∂–∏, —ñ —è –¥–æ–ø–æ–º–æ–∂—É!