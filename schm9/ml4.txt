–î–æ–¥–∞–º–æ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–∞–±–ª–∏—Ü–µ—é:  
1. **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤**  
2. **–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤**  
3. **–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –±–ª–æ–∫—É –ø—Ä–∏–º—ñ—Ç–∫–∏** (–Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ—é)

---

### ‚úÖ **–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ñ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è**

```javascript
import React, { useState, useEffect } from 'react';
import {
  Box,
  Button,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Tooltip
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import AddIcon from '@mui/icons-material/Add';

const AddTableModal = ({ open, onClose, onAddRow, editableRow }) => {
  const [row, setRow] = useState({
    position: '',
    designation: '',
    name: '',
    quantity: '',
    note: ''
  });

  // –Ø–∫—â–æ —Ä–µ–¥–∞–≥—É—î–º–æ —Ä—è–¥–æ–∫ - –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ
  useEffect(() => {
    if (editableRow) {
      setRow(editableRow);
    } else {
      setRow({ position: '', designation: '', name: '', quantity: '', note: '' });
    }
  }, [editableRow]);

  const handleChange = (field) => (e) => {
    setRow({ ...row, [field]: e.target.value });
  };

  const handleSubmit = () => {
    onAddRow(row);
    onClose();
  };

  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>{editableRow ? '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ä—è–¥–æ–∫' : '–î–æ–¥–∞—Ç–∏ —Ä—è–¥–æ–∫ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ'}</DialogTitle>
      <DialogContent>
        <TextField label="–ü–æ–∑–∏—Ü—ñ—è" fullWidth margin="dense" value={row.position} onChange={handleChange('position')} />
        <TextField label="–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è" fullWidth margin="dense" value={row.designation} onChange={handleChange('designation')} />
        <TextField label="–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è" fullWidth margin="dense" value={row.name} onChange={handleChange('name')} />
        <TextField label="–ö—ñ–ª—å–∫—ñ—Å—Ç—å" fullWidth margin="dense" value={row.quantity} onChange={handleChange('quantity')} />
        <TextField label="–ü—Ä–∏–º—ñ—Ç–∫–∞" fullWidth margin="dense" value={row.note} onChange={handleChange('note')} />
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>–°–∫–∞—Å—É–≤–∞—Ç–∏</Button>
        <Button onClick={handleSubmit} variant="contained" color="primary">
          {editableRow ? '–û–Ω–æ–≤–∏—Ç–∏' : '–î–æ–¥–∞—Ç–∏'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

const SchemeTable = ({ onNotePositionUpdate }) => {
  const [rows, setRows] = useState([]);                // –î–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
  const [openModal, setOpenModal] = useState(false);   // –°—Ç–∞–Ω –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  const [editableRow, setEditableRow] = useState(null); // –†—è–¥–æ–∫ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞
  const handleAddRow = (newRow) => {
    if (editableRow) {
      setRows((prev) =>
        prev.map((row) => (row === editableRow ? newRow : row))
      );
      setEditableRow(null);
    } else {
      setRows([...rows, newRow]);
    }
  };

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞
  const handleDeleteRow = (index) => {
    setRows((prev) => prev.filter((_, i) => i !== index));
  };

  // –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
  const handleOpenModal = () => {
    setEditableRow(null);
    setOpenModal(true);
  };

  // –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
  const handleEditRow = (row) => {
    setEditableRow(row);
    setOpenModal(true);
  };

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–∏–º—ñ—Ç–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
  useEffect(() => {
    if (onNotePositionUpdate) {
      onNotePositionUpdate(rows.length);
    }
  }, [rows, onNotePositionUpdate]);

  return (
    <Box sx={{ position: 'absolute', bottom: 10, right: 10 }}>
      <Button
        variant="contained"
        startIcon={<AddIcon />}
        onClick={handleOpenModal}
      >
        –î–æ–¥–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é
      </Button>

      {/* –¢–∞–±–ª–∏—Ü—è */}
      {rows.length > 0 && (
        <TableContainer component={Paper} sx={{ marginTop: 2 }}>
          <Table size="small">
            <TableHead>
              <TableRow>
                <TableCell>–ü–æ–∑–∏—Ü—ñ—è</TableCell>
                <TableCell>–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è</TableCell>
                <TableCell>–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è</TableCell>
                <TableCell>–ö—ñ–ª—å–∫—ñ—Å—Ç—å</TableCell>
                <TableCell>–ü—Ä–∏–º—ñ—Ç–∫–∞</TableCell>
                <TableCell align="center">–î—ñ—ó</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {rows.map((row, index) => (
                <TableRow key={index}>
                  <TableCell>{row.position}</TableCell>
                  <TableCell>{row.designation}</TableCell>
                  <TableCell>{row.name}</TableCell>
                  <TableCell>{row.quantity}</TableCell>
                  <TableCell>{row.note}</TableCell>
                  <TableCell align="center">
                    <Tooltip title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏">
                      <IconButton onClick={() => handleEditRow(row)}>
                        <EditIcon />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="–í–∏–¥–∞–ª–∏—Ç–∏">
                      <IconButton onClick={() => handleDeleteRow(index)}>
                        <DeleteIcon />
                      </IconButton>
                    </Tooltip>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ */}
      <AddTableModal
        open={openModal}
        onClose={() => setOpenModal(false)}
        onAddRow={handleAddRow}
        editableRow={editableRow}
      />
    </Box>
  );
};

export default SchemeTable;
```

---

### üìù **–©–æ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ:**

1. **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤**  
   - –ö–Ω–æ–ø–∫–∞ –∑ —ñ–∫–æ–Ω–∫–æ—é ‚úèÔ∏è (`EditIcon`) –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞.  
   - –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —ñ–∑ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏.

2. **–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤**  
   - –ö–Ω–æ–ø–∫–∞ –∑ —ñ–∫–æ–Ω–∫–æ—é üóëÔ∏è (`DeleteIcon`) –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞.

3. **–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–∏–º—ñ—Ç–∫–∏**  
   - –î–æ–¥–∞–Ω–æ **`onNotePositionUpdate`**, —è–∫–∞ –æ–Ω–æ–≤–ª—é—î –ø–æ–∑–∏—Ü—ñ—é –ø—Ä–∏–º—ñ—Ç–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ.

4. **–ö–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é"**  
   - –¢–∞–±–ª–∏—Ü—è –∑'—è–≤–ª—è—î—Ç—å—Å—è –ª–∏—à–µ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö.

---

### ‚úÖ **–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ Editor**

```javascript
import SchemeTable from '../interface/SchemeTable';
import NotesBlock from '../interface/NotesBlock';

const EditorPage = () => {
  const [noteOffset, setNoteOffset] = useState(0);

  return (
    <div style={{ position: 'relative', height: '100vh' }}>
      <SchemeTable onNotePositionUpdate={(count) => setNoteOffset(count * 30)} />
      <NotesBlock noteOffset={noteOffset} />
    </div>
  );
};

export default EditorPage;
```

---

üí° **–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è:**  
- –î–æ–¥–∞—Ç–∏ API-–∑–∞–ø–∏—Ç–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –≤ –ë–î.  
- –î–æ–¥–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ.

–ì–æ—Ç–æ–≤–∏–π —Ä–æ–∑—à–∏—Ä—é–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª! üòâ