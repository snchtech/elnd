–©–æ–± –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ **–≤—ñ–¥–¥—ñ–ª—ñ–≤** —Ç–∞ **–ø—É–Ω–∫—Ç—ñ–≤** —É –≤–∏–ø–∞–¥–∞—é—á—ñ —Å–ø–∏—Å–∫–∏ (**`Select`**) –≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ–π –∫–∞—Ä—Ç—Ü—ñ —Å—Ö–µ–º–∏, –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ API –Ω–∞ **Node.js + Express** –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö Oracle —ñ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ü–µ–π API —É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—ñ (React/Next.js).

---

### üì¶ **1. API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª—ñ–≤ —ñ –ø—É–Ω–∫—Ç—ñ–≤**

**üîπ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:**

```
/backend
  ‚îú‚îÄ‚îÄ /routes
  ‚îÇ     ‚îú‚îÄ‚îÄ departments.js
  ‚îÇ     ‚îî‚îÄ‚îÄ units.js
  ‚îú‚îÄ‚îÄ /controllers
  ‚îÇ     ‚îú‚îÄ‚îÄ departmentController.js
  ‚îÇ     ‚îî‚îÄ‚îÄ unitController.js
  ‚îú‚îÄ‚îÄ /db
  ‚îÇ     ‚îî‚îÄ‚îÄ oracle.js
  ‚îî‚îÄ‚îÄ server.js
```

---

### üöÄ **Node.js (Express) API –¥–ª—è –≤—ñ–¥–¥—ñ–ª—ñ–≤ —Ç–∞ –ø—É–Ω–∫—Ç—ñ–≤**

#### üîπ **1. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Oracle (db/oracle.js)**

```javascript
const oracledb = require('oracledb');

oracledb.outFormat = oracledb.OUT_FORMAT_OBJECT;

const dbConfig = {
  user: 'your_db_user',
  password: 'your_db_password',
  connectString: 'localhost/XEPDB1', // –∞–±–æ —Å–≤—ñ–π connection string
};

async function initialize() {
  try {
    await oracledb.createPool(dbConfig);
    console.log('‚úÖ Oracle DB Connected');
  } catch (err) {
    console.error('‚ùå Error connecting to Oracle DB:', err);
  }
}

async function close() {
  try {
    await oracledb.getPool().close(0);
    console.log('üîå Oracle DB Disconnected');
  } catch (err) {
    console.error('‚ùå Error closing Oracle DB connection:', err);
  }
}

async function executeQuery(sql, binds = []) {
  let connection;
  try {
    connection = await oracledb.getConnection();
    const result = await connection.execute(sql, binds);
    return result.rows;
  } catch (err) {
    console.error('‚ùå Query Error:', err);
    throw err;
  } finally {
    if (connection) {
      try {
        await connection.close();
      } catch (err) {
        console.error('‚ùå Error closing connection:', err);
      }
    }
  }
}

module.exports = { initialize, close, executeQuery };
```

---

#### üîπ **2. –†–æ—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª—ñ–≤ (routes/departments.js)**

```javascript
const express = require('express');
const router = express.Router();
const { getDepartments } = require('../controllers/departmentController');

router.get('/departments', getDepartments);

module.exports = router;
```

#### üîπ **3. –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è –≤—ñ–¥–¥—ñ–ª—ñ–≤ (controllers/departmentController.js)**

```javascript
const { executeQuery } = require('../db/oracle');

async function getDepartments(req, res) {
  try {
    const sql = `SELECT id, short_name, name FROM department`;
    const departments = await executeQuery(sql);
    res.status(200).json(departments);
  } catch (error) {
    res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–¥—ñ–ª—ñ–≤' });
  }
}

module.exports = { getDepartments };
```

---

#### üîπ **4. –†–æ—É—Ç —ñ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è –ø—É–Ω–∫—Ç—ñ–≤**

**`routes/units.js`**

```javascript
const express = require('express');
const router = express.Router();
const { getUnits } = require('../controllers/unitController');

router.get('/units', getUnits);

module.exports = router;
```

**`controllers/unitController.js`**

```javascript
const { executeQuery } = require('../db/oracle');

async function getUnits(req, res) {
  try {
    const sql = `SELECT id, name FROM unit`;
    const units = await executeQuery(sql);
    res.status(200).json(units);
  } catch (error) {
    res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç—ñ–≤' });
  }
}

module.exports = { getUnits };
```

---

#### üîπ **5. –°–µ—Ä–≤–µ—Ä (server.js)**

```javascript
const express = require('express');
const cors = require('cors');
const { initialize, close } = require('./db/oracle');
const departmentRoutes = require('./routes/departments');
const unitRoutes = require('./routes/units');

const app = express();
const PORT = 5000;

app.use(cors());
app.use(express.json());

// API Routes
app.use('/api', departmentRoutes);
app.use('/api', unitRoutes);

initialize().then(() => {
  app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));
});

process.on('SIGINT', async () => {
  await close();
  process.exit(0);
});
```

---

### üì¶ **2. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è API –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—ñ**

#### üîπ **–û–Ω–æ–≤–ª–µ–Ω–Ω—è SchemeInfoCard.js**

```javascript
import React, { useState, useEffect } from 'react';
import { Box, TextField, Select, MenuItem, Typography, InputLabel, FormControl } from '@mui/material';

const SchemeInfoCard = ({
  album, setAlbum,
  sheetNumber, setSheetNumber,
  schemeName, setSchemeName,
  department, setDepartment,
  point, setPoint,
  format, setFormat
}) => {
  const [departments, setDepartments] = useState([]);
  const [units, setUnits] = useState([]);
  const formats = ['A4', 'A3', 'A2', 'A1', 'A0'];

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª—ñ–≤
  useEffect(() => {
    const fetchDepartments = async () => {
      try {
        const res = await fetch('http://localhost:5000/api/departments');
        const data = await res.json();
        setDepartments(data);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª—ñ–≤:', error);
      }
    };

    const fetchUnits = async () => {
      try {
        const res = await fetch('http://localhost:5000/api/units');
        const data = await res.json();
        setUnits(data);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—ñ–≤:', error);
      }
    };

    fetchDepartments();
    fetchUnits();
  }, []);

  return (
    <Box>
      {/* –í—ñ–¥–¥—ñ–ª */}
      <FormControl fullWidth sx={{ mb: 2 }}>
        <InputLabel>–í—ñ–¥–¥—ñ–ª</InputLabel>
        <Select value={department} onChange={(e) => setDepartment(e.target.value)}>
          {departments.map((dep) => (
            <MenuItem key={dep.ID} value={dep.ID}>
              {dep.NAME}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      {/* –ü—É–Ω–∫—Ç */}
      <FormControl fullWidth sx={{ mb: 2 }}>
        <InputLabel>–ü—É–Ω–∫—Ç</InputLabel>
        <Select value={point} onChange={(e) => setPoint(e.target.value)}>
          {units.map((unit) => (
            <MenuItem key={unit.ID} value={unit.ID}>
              {unit.NAME}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      {/* –ù–∞–∑–≤–∞ —Å—Ö–µ–º–∏ */}
      <TextField
        fullWidth
        label="–ù–∞–∑–≤–∞ —Å—Ö–µ–º–∏"
        value={schemeName}
        onChange={(e) => setSchemeName(e.target.value)}
        sx={{ mb: 2 }}
      />

      {/* –§–æ—Ä–º–∞—Ç */}
      <FormControl fullWidth sx={{ mb: 2 }}>
        <InputLabel>–§–æ—Ä–º–∞—Ç</InputLabel>
        <Select value={format} onChange={(e) => setFormat(e.target.value)}>
          {formats.map((fmt) => (
            <MenuItem key={fmt} value={fmt}>{fmt}</MenuItem>
          ))}
        </Select>
      </FormControl>

      <Typography variant="body2">–ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {new Date().toLocaleString()}</Typography>
    </Box>
  );
};

export default SchemeInfoCard;
```

---

### ‚úÖ **–©–æ –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏:**

1. **API** –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª—ñ–≤ —Ç–∞ –ø—É–Ω–∫—Ç—ñ–≤ –∑ Oracle.  
2. **–§—Ä–æ–Ω—Ç–µ–Ω–¥** —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —É `Select`.  
3. **–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è** –≥–Ω—É—á–∫–æ—Å—Ç—ñ –¥–æ–¥–∞—Ç–∫—É –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é.

üåü –¢–µ–ø–µ—Ä –≤—ñ–¥–¥—ñ–ª–∏ —Ç–∞ –ø—É–Ω–∫—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–æ –ø—ñ–¥—Ç—è–≥—É—é—Ç—å—Å—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!