To create a working **Next.js API route** that reads a folder of JSON files and returns all schemes as an endpoint, you need to ensure the following:

1. **Use Node.js file system module (`fs`) to read the directory and files.**
2. **Ensure the API route reads and processes the files dynamically whenever the endpoint is called.**
3. **Properly handle asynchronous file operations.**

---

### **Steps to Implement the API Route**

1. **Ensure the folder `scheme_src` exists and contains valid JSON files.**
   - Each JSON file should have a structure similar to:
     ```json
     {
       "scheme_id": "1",
       "scheme_name": "Sample Scheme",
       "scheme_department": "Engineering",
       "scheme_data": { "elements": [] }
     }
     ```

2. **Create an API Route:**
   - Use the **Next.js API route** to read the folder dynamically.
   - Ensure you handle errors like missing files or invalid JSON formats.

---

### **Code Example**

#### **Directory Structure**
```plaintext
my_app/
â”œâ”€â”€ pages/
â”‚   â”œâ”€â”€ api/
â”‚   â”‚   â”œâ”€â”€ schemes.js    # API route to fetch schemes
â”œâ”€â”€ scheme_src/            # Folder containing JSON files
â”‚   â”œâ”€â”€ scheme1.json
â”‚   â”œâ”€â”€ scheme2.json
```

#### **`pages/api/schemes.js`**

```javascript
import fs from 'fs';
import path from 'path';

export default async function handler(req, res) {
  try {
    // Define the folder path
    const folderPath = path.join(process.cwd(), 'scheme_src');

    // Read all files in the folder
    const files = fs.readdirSync(folderPath);

    // Read and parse each file
    const schemes = files
      .filter((file) => file.endsWith('.json')) // Ensure only JSON files are read
      .map((file) => {
        const filePath = path.join(folderPath, file);
        const fileContent = fs.readFileSync(filePath, 'utf-8'); // Read file content
        return JSON.parse(fileContent); // Parse JSON
      });

    // Send response
    res.status(200).json({ success: true, data: schemes });
  } catch (error) {
    console.error('Error reading schemes:', error);
    res.status(500).json({ success: false, error: 'Failed to load schemes.' });
  }
}
```

---

### **How It Works**

1. **Read Directory:**
   - The `fs.readdirSync` function lists all files in the `scheme_src` folder.

2. **Filter and Read JSON Files:**
   - Only files ending with `.json` are read using `fs.readFileSync`.

3. **Parse JSON Content:**
   - Each fileâ€™s content is parsed using `JSON.parse`.

4. **Send the Response:**
   - The parsed data is sent as a JSON response to the client.

---

### **Accessing the Endpoint**

Start your Next.js app with `npm run dev`, and access the API route at:
```
http://localhost:3000/api/schemes
```

The response will look like this:

#### **Sample Response**
```json
{
  "success": true,
  "data": [
    {
      "scheme_id": "1",
      "scheme_name": "Sample Scheme 1",
      "scheme_department": "Engineering",
      "scheme_data": { "elements": [] }
    },
    {
      "scheme_id": "2",
      "scheme_name": "Sample Scheme 2",
      "scheme_department": "Marketing",
      "scheme_data": { "elements": [] }
    }
  ]
}
```

---

### **Key Points to Handle Errors**

1. **Check for Missing or Invalid JSON Files:**
   - If a file cannot be parsed, wrap `JSON.parse` in a `try-catch` block.

2. **Ensure the Folder Exists:**
   - Add a check to confirm `scheme_src` exists before reading files:
     ```javascript
     if (!fs.existsSync(folderPath)) {
       res.status(404).json({ success: false, error: 'Folder not found.' });
       return;
     }
     ```

3. **Handle Asynchronous Behavior:**
   - Use `fs.promises` for asynchronous file operations if needed:
     ```javascript
     const files = await fs.promises.readdir(folderPath);
     ```

---

### **Real-Time Reading vs Preloading**
- **Dynamic Reading:** The API reads the folder every time the endpoint is called. This ensures the data is always up-to-date with the contents of the `scheme_src` folder.
- **Preloading Data:** For better performance, you could preload the data into memory when the server starts, but this approach won't reflect changes to files until the server restarts.

---

### **Debugging Tips**

1. **Console Log File Paths:**
   ```javascript
   console.log('Files:', files);
   ```

2. **Check Folder Permissions:**
   - Ensure the `scheme_src` folder and its files are accessible by the Node.js process.

3. **Handle Invalid JSON:**
   - Wrap `JSON.parse` in a `try-catch` block to log specific errors for corrupted JSON files:
     ```javascript
     try {
       return JSON.parse(fileContent);
     } catch (err) {
       console.error(`Error parsing JSON in file ${file}:`, err);
       return null;
     }
     ```

---

This implementation should dynamically serve all schemes from your folder without issues. Let me know if you need further assistance! ðŸ˜Š