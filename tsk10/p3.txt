–ß—É–¥–æ–≤–æ! –û—Å—å **–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è** —Ç–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É `DUPLICATE_TASK_OR_TEMPLATE`, –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ —Ç–∞–∫, —â–æ–±:

- —É–Ω–∏–∫–∞—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏;
- –±—É—Ç–∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ñ—à–æ—é;
- —á—ñ—Ç–∫–æ –¥—ñ–ª–∏—Ç–∏ –Ω–∞ –±–ª–æ–∫–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è `TASK` —ñ `TEMPLATE`;
- –ª–µ–≥—à–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞—Ç–∏—Å—å;
- –Ω–µ –º–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ `INDEX BY NUMBER`.

---

## ‚úÖ **–û–Ω–æ–≤–ª–µ–Ω–∏–π PL/SQL –∫–æ–¥ (Oracle 12c Ready):**
```plsql
DECLARE
  v_new_id          NUMBER;
  v_new_subtask_id  NUMBER;

  -- –ú–∞–ø–∞ —Å—Ç–∞—Ä–∏–π ‚Üí –Ω–æ–≤–∏–π ID
  TYPE t_id_map IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
  l_id_map t_id_map;

  -- –¢–∏–ø–∏ —Ä–µ–∂–∏–º—ñ–≤
  c_task_mode     CONSTANT NUMBER := 0;
  c_template_mode CONSTANT NUMBER := 1;

  -- –ö—É—Ä—Å–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
  CURSOR c_subtasks(p_mode NUMBER) IS
    SELECT
      ID,
      PARENT_ID,
      SUBTASK_CONTENT,
      STATUS_ID,
      PLANNING_DATE_END,
      SUBTASK_ORDER,
      TEMPLATE_SUBTASK_ID
    FROM (
      SELECT ID, PARENT_ID, SUBTASK_CONTENT, STATUS_ID, PLANNING_DATE_END, SUBTASK_ORDER, TEMPLATE_SUBTASK_ID
      FROM TASK_SUBTASKS
      WHERE TASK_ID = :P5_TASK_ID
      UNION ALL
      SELECT ID, PARENT_ID, SUBTASK_CONTENT, STATUS_ID, NULL, SUBTASK_ORDER, NULL
      FROM TASK_TEMPLATE_SUBTASKS
      WHERE TEMPLATE_ID = :P5_TASK_ID
    )
    WHERE (:P5_SWITCH = c_task_mode AND PLANNING_DATE_END IS NOT NULL)
       OR (:P5_SWITCH = c_template_mode AND PLANNING_DATE_END IS NULL);

BEGIN
  IF :P5_SWITCH = c_task_mode THEN
    -- === –î—É–±–ª—é—î–º–æ TASK ===
    SELECT TASKS_SEQ.NEXTVAL INTO v_new_id FROM DUAL;

    INSERT INTO TASKS (
      ID, DATE_CREATE, TASK_CONTENT, CREATOR_ID, PLANNING_DATE_START,
      PLANNING_DATE_END, STATUS_ID, DEPARTMENT_ID, UNIT_ID, TYPE_ID,
      PAGE_LIST_ID, IS_GENERATED, GENERATED_DATE, TEMPLATE_ID, NOTE
    )
    SELECT
      v_new_id, SYSDATE, TASK_CONTENT, CREATOR_ID, SYSDATE,
      PLANNING_DATE_END, STATUS_ID, DEPARTMENT_ID, UNIT_ID, TYPE_ID,
      PAGE_LIST_ID, IS_GENERATED, GENERATED_DATE, TEMPLATE_ID, NOTE
    FROM TASKS WHERE ID = :P5_TASK_ID;

    FOR r IN c_subtasks(c_task_mode) LOOP
      SELECT TASK_SUBTASKS_SEQ.NEXTVAL INTO v_new_subtask_id FROM DUAL;

      INSERT INTO TASK_SUBTASKS (
        ID, TASK_ID, SUBTASK_CONTENT, STATUS_ID,
        PLANNING_DATE_END, PARENT_ID, SUBTASK_ORDER, TEMPLATE_SUBTASK_ID
      ) VALUES (
        v_new_subtask_id, v_new_id, r.SUBTASK_CONTENT, r.STATUS_ID,
        r.PLANNING_DATE_END, NULL, r.SUBTASK_ORDER, r.TEMPLATE_SUBTASK_ID
      );

      l_id_map(r.ID) := v_new_subtask_id;
    END LOOP;

    -- PARENT_ID –¥–ª—è TASK_SUBTASKS
    FOR r IN (
      SELECT ID, PARENT_ID FROM TASK_SUBTASKS
      WHERE TASK_ID = v_new_id AND PARENT_ID IS NOT NULL
    ) LOOP
      UPDATE TASK_SUBTASKS
      SET PARENT_ID = l_id_map(r.PARENT_ID)
      WHERE ID = r.ID;
    END LOOP;

  ELSE
    -- === –î—É–±–ª—é—î–º–æ TEMPLATE ===
    SELECT TASK_TEMPLATE_SEQ.NEXTVAL INTO v_new_id FROM DUAL;

    INSERT INTO TASK_TEMPLATES (
      ID, DATE_CREATE, TASK_CONTENT, CREATOR_ID, STATUS_ID,
      DEPARTMENT_ID, UNIT_ID, TYPE_ID, PAGE_LIST_ID,
      PERIOD_MODE, PERIOD_INTERVAL, PERIOD_TIME,
      HOURLY_TIMES, NEXT_RUN_DATE, DATE_END
    )
    SELECT
      v_new_id, SYSDATE, TASK_CONTENT, CREATOR_ID, STATUS_ID,
      DEPARTMENT_ID, UNIT_ID, TYPE_ID, PAGE_LIST_ID,
      PERIOD_MODE, PERIOD_INTERVAL, PERIOD_TIME,
      HOURLY_TIMES, NEXT_RUN_DATE, DATE_END
    FROM TASK_TEMPLATES WHERE ID = :P5_TASK_ID;

    FOR r IN c_subtasks(c_template_mode) LOOP
      SELECT TASK_TEMPLATE_SUBTASKS_SEQ.NEXTVAL INTO v_new_subtask_id FROM DUAL;

      INSERT INTO TASK_TEMPLATE_SUBTASKS (
        ID, TEMPLATE_ID, SUBTASK_CONTENT, STATUS_ID,
        PARENT_ID, SUBTASK_ORDER
      ) VALUES (
        v_new_subtask_id, v_new_id, r.SUBTASK_CONTENT, r.STATUS_ID,
        NULL, r.SUBTASK_ORDER
      );

      l_id_map(r.ID) := v_new_subtask_id;
    END LOOP;

    -- PARENT_ID –¥–ª—è TASK_TEMPLATE_SUBTASKS
    FOR r IN (
      SELECT ID, PARENT_ID FROM TASK_TEMPLATE_SUBTASKS
      WHERE TEMPLATE_ID = v_new_id AND PARENT_ID IS NOT NULL
    ) LOOP
      UPDATE TASK_TEMPLATE_SUBTASKS
      SET PARENT_ID = l_id_map(r.PARENT_ID)
      WHERE ID = r.ID;
    END LOOP;

  END IF;

  -- JSON Response
  APEX_JSON.OPEN_OBJECT;
  APEX_JSON.WRITE('status', 'ok');
  APEX_JSON.WRITE('newId', v_new_id);
  APEX_JSON.CLOSE_OBJECT;

EXCEPTION
  WHEN OTHERS THEN
    APEX_JSON.OPEN_OBJECT;
    APEX_JSON.WRITE('status', 'error');
    APEX_JSON.WRITE('message', SQLERRM);
    APEX_JSON.CLOSE_OBJECT;
END;
```

---

## ‚úÖ –©–æ –∑—Ä–æ–±–ª–µ–Ω–æ:

| –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è                             | –û–ø–∏—Å                                                                 |
|----------------------------------------|----------------------------------------------------------------------|
| üîÑ **–°–ø—ñ–ª—å–Ω–∏–π –∫—É—Ä—Å–æ—Ä**                 | –û–¥–∏–Ω –∫—É—Ä—Å–æ—Ä `c_subtasks`, —è–∫–∏–π –∞–¥–∞–ø—Ç—É—î—Ç—å—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ `SWITCH`     |
| üìå **PLS_INTEGER** –≤ `INDEX BY`        | –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ Oracle 12                               |
| üí° **–ú–µ–Ω—à–µ –¥—É–±–ª—é–≤–∞–Ω–Ω—è INSERT/UPDATE**  | –í–∏–Ω–µ—Å–µ–Ω–æ —Å–ø—ñ–ª—å–Ω—É –ª–æ–≥—ñ–∫—É                                              |
| üìÑ **JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç**                  | –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –±–ª–æ–∫ –∑ `status` —Ç–∞ `newId`                             |

---

–•–æ—á–µ—à, –º–æ–∂—É —â–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∏–Ω–µ—Å—Ç–∏ —Ü–µ —É `PL/SQL-–ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤ –ø–∞–∫–µ—Ç—ñ`, —â–æ–± —ó—ó –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –Ω–µ —Ç—ñ–ª—å–∫–∏ –∑ APEX ‚Äî –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —ñ –≤ —Ç–µ—Å—Ç–∞—Ö, —ñ –∑ —Ç—Ä–∏–≥–µ—Ä—ñ–≤. –¶–µ —Ä–æ–±–∏—Ç—å—Å—è –≤ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω. –†–æ–±–∏–º–æ?