–û—Å—å **–ø–æ–≤–Ω–∏–π PL/SQL –∫–æ–¥** –¥–ª—è `DUPLICATE_SUBTASK_GENERIC`, —è–∫–∏–π –ø—ñ–¥—Ç—Ä–∏–º—É—î **–¥—É–±–ª—é–≤–∞–Ω–Ω—è** —è–∫ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω—å (`TASK_SUBTASKS`), —Ç–∞–∫ —ñ –ø—ñ–¥—à–∞–±–ª–æ–Ω—ñ–≤ (`TASK_TEMPLATE_SUBTASKS`) ‚Äî **–≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∑–Ω–∞—á–µ–Ω–Ω—è `APEX_APPLICATION.G_X02` (0 –∞–±–æ 1)**:

---

### ‚úÖ **PL/SQL Process: `DUPLICATE_SUBTASK_GENERIC`**

```plsql
DECLARE
  v_mode NUMBER := TO_NUMBER(APEX_APPLICATION.G_X02); -- 0 = TASK, 1 = TEMPLATE

  v_new_id     NUMBER;
  v_new_parent NUMBER;

  -- TASK MODE
  v_task_id TASK_SUBTASKS.TASK_ID%TYPE;
  v_parent_id TASK_SUBTASKS.PARENT_ID%TYPE;

  -- TEMPLATE MODE
  v_template_id TASK_TEMPLATE_SUBTASKS.TEMPLATE_ID%TYPE;

BEGIN
  IF v_mode = 0 THEN
    -- üîÅ TASK_SUBTASKS

    SELECT TASK_ID, SUBTASK_CONTENT, STATUS_ID, PLANNING_DATE_END, PARENT_ID
    INTO v_task_id, :P6_SUBTASK_CONTENT, :P6_STATUS_ID, :P6_PLANNING_DATE_END, v_parent_id
    FROM TASK_SUBTASKS
    WHERE ID = APEX_APPLICATION.G_X01;

    INSERT INTO TASK_SUBTASKS (
      ID, TASK_ID, SUBTASK_CONTENT, STATUS_ID,
      PLANNING_DATE_END, PARENT_ID, SUBTASK_ORDER
    ) VALUES (
      TASK_SUBTASKS_SEQ.NEXTVAL,
      v_task_id,
      :P6_SUBTASK_CONTENT,
      :P6_STATUS_ID,
      :P6_PLANNING_DATE_END,
      v_parent_id,
      (
        SELECT NVL(MAX(SUBTASK_ORDER), 0) + 1
        FROM TASK_SUBTASKS
        WHERE TASK_ID = v_task_id AND NVL(PARENT_ID, 0) = NVL(v_parent_id, 0)
      )
    )
    RETURNING ID INTO v_new_id;

  ELSIF v_mode = 1 THEN
    -- üîÅ TASK_TEMPLATE_SUBTASKS

    SELECT TEMPLATE_ID, SUBTASK_CONTENT, STATUS_ID, PARENT_ID
    INTO v_template_id, :P6_SUBTASK_CONTENT, :P6_STATUS_ID, v_parent_id
    FROM TASK_TEMPLATE_SUBTASKS
    WHERE ID = APEX_APPLICATION.G_X01;

    INSERT INTO TASK_TEMPLATE_SUBTASKS (
      ID, TEMPLATE_ID, SUBTASK_CONTENT, STATUS_ID,
      PARENT_ID, SUBTASK_ORDER
    ) VALUES (
      TASK_TEMPLATE_SUBTASKS_SEQ.NEXTVAL,
      v_template_id,
      :P6_SUBTASK_CONTENT,
      :P6_STATUS_ID,
      v_parent_id,
      (
        SELECT NVL(MAX(SUBTASK_ORDER), 0) + 1
        FROM TASK_TEMPLATE_SUBTASKS
        WHERE TEMPLATE_ID = v_template_id AND NVL(PARENT_ID, 0) = NVL(v_parent_id, 0)
      )
    )
    RETURNING ID INTO v_new_id;

  END IF;

  -- ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å
  APEX_JSON.OPEN_OBJECT;
  APEX_JSON.WRITE('status', 'ok');
  APEX_JSON.WRITE('new_id', v_new_id);
  APEX_JSON.CLOSE_OBJECT;

EXCEPTION
  WHEN OTHERS THEN
    APEX_JSON.OPEN_OBJECT;
    APEX_JSON.WRITE('status', 'error');
    APEX_JSON.WRITE('message', SQLERRM);
    APEX_JSON.CLOSE_OBJECT;
END;
```

---

### ‚úÖ JS-–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø—Ä–æ—Ü–µ—Å–∏–Ω–≥—É:

```javascript
function duplicateSubtaskGeneric(id) {
  const mode = $v('P5_TASK_MODE'); // 0 –∞–±–æ 1

  apex.server.process("DUPLICATE_SUBTASK_GENERIC", {
    x01: id,
    x02: mode
  }, {
    dataType: "json",
    success: function(pData) {
      if (pData.status === 'ok') {
        const regionId = mode === '1' ? "TASK_TEMPLATE_SUBTASKS_IG_2" : "TASK_SUBTASKS_IG_1";
        apex.region(regionId).refresh();
      } else {
        apex.message.alert("‚ùå –ü–æ–º–∏–ª–∫–∞: " + (pData.message || "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"));
      }
    },
    error: function() {
      apex.message.alert("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑‚Äô—î–¥–Ω–∞–Ω–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º.");
    }
  });
}
```

---

üîß –Ø–∫—â–æ —Ç–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ `P6_SUBTASK_CONTENT`, `P6_STATUS_ID`, `P6_PLANNING_DATE_END` —è–∫ **–ø–æ—Ç–æ—á–Ω—ñ item-–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏**, —Ç–æ —ó—Ö –º–æ–∂–Ω–∞ –∞–±–æ:

* –¥–æ–¥–∞—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –¥–∞–Ω–∏—Ö;
* –∞–±–æ –∑–∞–º—ñ–Ω–∏—Ç–∏ –≤ `PL/SQL` —á–∞—Å—Ç–∏–Ω—É, —è–∫–∞ —á–∏—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ `:P6_...`, –Ω–∞ –ø—Ä—è–º–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü—ñ (—è–∫—â–æ —Ü–µ –Ω–µ —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è –≤—Ä—É—á–Ω—É).

---

–•–æ—á–µ—à, —è —Ç–∞–∫–æ–∂ –ø—ñ–¥–≥–æ—Ç—É—é JS-–∫–æ–¥ –¥–ª—è **–º–µ–Ω—é "–î—É–±–ª—é–≤–∞—Ç–∏ –ø—ñ–¥—à–∞–±–ª–æ–Ω"** –∑ –∫–Ω–æ–ø–∫–æ—é?
