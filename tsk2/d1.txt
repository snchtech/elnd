Щоб реалізувати функціонал ознайомлення користувача із завданнями кожну зміну, пропоную створити таблицю `TASK_ACKNOWLEDGEMENT`, яка буде фіксувати факт ознайомлення користувача із завданням у певну зміну.

### **Основні вимоги до рішення**:
1. **Таблиця `TASK_ACKNOWLEDGEMENT`** буде містити записи про кожне ознайомлення (`user_id`, `task_id`, `shift_date`, `shift_number`).
2. **Користувач має натискати "Ознайомитись" під час зміни**, і це фіксується в таблиці.
3. **Якщо зміна змінилася, а завдання все ще не завершене**, запис користувача знову буде відсутній у `TASK_ACKNOWLEDGEMENT`, і він має повторно натиснути "Ознайомитись".
4. **Лог ознайомлення** доступний через `SELECT` з таблиці `TASK_ACKNOWLEDGEMENT`.
5. **Зміни визначаються за розкладом:**  
   - **Перша зміна:** 07:00 – 15:00  
   - **Друга зміна:** 15:00 – 23:00  
   - **Третя зміна:** 23:00 – 07:00

---

## **1. Створення таблиці для фіксації ознайомлень**
```sql
CREATE TABLE TASK_ACKNOWLEDGEMENT (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL, -- Користувач, який ознайомився
    task_id NUMBER NOT NULL, -- Завдання, з яким ознайомились
    shift_date DATE NOT NULL, -- Дата зміни
    shift_number NUMBER(1) NOT NULL, -- Номер зміни (1, 2, 3)
    acknowledged_at TIMESTAMP DEFAULT SYSTIMESTAMP, -- Час ознайомлення
    CONSTRAINT TASK_ACK_USER_FK FOREIGN KEY (user_id) REFERENCES USERS(id),
    CONSTRAINT TASK_ACK_TASK_FK FOREIGN KEY (task_id) REFERENCES TASKS(id)
);
```
✅ **Ключові моменти таблиці**:
- `user_id`, `task_id`, `shift_date`, `shift_number` – визначають унікальне ознайомлення.
- `acknowledged_at` – фіксує точний час ознайомлення.
- **Необхідність нового ознайомлення визначається за датою (`shift_date`) і зміною (`shift_number`)**.

---

## **2. Функція визначення поточної зміни**
```sql
CREATE OR REPLACE FUNCTION GET_CURRENT_SHIFT
RETURN NUMBER IS
    v_hour NUMBER;
BEGIN
    SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'HH24')) INTO v_hour FROM DUAL;

    IF v_hour >= 7 AND v_hour < 15 THEN
        RETURN 1; -- Перша зміна
    ELSIF v_hour >= 15 AND v_hour < 23 THEN
        RETURN 2; -- Друга зміна
    ELSE
        RETURN 3; -- Третя зміна
    END IF;
END;
/
```
✅ Ця функція визначає **номер поточної зміни** на основі часу сервера.

---

## **3. Запит для перевірки, чи потрібно користувачу ознайомитися**
```sql
SELECT t.id AS task_id, t.task_content, a.user_id, a.shift_date, a.shift_number
FROM TASKS t
LEFT JOIN TASK_ACKNOWLEDGEMENT a 
    ON t.id = a.task_id 
    AND a.user_id = :current_user_id 
    AND a.shift_date = TRUNC(SYSDATE)
    AND a.shift_number = GET_CURRENT_SHIFT()
WHERE (t.creator_id = :current_user_id OR t.department_id = :current_department_id)
    AND t.status_id != 4 -- Завдання не завершене
    AND a.id IS NULL; -- Немає запису про ознайомлення
```
✅ **Логіка запиту**:
- Перевіряє, чи **користувач вже ознайомлювався у цю зміну** (`a.id IS NULL`).
- Якщо користувач працює у своєму відділі або створив завдання, **він має його бачити**.
- Завдання повинно бути **не завершеним** (`status_id != 4`).
- `GET_CURRENT_SHIFT()` визначає поточну зміну.
- `TRUNC(SYSDATE)` бере тільки дату, без часу.

---

## **4. Додавання запису при натисканні "Ознайомитись"**
```sql
INSERT INTO TASK_ACKNOWLEDGEMENT (user_id, task_id, shift_date, shift_number)
VALUES (:current_user_id, :task_id, TRUNC(SYSDATE), GET_CURRENT_SHIFT());
```
✅ **Це додає запис про ознайомлення**, яке буде унікальним для кожної зміни.

---

## **5. Запит для перегляду логу ознайомлення**
```sql
SELECT ta.user_id, u.username, ta.task_id, t.task_content, ta.shift_date, ta.shift_number, ta.acknowledged_at
FROM TASK_ACKNOWLEDGEMENT ta
JOIN USERS u ON ta.user_id = u.id
JOIN TASKS t ON ta.task_id = t.id
ORDER BY ta.acknowledged_at DESC;
```
✅ Показує **лог усіх ознайомлень**, відсортований за останніми записами.

---

## **Підсумок реалізації**
- **Користувач повинен натискати "Ознайомитись" на початку кожної зміни**.
- **Система автоматично визначає зміну**.
- **Якщо користувач пропустив зміну, його ознайомлення більше не є актуальним**.
- **Перегляд логів дозволяє керівникам бачити, хто ознайомлювався**.

Ця реалізація дозволяє **автоматично нагадувати користувачу про незнайомі завдання** та **відстежувати, коли вони були переглянуті**. 🚀