–û—Å—å –ø—Ä–∏–∫–ª–∞–¥ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ–≥–æ **AFTER INSERT OR UPDATE** —Ç—Ä–∏–≥–µ—Ä–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—é `TASKS`, —è–∫–∏–π –ª–æ–≥—É–≤–∞—Ç–∏–º–µ –≤—Å—ñ –∑–º—ñ–Ω–∏ —É —Ç–∞–±–ª–∏—Ü—é `TASK_CHANGE_LOG`.

---

### üìå **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ TASK\_CHANGE\_LOG** (–ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ —ó—ó –Ω–∞—è–≤–Ω—ñ—Å—Ç—å):

```sql
CREATE TABLE TASK_CHANGE_LOG (
  ID             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  TASK_ID        NUMBER,
  FIELD_NAME     VARCHAR2(100),
  OLD_VALUE      VARCHAR2(4000),
  NEW_VALUE      VARCHAR2(4000),
  CHANGE_DATE    DATE,
  CHANGED_BY     VARCHAR2(100),
  CHANGE_TYPE    VARCHAR2(10) -- 'INSERT' or 'UPDATE'
);
```

---

### ‚úÖ **–¢—Ä–∏–≥–µ—Ä –Ω–∞ TASKS:**

```sql
CREATE OR REPLACE TRIGGER trg_log_task_changes
AFTER INSERT OR UPDATE ON TASKS
FOR EACH ROW
DECLARE
  v_user        VARCHAR2(100);
  v_change_type VARCHAR2(10);
  
  PROCEDURE log_change(p_field VARCHAR2, p_old VARCHAR2, p_new VARCHAR2) IS
  BEGIN
    INSERT INTO TASK_CHANGE_LOG (
      TASK_ID,
      FIELD_NAME,
      OLD_VALUE,
      NEW_VALUE,
      CHANGE_DATE,
      CHANGED_BY,
      CHANGE_TYPE
    ) VALUES (
      :NEW.ID,
      p_field,
      p_old,
      p_new,
      SYSDATE,
      v_user,
      v_change_type
    );
  END;
  
BEGIN
  -- –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  v_user := NVL(sys_context('APEX$SESSION','APP_USER'), USER);
  v_change_type := CASE WHEN INSERTING THEN 'INSERT' ELSE 'UPDATE' END;

  -- === INSERT LOG ===
  IF INSERTING THEN
    log_change('TASK_CONTENT', NULL, :NEW.TASK_CONTENT);
    log_change('STATUS_ID', NULL, TO_CHAR(:NEW.STATUS_ID));
    log_change('PLANNING_DATE_START', NULL, TO_CHAR(:NEW.PLANNING_DATE_START, 'YYYY-MM-DD HH24:MI:SS'));
    log_change('PLANNING_DATE_END', NULL, TO_CHAR(:NEW.PLANNING_DATE_END, 'YYYY-MM-DD HH24:MI:SS'));
    -- –î–æ–¥–∞–π —ñ–Ω—à—ñ –ø–æ–ª—è –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
  END IF;

  -- === UPDATE LOG ===
  IF UPDATING THEN
    IF NVL(:OLD.TASK_CONTENT, '-') != NVL(:NEW.TASK_CONTENT, '-') THEN
      log_change('TASK_CONTENT', :OLD.TASK_CONTENT, :NEW.TASK_CONTENT);
    END IF;

    IF NVL(:OLD.STATUS_ID, -1) != NVL(:NEW.STATUS_ID, -1) THEN
      log_change('STATUS_ID', TO_CHAR(:OLD.STATUS_ID), TO_CHAR(:NEW.STATUS_ID));
    END IF;

    IF NVL(:OLD.PLANNING_DATE_START, TO_DATE('1900-01-01','YYYY-MM-DD')) != NVL(:NEW.PLANNING_DATE_START, TO_DATE('1900-01-01','YYYY-MM-DD')) THEN
      log_change('PLANNING_DATE_START', TO_CHAR(:OLD.PLANNING_DATE_START, 'YYYY-MM-DD HH24:MI:SS'), TO_CHAR(:NEW.PLANNING_DATE_START, 'YYYY-MM-DD HH24:MI:SS'));
    END IF;

    IF NVL(:OLD.PLANNING_DATE_END, TO_DATE('1900-01-01','YYYY-MM-DD')) != NVL(:NEW.PLANNING_DATE_END, TO_DATE('1900-01-01','YYYY-MM-DD')) THEN
      log_change('PLANNING_DATE_END', TO_CHAR(:OLD.PLANNING_DATE_END, 'YYYY-MM-DD HH24:MI:SS'), TO_CHAR(:NEW.PLANNING_DATE_END, 'YYYY-MM-DD HH24:MI:SS'));
    END IF;

    -- –î–æ–¥–∞–π —ñ–Ω—à—ñ –ø–æ–ª—è –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
  END IF;
END;
```

---

### üîß –Ø–∫ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏?

* –©–æ–± –ª–æ–≥—É–≤–∞—Ç–∏ **–≤—Å—ñ –ø–æ–ª—è**, –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞–π –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ `IF NVL(:OLD.X) != NVL(:NEW.X)` –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑ –Ω–∏—Ö.
* –Ø–∫—â–æ —Ö–æ—á–µ—à –ª–æ–≥—É–≤–∞—Ç–∏ **–≤—Å—ñ –ø–æ–ª—è –æ–¥—Ä–∞–∑—É –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏** ‚Äî –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–≤—ñ—Ç—å –ø—Ä–æ—Å—Ç—ñ—à–µ (–∞–ª–µ –±—É–¥–µ –±—ñ–ª—å—à–µ –∑–∞–ø–∏—Å—ñ–≤).

---

### üìå –ü–µ—Ä–µ–≤–∞–≥–∏ –ø—ñ–¥—Ö–æ–¥—É:

* –ü—Ä–æ—Å—Ç–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–º—ñ–Ω.
* –ü–æ–≤–Ω–∞ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å: —Ö—Ç–æ, –∫–æ–ª–∏, —ñ —â–æ –∑–º—ñ–Ω–∏–≤.
* –ü—Ä–∞—Ü—é—î –∑ `VARCHAR2` ‚Äî –±–µ–∑ `CLOB`.

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π —Ç—Ä–∏–≥–µ—Ä –¥–ª—è `TASK_TEMPLATES` ‚Äî –º–æ–∂—É —Ç–∞–∫–æ–∂ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏.
