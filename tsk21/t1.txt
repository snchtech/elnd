–û—Å—å –ø—Ä–∏–∫–ª–∞–¥–∏ —Ç—Ä–∏–≥–µ—Ä—ñ–≤ –¥–ª—è —ñ–Ω—à–∏—Ö —Ç—Ä—å–æ—Ö —Ç–∞–±–ª–∏—Ü—å: `TASK_SUBTASKS`, `TASK_TEMPLATES`, `TASK_TEMPLATE_SUBTASKS` ‚Äî –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ `TRG_TASKS_LOG`. –£—Å—ñ –≤–æ–Ω–∏ –ø–∏—à—É—Ç—å –∑–º—ñ–Ω–∏ –≤ –ª–æ–≥ `TASK_CHANGE_LOG`.

---

## ‚úÖ 1. –¢—Ä–∏–≥–µ—Ä –¥–ª—è `TASK_SUBTASKS`

```sql
CREATE OR REPLACE TRIGGER TRG_TASK_SUBTASKS_LOG
AFTER UPDATE ON TASK_SUBTASKS
FOR EACH ROW
DECLARE
  v_user VARCHAR2(50);
BEGIN
  v_user := NVL(sys_context('APEX$SESSION','APP_USER'), USER);

  IF :OLD.SUBTASK_CONTENT IS DISTINCT FROM :NEW.SUBTASK_CONTENT THEN
    INSERT INTO TASK_CHANGE_LOG (USER_ID, OBJECT_TYPE, OBJECT_ID, ACTION_TYPE, FIELD_NAME, OLD_VALUE, NEW_VALUE)
    VALUES (v_user, 'SUBTASK', :NEW.ID, 'UPDATE', 'SUBTASK_CONTENT', :OLD.SUBTASK_CONTENT, :NEW.SUBTASK_CONTENT);
  END IF;

  IF :OLD.STATUS_ID IS DISTINCT FROM :NEW.STATUS_ID THEN
    INSERT INTO TASK_CHANGE_LOG (USER_ID, OBJECT_TYPE, OBJECT_ID, ACTION_TYPE, FIELD_NAME, OLD_VALUE, NEW_VALUE)
    VALUES (v_user, 'SUBTASK', :NEW.ID, 'UPDATE', 'STATUS_ID', TO_CHAR(:OLD.STATUS_ID), TO_CHAR(:NEW.STATUS_ID));
  END IF;

  IF :OLD.PLANNING_DATE_END IS DISTINCT FROM :NEW.PLANNING_DATE_END THEN
    INSERT INTO TASK_CHANGE_LOG (USER_ID, OBJECT_TYPE, OBJECT_ID, ACTION_TYPE, FIELD_NAME, OLD_VALUE, NEW_VALUE)
    VALUES (v_user, 'SUBTASK', :NEW.ID, 'UPDATE', 'PLANNING_DATE_END', TO_CHAR(:OLD.PLANNING_DATE_END, 'YYYY-MM-DD HH24:MI'), TO_CHAR(:NEW.PLANNING_DATE_END, 'YYYY-MM-DD HH24:MI'));
  END IF;

  -- –¥–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –ø–æ–ª—è –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
END;
```

---

## ‚úÖ 2. –¢—Ä–∏–≥–µ—Ä –¥–ª—è `TASK_TEMPLATES`

```sql
CREATE OR REPLACE TRIGGER TRG_TASK_TEMPLATES_LOG
AFTER UPDATE ON TASK_TEMPLATES
FOR EACH ROW
DECLARE
  v_user VARCHAR2(50);
BEGIN
  v_user := NVL(sys_context('APEX$SESSION','APP_USER'), USER);

  IF :OLD.TASK_CONTENT IS DISTINCT FROM :NEW.TASK_CONTENT THEN
    INSERT INTO TASK_CHANGE_LOG (USER_ID, OBJECT_TYPE, OBJECT_ID, ACTION_TYPE, FIELD_NAME, OLD_VALUE, NEW_VALUE)
    VALUES (v_user, 'TEMPLATE', :NEW.ID, 'UPDATE', 'TASK_CONTENT', :OLD.TASK_CONTENT, :NEW.TASK_CONTENT);
  END IF;

  IF :OLD.PERIOD_MODE IS DISTINCT FROM :NEW.PERIOD_MODE THEN
    INSERT INTO TASK_CHANGE_LOG (USER_ID, OBJECT_TYPE, OBJECT_ID, ACTION_TYPE, FIELD_NAME, OLD_VALUE, NEW_VALUE)
    VALUES (v_user, 'TEMPLATE', :NEW.ID, 'UPDATE', 'PERIOD_MODE', TO_CHAR(:OLD.PERIOD_MODE), TO_CHAR(:NEW.PERIOD_MODE));
  END IF;

  IF :OLD.PERIOD_INTERVAL IS DISTINCT FROM :NEW.PERIOD_INTERVAL THEN
    INSERT INTO TASK_CHANGE_LOG (USER_ID, OBJECT_TYPE, OBJECT_ID, ACTION_TYPE, FIELD_NAME, OLD_VALUE, NEW_VALUE)
    VALUES (v_user, 'TEMPLATE', :NEW.ID, 'UPDATE', 'PERIOD_INTERVAL', TO_CHAR(:OLD.PERIOD_INTERVAL), TO_CHAR(:NEW.PERIOD_INTERVAL));
  END IF;

  -- –î–æ–¥–∞—Ç–∏ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–ª—ñ–≤
END;
```

---

## ‚úÖ 3. –¢—Ä–∏–≥–µ—Ä –¥–ª—è `TASK_TEMPLATE_SUBTASKS`

```sql
CREATE OR REPLACE TRIGGER TRG_TEMPLATE_SUBTASKS_LOG
AFTER UPDATE ON TASK_TEMPLATE_SUBTASKS
FOR EACH ROW
DECLARE
  v_user VARCHAR2(50);
BEGIN
  v_user := NVL(sys_context('APEX$SESSION','APP_USER'), USER);

  IF :OLD.SUBTASK_CONTENT IS DISTINCT FROM :NEW.SUBTASK_CONTENT THEN
    INSERT INTO TASK_CHANGE_LOG (USER_ID, OBJECT_TYPE, OBJECT_ID, ACTION_TYPE, FIELD_NAME, OLD_VALUE, NEW_VALUE)
    VALUES (v_user, 'SUBTEMPLATE', :NEW.ID, 'UPDATE', 'SUBTASK_CONTENT', :OLD.SUBTASK_CONTENT, :NEW.SUBTASK_CONTENT);
  END IF;

  IF :OLD.STATUS_ID IS DISTINCT FROM :NEW.STATUS_ID THEN
    INSERT INTO TASK_CHANGE_LOG (USER_ID, OBJECT_TYPE, OBJECT_ID, ACTION_TYPE, FIELD_NAME, OLD_VALUE, NEW_VALUE)
    VALUES (v_user, 'SUBTEMPLATE', :NEW.ID, 'UPDATE', 'STATUS_ID', TO_CHAR(:OLD.STATUS_ID), TO_CHAR(:NEW.STATUS_ID));
  END IF;

  IF :OLD.SUBTASK_ORDER IS DISTINCT FROM :NEW.SUBTASK_ORDER THEN
    INSERT INTO TASK_CHANGE_LOG (USER_ID, OBJECT_TYPE, OBJECT_ID, ACTION_TYPE, FIELD_NAME, OLD_VALUE, NEW_VALUE)
    VALUES (v_user, 'SUBTEMPLATE', :NEW.ID, 'UPDATE', 'SUBTASK_ORDER', TO_CHAR(:OLD.SUBTASK_ORDER), TO_CHAR(:NEW.SUBTASK_ORDER));
  END IF;

  -- –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –¥–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –ø–æ–ª—è
END;
```

---

üîÅ **–ó–∞—É–≤–∞–∂–µ–Ω–Ω—è**:

* –í —É—Å—ñ—Ö `TO_CHAR(...)` –æ–±–µ—Ä—Ç–∞—é—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É `DATE`, `NUMBER`.
* –í –ø–æ–ª—ñ `OBJECT_TYPE` –≤–∫–∞–∑—É—î—Ç—å—Å—è —Ç–∏–ø ‚Äî `'TASK'`, `'SUBTASK'`, `'TEMPLATE'`, `'SUBTEMPLATE'` –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –≤ –ª–æ–≥–∞—Ö.
* –£ —Ç–∞–±–ª–∏—Ü—ñ `TASK_CHANGE_LOG` –±–∞–∂–∞–Ω–æ –º–∞—Ç–∏ –ø–æ–ª—è:

  * `USER_ID`, `OBJECT_TYPE`, `OBJECT_ID`, `ACTION_TYPE`, `FIELD_NAME`, `OLD_VALUE`, `NEW_VALUE`, `LOG_DATE DEFAULT SYSDATE`.

üîí –Ø–∫—â–æ —Ö–æ—á–µ—à ‚Äî –º–æ–∂—É –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ `TASK_CHANGE_LOG` —è–∫ `CREATE TABLE`.
