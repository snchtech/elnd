An alternative approach to achieve this functionality in Oracle APEX, without using Ajax callbacks, involves leveraging **Hidden Page Items** and **PL/SQL Dynamic Actions**. Here's how you can implement it:

### 1. **Create a Hidden Item on the Page**
   - Go to your Oracle APEX page and create a **Hidden Item** (e.g., `P1_TOKEN`).
   - This item will store the token generated by the `generate_token` function.

### 2. **Use a PL/SQL Process to Set the Token**
   - Create a **PL/SQL Process** on the page that runs **before page load** to populate the hidden item with the token.

   **Process Code**:
   ```sql
   BEGIN
       -- Call your generate_token function and assign it to the hidden page item
       :P1_TOKEN := auth_pkg.generate_token;
   END;
   ```

   This ensures that the `P1_TOKEN` item contains the generated token when the page loads.

### 3. **Create a Dynamic Action to Use the Token**
   Next, create a **Dynamic Action** to execute the JavaScript once the page is loaded, using the token stored in `P1_TOKEN`.

   - **Event**: Page Load (or any other triggering event, such as a button click)
   - **Action**: Execute JavaScript Code

   **JavaScript Code**:
   ```javascript
   // Get the token value from the hidden item
   var token = $v('P1_TOKEN'); // $v() is a built-in APEX function to get the value of a page item

   // Call the get_connect_ws function with the token
   get_connect_ws(token);

// Clear the token value in the hidden item
$s('P1_TOKEN', ''); // $s() is a built-in APEX function to set the value of a page item
   ```

   This JavaScript will retrieve the token from the hidden item and pass it to the `get_connect_ws(token)` function.

### 4. **Explanation of the Workflow**:
- The **PL/SQL Process** on page load populates the hidden page item `P1_TOKEN` with the token generated by the `auth_pkg.generate_token` function.
- The **Dynamic Action** runs when the page loads (or based on another event) and retrieves the value of `P1_TOKEN` using the `$v()` function. It then passes the token to the `get_connect_ws()` function.

### 5. **Optional: Button or Event-Triggered Approach**
   If you want to trigger this on a button click or any other event (instead of on page load), you can:
   - Create a button on your page (e.g., **"Connect WebSocket"**).
   - Create a **Dynamic Action** on that button to execute the same JavaScript code mentioned above.

### Summary of Alternative Method:
1. Use a **Hidden Item** to store the token value.
2. A **PL/SQL Process** populates the hidden item before the page loads.
3. Use a **Dynamic Action** to trigger the WebSocket connection using JavaScript once the token is available.

This approach avoids Ajax calls and ensures the token is available directly in a hidden item, making it accessible via JavaScript for further processing in the `get_connect_ws(token)` function.