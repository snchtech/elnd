Here's a simple example of a channel-based architecture using WebSockets in Node.js. In this example, we use the `ws` library, which is a popular WebSocket library for Node.js. The server will manage channels and allow clients to join and send messages to specific channels.

First, you'll need to install the `ws` library. You can do this by running:

```bash
npm install ws
```

Now, let's create a simple WebSocket server with channel-based architecture:

```javascript
// Import the ws library
const WebSocket = require('ws');

// Create a WebSocket server on port 8080
const wss = new WebSocket.Server({ port: 8080 });

// Store channels and their associated clients
const channels = {};

wss.on('connection', (ws) => {
  console.log('New client connected');

  // Assign a channel to the client when they send a message to join a channel
  ws.on('message', (message) => {
    const { type, channel, data } = JSON.parse(message);

    switch (type) {
      case 'join':
        if (!channels[channel]) {
          channels[channel] = [];
        }
        channels[channel].push(ws);
        ws.channel = channel; // Save the channel to the ws instance
        console.log(`Client joined channel ${channel}`);
        break;

      case 'message':
        if (ws.channel) {
          // Broadcast message to all clients in the channel
          channels[ws.channel].forEach((client) => {
            if (client !== ws && client.readyState === WebSocket.OPEN) {
              client.send(JSON.stringify({ channel: ws.channel, data }));
            }
          });
        }
        break;

      default:
        console.log('Unknown message type');
    }
  });

  // Clean up when the client disconnects
  ws.on('close', () => {
    console.log('Client disconnected');
    if (ws.channel && channels[ws.channel]) {
      channels[ws.channel] = channels[ws.channel].filter((client) => client !== ws);
      if (channels[ws.channel].length === 0) {
        delete channels[ws.channel];
      }
    }
  });
});

console.log('WebSocket server is running on ws://localhost:8080');
```

### Client Example

Here's a simple client example using a WebSocket connection:

```javascript
const ws = new WebSocket('ws://localhost:8080');

// Join a channel
ws.onopen = () => {
  ws.send(JSON.stringify({ type: 'join', channel: 'general' }));
};

// Listen for messages
ws.onmessage = (event) => {
  const { channel, data } = JSON.parse(event.data);
  console.log(`Received message on channel ${channel}: ${data}`);
};

// Send a message to the channel
const sendMessage = (message) => {
  ws.send(JSON.stringify({ type: 'message', data: message }));
};

// Example of sending a message after joining the channel
ws.onopen = () => {
  ws.send(JSON.stringify({ type: 'join', channel: 'general' }));
  sendMessage('Hello, channel!');
};
```

### How It Works

1. **Server**:
   - The server listens for connections and messages from clients.
   - Clients can join a specific channel by sending a message with `{ type: 'join', channel: 'channel_name' }`.
   - The server stores the WebSocket connection in the appropriate channel list.
   - When a client sends a message with `{ type: 'message', data: 'some data' }`, the server broadcasts the message to all clients in the same channel.

2. **Client**:
   - The client connects to the WebSocket server.
   - It can join a channel by sending a join message.
   - It listens for incoming messages from the server and can send messages to the channel.

This example demonstrates a simple implementation. In a production environment, you'd need to consider authentication, error handling, and possibly a more robust mechanism for managing channels and clients.