You can achieve this functionality using HTML, CSS, and JavaScript. Here's a step-by-step example of how to implement it:

### HTML Structure

```html
<div class="login-container">
    <input type="text" id="login" placeholder="Enter login">
    <button id="toggle-list" class="arrow-down">▼</button>
    <div class="saved-login" style="display: none;">
        <ul>
            <li>John</li>
            <li>Peter</li>
            <li>Mark</li>
        </ul>
    </div>
</div>
```

### CSS Styling

```css
.login-container {
    position: relative;
    display: inline-block;
}

#login {
    width: 200px;
    padding-right: 30px; /* Add padding to make space for button */
}

#toggle-list {
    position: absolute;
    right: 0;
    top: 0;
    bottom: 0;
    width: 30px;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 18px;
    padding: 0;
    outline: none;
}

#toggle-list.arrow-up::after {
    content: "▲";
}

#toggle-list.arrow-down::after {
    content: "▼";
}

.saved-login {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    border: 1px solid #ccc;
    background-color: #fff;
    z-index: 1;
}

.saved-login ul {
    list-style: none;
    margin: 0;
    padding: 0;
}

.saved-login li {
    padding: 5px;
    cursor: pointer;
}

.saved-login li:hover {
    background-color: #f0f0f0;
}
```

### JavaScript Logic

```javascript
const input = document.getElementById('login');
const toggleButton = document.getElementById('toggle-list');
const savedLogin = document.querySelector('.saved-login');

// Check if saved logins exist and display the button
const savedLoginItems = savedLogin.querySelectorAll('li');
if (savedLoginItems.length > 0) {
    toggleButton.style.display = 'inline-block';
}

// Function to toggle the list
toggleButton.addEventListener('click', () => {
    if (savedLogin.style.display === 'none') {
        savedLogin.style.display = 'block';
        toggleButton.classList.remove('arrow-down');
        toggleButton.classList.add('arrow-up');
    } else {
        savedLogin.style.display = 'none';
        toggleButton.classList.remove('arrow-up');
        toggleButton.classList.add('arrow-down');
    }
});

// Hide saved login list when input is not empty
input.addEventListener('input', () => {
    if (input.value === '') {
        savedLogin.style.display = 'block';
        toggleButton.classList.remove('arrow-down');
        toggleButton.classList.add('arrow-up');
    } else {
        savedLogin.style.display = 'none';
        toggleButton.classList.remove('arrow-up');
        toggleButton.classList.add('arrow-down');
    }
});

// Optional: Set the login input value when clicking a saved login item
savedLoginItems.forEach(item => {
    item.addEventListener('click', () => {
        input.value = item.textContent;
        savedLogin.style.display = 'none';
        toggleButton.classList.remove('arrow-up');
        toggleButton.classList.add('arrow-down');
    });
});
```

### Explanation:

1. **HTML**:
    - We add a button next to the input that will act as the toggle for showing or hiding the saved login list.
    - The list of saved logins (`.saved-login`) is initially hidden.
   
2. **CSS**:
    - Styles for the input, button, and saved login list are added. The button shows an arrow down (`▼`) initially and an arrow up (`▲`) when the list is shown.

3. **JavaScript**:
    - We check if there are any saved login items in the list. If there are, the button is displayed.
    - When the user clicks the toggle button, the list visibility changes, and the button arrow switches.
    - When the user starts typing in the input, the list is hidden if the input contains text, and shown when the input is empty.
    - Clicking on a saved login item fills the input with the selected name and hides the list.

You can copy and modify the code as needed for your specific case.